{
    "name": "WorkersPoolModule",
    "documentation": {
        "sections": [
            {
                "content": "Add-on module enhancing [Web Workers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers)\nmanagement by automating environment setup, handling task scheduling, and managing resources efficiently.\n\n<note level=\"warning\">\nThis module is **not included by default** in the main library.\nConsumers must install it explicitly using  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.installWorkersPoolModule\" semantic=\"function\">MainModule.installWorkersPoolModule</mkapi-api-link> .\n</note>\n\nThe main entry point of the module is  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.WorkersPool\" semantic=\"class\">WorkersPool</mkapi-api-link> .",
                "contentType": "markdown",
                "semantic": {
                    "role": "",
                    "labels": [],
                    "attributes": {},
                    "relations": {}
                }
            }
        ]
    },
    "path": "webpm-client/WorkersPoolModule",
    "navPath": "@nav[webpm-client]",
    "attributes": [],
    "types": [
        {
            "name": "NoContext",
            "documentation": {
                "sections": [
                    {
                        "content": "Empty implementation of  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.ContextTrait\" semantic=\"interface\">ContextTrait</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "NoContext",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.NoContext",
            "attributes": [],
            "callables": [
                {
                    "name": "withChild",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Append a child context, usually wrapping a function call.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **cb**: The callback triggering the action.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Returns",
                                "content": "The callback's return",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "returns",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "NoContext.withChild",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.NoContext.withChild",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "withChild<T>(_name: string, cb: (ctx: ContextTrait) => T): T",
                        "implementation": "withChild<T>(_name: string, cb: (ctx: ContextTrait) => T): T {\n    return cb(this)\n}",
                        "startLine": 50,
                        "endLine": 53,
                        "references": {
                            "withChild": "@nav[webpm-client]/WorkersPoolModule.NoContext.withChild",
                            "ContextTrait": "@nav[webpm-client]/WorkersPoolModule.ContextTrait"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export class NoContext implements ContextTrait",
                "implementation": "export class NoContext implements ContextTrait {\n    withChild<T>(_name: string, cb: (ctx: ContextTrait) => T): T {\n        return cb(this)\n    }\n    info(text: string, data?: unknown) {\n        /** no op*/\n        console.log(text, data)\n    }\n}",
                "startLine": 49,
                "endLine": 58,
                "references": {
                    "NoContext": "@nav[webpm-client]/WorkersPoolModule.NoContext",
                    "ContextTrait.info": "@nav[webpm-client]/WorkersPoolModule.ContextTrait.info",
                    "ContextTrait": "@nav[webpm-client]/WorkersPoolModule.ContextTrait",
                    "ContextTrait.withChild": "@nav[webpm-client]/WorkersPoolModule.ContextTrait.withChild"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Process",
            "documentation": {
                "sections": [
                    {
                        "content": "A process is an abstraction managing lifecycle of a particular task.\nNot doing much for now besides gathering callbacks to call at different stage of the task (logging into console).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Process",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.Process",
            "attributes": [
                {
                    "name": "context",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Associated context.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Process.context",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.Process.context",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "public readonly context: ContextTrait",
                        "implementation": "",
                        "startLine": 727,
                        "endLine": 728,
                        "references": {
                            "context": "@nav[webpm-client]/WorkersPoolModule.Process.context",
                            "ContextTrait": "@nav[webpm-client]/WorkersPoolModule.ContextTrait"
                        }
                    }
                },
                {
                    "name": "taskId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Task's id.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Process.taskId",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.Process.taskId",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "public readonly taskId: string",
                        "implementation": "",
                        "startLine": 719,
                        "endLine": 720,
                        "references": {
                            "taskId": "@nav[webpm-client]/WorkersPoolModule.Process.taskId"
                        }
                    }
                },
                {
                    "name": "title",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Task's title.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Process.title",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.Process.title",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "public readonly title: string",
                        "implementation": "",
                        "startLine": 723,
                        "endLine": 724,
                        "references": {
                            "title": "@nav[webpm-client]/WorkersPoolModule.Process.title"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export class Process",
                "implementation": "export class Process {\n    /**\n     * Task's id.\n     */\n    public readonly taskId: string\n    /**\n     * Task's title.\n     */\n    public readonly title: string\n    /**\n     * Associated context.\n     */\n    public readonly context: ContextTrait\n\n    constructor(params: {\n        taskId: string\n        title: string\n        context: ContextTrait\n    }) {\n        Object.assign(this, params)\n    }\n\n    schedule() {\n        this.context.info(`Schedule task  ${this.title} (${this.taskId})`)\n    }\n\n    start() {\n        this.context.info(`Start task  ${this.title} (${this.taskId})`)\n    }\n\n    fail(error: unknown) {\n        console.error('An error occurred in a worker', error)\n        this.context.info(`Task failed  ${this.title} (${this.taskId})`, {\n            error,\n        })\n    }\n\n    succeed() {\n        this.context.info(`Task succeeded  ${this.title} (${this.taskId})`)\n    }\n\n    log(text: string) {\n        this.context.info(`${this.title} (${this.taskId}): ${text}`)\n    }\n}",
                "startLine": 715,
                "endLine": 760,
                "references": {
                    "Process": "@nav[webpm-client]/WorkersPoolModule.Process",
                    "ContextTrait": "@nav[webpm-client]/WorkersPoolModule.ContextTrait"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "WebWorkerBrowser",
            "documentation": {
                "sections": [
                    {
                        "content": "Implementation of  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.WWorkerTrait\" semantic=\"interface\">WWorkerTrait</mkapi-api-link>  for Web Workers provided by browsers.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "WebWorkerBrowser",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.WebWorkerBrowser",
            "attributes": [
                {
                    "name": "uid",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Immutable Constants",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WebWorkerBrowser.uid",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WebWorkerBrowser.uid",
                    "code": {
                        "filePath": "src/lib/workers-pool/web-worker.proxy.ts",
                        "declaration": "public readonly uid: string",
                        "implementation": "",
                        "startLine": 82,
                        "endLine": 83,
                        "references": {
                            "uid": "@nav[webpm-client]/WorkersPoolModule.WebWorkerBrowser.uid",
                            "WWorkerTrait.uid": "@nav[webpm-client]/WorkersPoolModule.WWorkerTrait.uid"
                        }
                    }
                },
                {
                    "name": "worker",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Immutable Constants",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WebWorkerBrowser.worker",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WebWorkerBrowser.worker",
                    "code": {
                        "filePath": "src/lib/workers-pool/web-worker.proxy.ts",
                        "declaration": "public readonly worker: Worker",
                        "implementation": "",
                        "startLine": 86,
                        "endLine": 87,
                        "references": {
                            "worker": "@nav[webpm-client]/WorkersPoolModule.WebWorkerBrowser.worker"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "execute",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Send a task execution request to the worker.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WebWorkerBrowser.execute",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WebWorkerBrowser.execute",
                    "code": {
                        "filePath": "src/lib/workers-pool/web-worker.proxy.ts",
                        "declaration": "execute<T>({\n    taskId,\n    entryPoint,\n    args,\n}: {\n    taskId: string\n    entryPoint: (args: EntryPointArguments<T>) => unknown\n    args: T\n})",
                        "implementation": "execute<T>({\n    taskId,\n    entryPoint,\n    args,\n}: {\n    taskId: string\n    entryPoint: (args: EntryPointArguments<T>) => unknown\n    args: T\n}) {\n    const message = {\n        type: 'Execute',\n        data: {\n            taskId,\n            workerId: this.uid,\n            args,\n            entryPoint: `return ${String(entryPoint)}`,\n        },\n    }\n    this.worker.postMessage(message)\n}",
                        "startLine": 92,
                        "endLine": 112,
                        "references": {
                            "execute": "@nav[webpm-client]/WorkersPoolModule.WebWorkerBrowser.execute",
                            "EntryPointArguments": "@nav[webpm-client]/WorkersPoolModule.EntryPointArguments"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "send",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Send to the worker some data in the channel associated to  `taskId` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WebWorkerBrowser.send",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WebWorkerBrowser.send",
                    "code": {
                        "filePath": "src/lib/workers-pool/web-worker.proxy.ts",
                        "declaration": "send({ taskId, data }: { taskId: string; data: unknown })",
                        "implementation": "send({ taskId, data }: { taskId: string; data: unknown }) {\n    const messageToWorker = {\n        type: 'MainToWorkerMessage',\n        data: {\n            taskId,\n            workerId: this.uid,\n            data,\n        },\n    }\n    this.worker.postMessage(messageToWorker)\n}",
                        "startLine": 113,
                        "endLine": 124,
                        "references": {
                            "send": "@nav[webpm-client]/WorkersPoolModule.WebWorkerBrowser.send"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "terminate",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Terminate the worker.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WebWorkerBrowser.terminate",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WebWorkerBrowser.terminate",
                    "code": {
                        "filePath": "src/lib/workers-pool/web-worker.proxy.ts",
                        "declaration": "terminate()",
                        "implementation": "terminate() {\n    this.worker.terminate()\n}",
                        "startLine": 125,
                        "endLine": 128,
                        "references": {
                            "terminate": "@nav[webpm-client]/WorkersPoolModule.WebWorkerBrowser.terminate"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/workers-pool/web-worker.proxy.ts",
                "declaration": "export class WebWorkerBrowser implements WWorkerTrait",
                "implementation": "export class WebWorkerBrowser implements WWorkerTrait {\n    /**\n     * Immutable Constants\n     */\n    public readonly uid: string\n    /**\n     * Immutable Constants\n     */\n    public readonly worker: Worker\n\n    constructor(params: { uid: string; worker: Worker }) {\n        Object.assign(this, params)\n    }\n\n    execute<T>({\n        taskId,\n        entryPoint,\n        args,\n    }: {\n        taskId: string\n        entryPoint: (args: EntryPointArguments<T>) => unknown\n        args: T\n    }) {\n        const message = {\n            type: 'Execute',\n            data: {\n                taskId,\n                workerId: this.uid,\n                args,\n                entryPoint: `return ${String(entryPoint)}`,\n            },\n        }\n        this.worker.postMessage(message)\n    }\n\n    send({ taskId, data }: { taskId: string; data: unknown }) {\n        const messageToWorker = {\n            type: 'MainToWorkerMessage',\n            data: {\n                taskId,\n                workerId: this.uid,\n                data,\n            },\n        }\n        this.worker.postMessage(messageToWorker)\n    }\n\n    terminate() {\n        this.worker.terminate()\n    }\n}",
                "startLine": 78,
                "endLine": 129,
                "references": {
                    "WebWorkerBrowser": "@nav[webpm-client]/WorkersPoolModule.WebWorkerBrowser",
                    "WWorkerTrait.uid": "@nav[webpm-client]/WorkersPoolModule.WWorkerTrait.uid",
                    "EntryPointArguments": "@nav[webpm-client]/WorkersPoolModule.EntryPointArguments",
                    "WWorkerTrait.execute": "@nav[webpm-client]/WorkersPoolModule.WWorkerTrait.execute",
                    "WWorkerTrait.send": "@nav[webpm-client]/WorkersPoolModule.WWorkerTrait.send",
                    "WWorkerTrait.terminate": "@nav[webpm-client]/WorkersPoolModule.WWorkerTrait.terminate",
                    "WWorkerTrait": "@nav[webpm-client]/WorkersPoolModule.WWorkerTrait"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "WebWorkersBrowser",
            "documentation": {
                "sections": [
                    {
                        "content": "Implementation of  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.IWWorkerProxy\" semantic=\"interface\">IWWorkerProxy</mkapi-api-link>  for browser environment.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "WebWorkersBrowser",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.WebWorkersBrowser",
            "attributes": [],
            "callables": [
                {
                    "name": "createWorker",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Create a worker.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WebWorkersBrowser.createWorker",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WebWorkersBrowser.createWorker",
                    "code": {
                        "filePath": "src/lib/workers-pool/web-worker.proxy.ts",
                        "declaration": "createWorker({\n    onMessageWorker,\n    onMessageMain,\n}: {\n    onMessageWorker: (message) => unknown\n    onMessageMain: (message) => unknown\n})",
                        "implementation": "createWorker({\n    onMessageWorker,\n    onMessageMain,\n}: {\n    onMessageWorker: (message) => unknown\n    onMessageMain: (message) => unknown\n}) {\n    const blob = new Blob(\n        ['self.onmessage = ', onMessageWorker.toString()],\n        {\n            type: 'text/javascript',\n        },\n    )\n    const url = URL.createObjectURL(blob)\n    const worker = new Worker(url)\n\n    worker.onmessage = onMessageMain\n    return new WebWorkerBrowser({\n        uid: `w${String(Math.floor(Math.random() * Math.pow(10, 6)))}`,\n        worker,\n    })\n}",
                        "startLine": 135,
                        "endLine": 157,
                        "references": {
                            "createWorker": "@nav[webpm-client]/WorkersPoolModule.WebWorkersBrowser.createWorker",
                            "WebWorkerBrowser": "@nav[webpm-client]/WorkersPoolModule.WebWorkerBrowser"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "serializeFunction",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Serialize a given function as string.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **fct**: Function to serialize",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Returns",
                                "content": "Implementation",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "returns",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WebWorkersBrowser.serializeFunction",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WebWorkersBrowser.serializeFunction",
                    "code": {
                        "filePath": "src/lib/workers-pool/web-worker.proxy.ts",
                        "declaration": "serializeFunction(fct?: (...unknown) => unknown): string",
                        "implementation": "serializeFunction(fct?: (...unknown) => unknown): string {\n    return `return ${String(fct)}`\n}",
                        "startLine": 164,
                        "endLine": 167,
                        "references": {
                            "serializeFunction": "@nav[webpm-client]/WorkersPoolModule.WebWorkersBrowser.serializeFunction"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/workers-pool/web-worker.proxy.ts",
                "declaration": "export class WebWorkersBrowser implements IWWorkerProxy",
                "implementation": "export class WebWorkersBrowser implements IWWorkerProxy {\n    type = 'WebWorkersBrowser'\n    createWorker({\n        onMessageWorker,\n        onMessageMain,\n    }: {\n        onMessageWorker: (message) => unknown\n        onMessageMain: (message) => unknown\n    }) {\n        const blob = new Blob(\n            ['self.onmessage = ', onMessageWorker.toString()],\n            {\n                type: 'text/javascript',\n            },\n        )\n        const url = URL.createObjectURL(blob)\n        const worker = new Worker(url)\n\n        worker.onmessage = onMessageMain\n        return new WebWorkerBrowser({\n            uid: `w${String(Math.floor(Math.random() * Math.pow(10, 6)))}`,\n            worker,\n        })\n    }\n\n    /**\n     * Serialize a given function as string.\n     *\n     * @param fct Function to serialize\n     * @returns Implementation\n     */\n    serializeFunction(fct?: (...unknown) => unknown): string {\n        return `return ${String(fct)}`\n    }\n}",
                "startLine": 133,
                "endLine": 168,
                "references": {
                    "WebWorkersBrowser": "@nav[webpm-client]/WorkersPoolModule.WebWorkersBrowser",
                    "IWWorkerProxy.type": "@nav[webpm-client]/WorkersPoolModule.IWWorkerProxy.type",
                    "WebWorkerBrowser": "@nav[webpm-client]/WorkersPoolModule.WebWorkerBrowser",
                    "IWWorkerProxy.createWorker": "@nav[webpm-client]/WorkersPoolModule.IWWorkerProxy.createWorker",
                    "IWWorkerProxy.serializeFunction": "@nav[webpm-client]/WorkersPoolModule.IWWorkerProxy.serializeFunction",
                    "IWWorkerProxy": "@nav[webpm-client]/WorkersPoolModule.IWWorkerProxy"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "WorkersPool",
            "documentation": {
                "sections": [
                    {
                        "content": "Entry point to create workers pool.\n\nIt is constructed using  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.WorkersPool.constructor\" semantic=\"constructor\">WorkersPool.constructor</mkapi-api-link> , then task scheduling is achieved using\n <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.WorkersPool.schedule\" semantic=\"method\">WorkersPool.schedule</mkapi-api-link> .\n\nThe Workers Pool Module efficiently manages Web Workers by dynamically allocating and scheduling tasks based\non availability and resource constraints.\n\n**Task Scheduling:**\n\n*  When a task is submitted, the pool checks for **available workers**.\n*  If a worker is **idle**, it immediately picks up the task.\n\n**Worker Allocation:**\n\n*  If no workers are available but the pool has **not reached its maximum limit**, a new worker is created\n   to handle the task.\n*  If the pool has already **stretched to its maximum capacity**, the task is queued until a worker becomes\n   available.\n\n**Execution & Cleanup:**\n\n*  Once a worker completes a task, it is **either reused** for the next pending task or **remains idle**\n   until needed.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "WorkersPool",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPool",
            "attributes": [
                {
                    "name": "backgroundContext",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "If  `CtxFactory`  is provided in constructor's argument ( <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.WorkersPoolInput\" semantic=\"interface\">WorkersPoolInput</mkapi-api-link> ),\nmain thread logging information is available here.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPool.backgroundContext",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.backgroundContext",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "public readonly backgroundContext: ContextTrait | undefined",
                        "implementation": "",
                        "startLine": 935,
                        "endLine": 936,
                        "references": {
                            "backgroundContext": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.backgroundContext",
                            "ContextTrait": "@nav[webpm-client]/WorkersPoolModule.ContextTrait"
                        }
                    }
                },
                {
                    "name": "busyWorkers$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observable that emits the id of workers that are currently running a tasks each time a task is started\nor stopped.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPool.busyWorkers$",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.busyWorkers$",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "public readonly busyWorkers$ = new BehaviorSubject<string[]>([])",
                        "implementation": "",
                        "startLine": 920,
                        "endLine": 921,
                        "references": {
                            "busyWorkers$": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.busyWorkers$",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "cdnEvent$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observable that gathers all the  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.CdnEventWorker\" semantic=\"type-alias\">CdnEventWorker</mkapi-api-link>  emitted by the workers.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPool.cdnEvent$",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.cdnEvent$",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "public readonly cdnEvent$: Subject<CdnEventWorker>",
                        "implementation": "",
                        "startLine": 942,
                        "endLine": 943,
                        "references": {
                            "cdnEvent$": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.cdnEvent$",
                            "CdnEventWorker": "@nav[webpm-client]/WorkersPoolModule.CdnEventWorker",
                            "Subject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "environment",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Workers' environment.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPool.environment",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.environment",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "public readonly environment: WorkerEnvironment",
                        "implementation": "",
                        "startLine": 949,
                        "endLine": 950,
                        "references": {
                            "environment": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.environment",
                            "WorkerEnvironment": "@nav[webpm-client]/WorkersPoolModule.WorkerEnvironment"
                        }
                    }
                },
                {
                    "name": "mergedChannel$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "All the  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.Message\" semantic=\"type-alias\">messages </mkapi-api-link>  from all workers.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPool.mergedChannel$",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.mergedChannel$",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "public readonly mergedChannel$ = new Subject<Message>()",
                        "implementation": "",
                        "startLine": 882,
                        "endLine": 883,
                        "references": {
                            "mergedChannel$": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.mergedChannel$",
                            "Message": "@nav[webpm-client]/WorkersPoolModule.Message",
                            "Subject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "pool",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Constraints on workers' pool size.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPool.pool",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.pool",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "public readonly pool: PoolSize",
                        "implementation": "",
                        "startLine": 873,
                        "endLine": 874,
                        "references": {
                            "pool": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.pool",
                            "PoolSize": "@nav[webpm-client]/WorkersPoolModule.PoolSize"
                        }
                    }
                },
                {
                    "name": "runningTasks$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observable that emit the list of running tasks each time one or more are created or stopped.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPool.runningTasks$",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.runningTasks$",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "public readonly runningTasks$ = new BehaviorSubject<\n        { workerId: string; taskId: string; title: string }[]\n    >([])",
                        "implementation": "",
                        "startLine": 911,
                        "endLine": 912,
                        "references": {
                            "runningTasks$": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.runningTasks$",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "startedWorkers$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observable that emit the list of started workers as soon as one or more is starting creation.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPool.startedWorkers$",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.startedWorkers$",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "public readonly startedWorkers$ = new BehaviorSubject<string[]>([])",
                        "implementation": "",
                        "startLine": 888,
                        "endLine": 889,
                        "references": {
                            "startedWorkers$": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.startedWorkers$",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "workerReleased$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observable that emits  `{taskId, workerId}`  each time a worker finished processing a task.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPool.workerReleased$",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.workerReleased$",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "public readonly workerReleased$ = new Subject<{\n        workerId: WorkerId\n        taskId: string\n    }>()",
                        "implementation": "",
                        "startLine": 926,
                        "endLine": 927,
                        "references": {
                            "workerReleased$": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.workerReleased$",
                            "Subject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "workers$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Observable that emit a dictionary  `workerId -> {worker, channel$}`  each time new workers\nare ready to be used (installation & post-install tasks achieved).\n\nThe  `channel$`  object is streaming all associated worker's  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.Message\" semantic=\"type-alias\">Message</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPool.workers$",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.workers$",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "public readonly workers$ = new BehaviorSubject<\n        Record<\n            string,\n            {\n                worker: WWorkerTrait\n                channel$: Observable<Message>\n            }\n        >\n    >({})",
                        "implementation": "",
                        "startLine": 897,
                        "endLine": 898,
                        "references": {
                            "workers$": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.workers$",
                            "Message": "@nav[webpm-client]/WorkersPoolModule.Message",
                            "WWorkerTrait": "@nav[webpm-client]/WorkersPoolModule.WWorkerTrait",
                            "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Create an instance of worker pool.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **params**: Environment setup.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPool.constructor",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.constructor",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "constructor(params: WorkersPoolInput)",
                        "implementation": "constructor(params: WorkersPoolInput) {\n    this.backgroundContext = params.ctxFactory?.('background management')\n    this.cdnEvent$ = params.cdnEvent$ ?? new Subject<CdnEventWorker>()\n    // Need to manage lifecycle of following subscription\n    this.workerReleased$.subscribe(({ workerId, taskId }) => {\n        this.busyWorkers$.next(\n            this.busyWorkers$.value.filter((wId) => wId !== workerId),\n        )\n        this.runningTasks$.next(\n            this.runningTasks$.value.filter(\n                (task) => task.taskId !== taskId,\n            ),\n        )\n\n        this.pickTask(workerId, this.backgroundContext)\n    })\n    const installArgs = params.install ?? {}\n    this.environment = {\n        variables: Object.entries(params.globals ?? {})\n            .filter(([, value]) => typeof value != 'function')\n            .map(([id, value]) => ({\n                id,\n                value,\n            })),\n        functions: Object.entries(params.globals ?? {})\n            .filter(([, value]) => typeof value == 'function')\n            .map(([id, target]) => ({\n                id,\n                target,\n            })),\n        cdnInstallation: installArgs,\n        postInstallTasks: params.postInstallTasks ?? [],\n    }\n    this.pool = {\n        startAt: params.pool?.startAt ?? 0,\n        stretchTo:\n            params.pool?.stretchTo ??\n            Math.max(1, navigator.hardwareConcurrency - 1),\n    }\n    this.reserve({ workersCount: this.pool.startAt }).subscribe()\n}",
                        "startLine": 965,
                        "endLine": 1006,
                        "references": {
                            "WorkersPool": "@nav[webpm-client]/WorkersPoolModule.WorkersPool",
                            "WorkersPoolInput": "@nav[webpm-client]/WorkersPoolModule.WorkersPoolInput"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "getWebWorkersProxy",
                    "documentation": {
                        "sections": [
                            {
                                "content": "",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Returns",
                                "content": "The Web Workers proxy ( <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.WebWorkersBrowser\" semantic=\"class\">WebWorkersBrowser</mkapi-api-link>  in real usage).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "returns",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPool.getWebWorkersProxy",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.getWebWorkersProxy",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "getWebWorkersProxy(): IWWorkerProxy",
                        "implementation": "getWebWorkersProxy(): IWWorkerProxy {\n    return WorkersPool.webWorkersProxy\n}",
                        "startLine": 1165,
                        "endLine": 1168,
                        "references": {
                            "getWebWorkersProxy": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.getWebWorkersProxy",
                            "IWWorkerProxy": "@nav[webpm-client]/WorkersPoolModule.IWWorkerProxy"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "ready",
                    "documentation": {
                        "sections": [
                            {
                                "content": "When this method is awaited, it ensures that  `pool.startAt`  workers are ready to be used\n(installation & post-install tasks achieved).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPool.ready",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.ready",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "async ready(): Promise<void>",
                        "implementation": "async ready(): Promise<void> {\n    if (Object.entries(this.workers$.value).length >= this.pool.startAt) {\n        return\n    }\n    return new Promise<void>((resolve) => {\n        this.workers$\n            .pipe(\n                takeWhile(\n                    (workers) =>\n                        Object.entries(workers).length < this.pool.startAt,\n                ),\n                last(),\n            )\n            .subscribe(() => {\n                resolve()\n            })\n    })\n}",
                        "startLine": 1028,
                        "endLine": 1046,
                        "references": {
                            "ready": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.ready"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "reserve",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Reserve a particular amount of worker.\nNo workers are deleted, and the number of worker can not exceed  `pool.stretchTo`  property.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPool.reserve",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.reserve",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "reserve({ workersCount }: { workersCount: number })",
                        "implementation": "reserve({ workersCount }: { workersCount: number }) {\n    return forkJoin(\n        new Array(workersCount)\n            .fill(undefined)\n            .map(() =>\n                this.createWorker$(this.backgroundContext).pipe(\n                    map(({ channel$ }) => channel$),\n                ),\n            ),\n    )\n}",
                        "startLine": 1012,
                        "endLine": 1023,
                        "references": {
                            "reserve": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.reserve",
                            "Message": "@nav[webpm-client]/WorkersPoolModule.Message",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "schedule",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Schedule a task.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **input**: task description\n*  **context**: context to log run-time info",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Generics",
                                "content": "\n*  **TArgs**: type of the entry point's argument",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Returns",
                                "content": "Observable on the  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.Message\" semantic=\"type-alias\">Message</mkapi-api-link>  emitted during task execution. In any case, the last message sent is\n <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.MessageExit\" semantic=\"type-alias\">MessageExit</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "returns",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPool.schedule",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.schedule",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "schedule<TArgs = unknown>(\n    input: ScheduleInput<TArgs>,\n    context = new NoContext(),\n): Observable<Message>",
                        "implementation": "schedule<TArgs = unknown>(\n    input: ScheduleInput<TArgs>,\n    context = new NoContext(),\n): Observable<Message> {\n    const { title, entryPoint, args, targetWorkerId } = input\n    return context.withChild('schedule', (ctx) => {\n        const taskId = `t${String(Math.floor(Math.random() * Math.pow(10, 6)))}`\n        const p = new Process({\n            taskId,\n            title,\n            context: ctx,\n        })\n        const taskChannel$ = this.getTaskChannel$(p, taskId, ctx)\n\n        if (targetWorkerId && !(targetWorkerId in this.workers$.value)) {\n            throw Error('Provided workerId not known')\n        }\n        if (targetWorkerId && targetWorkerId in this.workers$.value) {\n            ctx.info('Target worker already created, enqueue task')\n            p.schedule()\n            this.tasksQueue.push({\n                entryPoint,\n                args,\n                taskId,\n                title,\n                channel$: taskChannel$,\n                targetWorkerId,\n            })\n\n            if (!this.busyWorkers$.value.includes(targetWorkerId)) {\n                ctx.info('Target worker IDLE, pick task')\n                this.pickTask(targetWorkerId, ctx)\n            }\n\n            return taskChannel$\n        }\n        const worker$ = this.getIdleWorkerOrCreate$(ctx)\n        if (!worker$) {\n            ctx.info('No worker available & max worker count reached')\n            p.schedule()\n            this.tasksQueue.push({\n                entryPoint,\n                args,\n                taskId,\n                title,\n                channel$: taskChannel$,\n            })\n            return taskChannel$\n        }\n        worker$\n            .pipe(\n                map(({ workerId }) => {\n                    ctx.info(`Got a worker ready ${workerId}`)\n                    p.schedule()\n                    this.tasksQueue.push({\n                        entryPoint,\n                        args,\n                        taskId,\n                        title,\n                        channel$: taskChannel$,\n                    })\n                    this.pickTask(workerId, ctx)\n                    return workerId\n                }),\n            )\n            .subscribe()\n\n        return taskChannel$\n    })\n}",
                        "startLine": 1056,
                        "endLine": 1126,
                        "references": {
                            "schedule": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.schedule",
                            "ScheduleInput": "@nav[webpm-client]/WorkersPoolModule.ScheduleInput",
                            "NoContext": "@nav[webpm-client]/WorkersPoolModule.NoContext",
                            "Message": "@nav[webpm-client]/WorkersPoolModule.Message",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "sendData",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Send a message from main thread to the worker processing a target task.\nThe function running in the worker has to instrument the received  `context` \nargument in order to process the messages.\nE.g.\n ```\nasync function functionInWorker({\n    args,\n    workerScope,\n    workerId,\n    taskId,\n    context,\n}){\n    context.onData = (args) => {\n        console.log('Received data from main thread', args)\n    }\n}\n```",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **data**: Data to send, should be valid regarding the\n[structured clone algo](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm).\n*  **taskId**: Target taskId.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPool.sendData",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.sendData",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "sendData({ taskId, data }: { taskId: string; data: unknown })",
                        "implementation": "sendData({ taskId, data }: { taskId: string; data: unknown }) {\n    const runningTask = this.runningTasks$.value.find(\n        (t) => t.taskId === taskId,\n    )\n    if (!runningTask) {\n        console.error(`WorkersPool.sendMessage: no task #${taskId} running`)\n        return\n    }\n    const worker = this.workers$.value[runningTask.workerId].worker\n    worker.send({ taskId, data })\n}",
                        "startLine": 1150,
                        "endLine": 1161,
                        "references": {
                            "sendData": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.sendData"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "terminate",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Terminate all the workers.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPool.terminate",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.terminate",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "terminate()",
                        "implementation": "terminate() {\n    Object.values(this.workers$.value).forEach(({ worker }) => {\n        worker.terminate()\n    })\n    this.startedWorkers$.next([])\n    this.workers$.next({})\n}",
                        "startLine": 1432,
                        "endLine": 1439,
                        "references": {
                            "terminate": "@nav[webpm-client]/WorkersPoolModule.WorkersPool.terminate"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export class WorkersPool",
                "implementation": "export class WorkersPool {\n    static backendsPartitionId: string\n    static BackendConfiguration: BackendConfiguration\n    static FrontendConfiguration: FrontendConfiguration = {}\n    static webWorkersProxy: IWWorkerProxy = new WebWorkersBrowser()\n\n    /**\n     * Constraints on workers' pool size.\n     * @group Immutable Constants\n     */\n    public readonly pool: PoolSize\n\n    private requestedWorkersCount = 0\n\n    /**\n     * All the {@link Message | messages } from all workers.\n     *\n     * @group Observables\n     */\n    public readonly mergedChannel$ = new Subject<Message>()\n    /**\n     * Observable that emit the list of started workers as soon as one or more is starting creation.\n     *\n     * @group Observables\n     */\n    public readonly startedWorkers$ = new BehaviorSubject<string[]>([])\n    /**\n     * Observable that emit a dictionary `workerId -> {worker, channel$}` each time new workers\n     * are ready to be used (installation & post-install tasks achieved).\n     *\n     * The `channel$` object is streaming all associated worker's {@link Message}.\n     *\n     * @group Observables\n     */\n    public readonly workers$ = new BehaviorSubject<\n        Record<\n            string,\n            {\n                worker: WWorkerTrait\n                channel$: Observable<Message>\n            }\n        >\n    >({})\n    /**\n     * Observable that emit the list of running tasks each time one or more are created or stopped.\n     *\n     * @group Observables\n     */\n    public readonly runningTasks$ = new BehaviorSubject<\n        { workerId: string; taskId: string; title: string }[]\n    >([])\n    /**\n     * Observable that emits the id of workers that are currently running a tasks each time a task is started\n     * or stopped.\n     *\n     * @group Observables\n     */\n    public readonly busyWorkers$ = new BehaviorSubject<string[]>([])\n    /**\n     * Observable that emits `{taskId, workerId}` each time a worker finished processing a task.\n     *\n     * @group Observables\n     */\n    public readonly workerReleased$ = new Subject<{\n        workerId: WorkerId\n        taskId: string\n    }>()\n\n    /**\n     * If `CtxFactory` is provided in constructor's argument ({@link WorkersPoolInput}),\n     * main thread logging information is available here.\n     */\n    public readonly backgroundContext: ContextTrait | undefined\n\n    /**\n     * Observable that gathers all the {@link CdnEventWorker} emitted by the workers.\n     *\n     * @group Observables\n     */\n    public readonly cdnEvent$: Subject<CdnEventWorker>\n\n    /**\n     * Workers' environment.\n     *\n     * @group Immutable Constants\n     */\n    public readonly environment: WorkerEnvironment\n\n    private tasksQueue: {\n        taskId: string\n        title: string\n        targetWorkerId?: string\n        args: unknown\n        channel$: Observable<Message>\n        entryPoint: (d: EntryPointArguments<unknown>) => unknown\n    }[] = []\n\n    /**\n     * Create an instance of worker pool.\n     *\n     * @param params Environment setup.\n     */\n    constructor(params: WorkersPoolInput) {\n        this.backgroundContext = params.ctxFactory?.('background management')\n        this.cdnEvent$ = params.cdnEvent$ ?? new Subject<CdnEventWorker>()\n        // Need to manage lifecycle of following subscription\n        this.workerReleased$.subscribe(({ workerId, taskId }) => {\n            this.busyWorkers$.next(\n                this.busyWorkers$.value.filter((wId) => wId !== workerId),\n            )\n            this.runningTasks$.next(\n                this.runningTasks$.value.filter(\n                    (task) => task.taskId !== taskId,\n                ),\n            )\n\n            this.pickTask(workerId, this.backgroundContext)\n        })\n        const installArgs = params.install ?? {}\n        this.environment = {\n            variables: Object.entries(params.globals ?? {})\n                .filter(([, value]) => typeof value != 'function')\n                .map(([id, value]) => ({\n                    id,\n                    value,\n                })),\n            functions: Object.entries(params.globals ?? {})\n                .filter(([, value]) => typeof value == 'function')\n                .map(([id, target]) => ({\n                    id,\n                    target,\n                })),\n            cdnInstallation: installArgs,\n            postInstallTasks: params.postInstallTasks ?? [],\n        }\n        this.pool = {\n            startAt: params.pool?.startAt ?? 0,\n            stretchTo:\n                params.pool?.stretchTo ??\n                Math.max(1, navigator.hardwareConcurrency - 1),\n        }\n        this.reserve({ workersCount: this.pool.startAt }).subscribe()\n    }\n\n    /**\n     * Reserve a particular amount of worker.\n     * No workers are deleted, and the number of worker can not exceed `pool.stretchTo` property.\n     * @param workersCount\n     */\n    reserve({ workersCount }: { workersCount: number }) {\n        return forkJoin(\n            new Array(workersCount)\n                .fill(undefined)\n                .map(() =>\n                    this.createWorker$(this.backgroundContext).pipe(\n                        map(({ channel$ }) => channel$),\n                    ),\n                ),\n        )\n    }\n\n    /**\n     * When this method is awaited, it ensures that `pool.startAt` workers are ready to be used\n     * (installation & post-install tasks achieved).\n     */\n    async ready(): Promise<void> {\n        if (Object.entries(this.workers$.value).length >= this.pool.startAt) {\n            return\n        }\n        return new Promise<void>((resolve) => {\n            this.workers$\n                .pipe(\n                    takeWhile(\n                        (workers) =>\n                            Object.entries(workers).length < this.pool.startAt,\n                    ),\n                    last(),\n                )\n                .subscribe(() => {\n                    resolve()\n                })\n        })\n    }\n\n    /**\n     * Schedule a task.\n     *\n     * @param input task description\n     * @param context context to log run-time info\n     * @returns Observable on the {@link Message} emitted during task execution. In any case, the last message sent is\n     * {@link MessageExit}.\n     * @typeParam TArgs type of the entry point's argument\n     */\n    schedule<TArgs = unknown>(\n        input: ScheduleInput<TArgs>,\n        context = new NoContext(),\n    ): Observable<Message> {\n        const { title, entryPoint, args, targetWorkerId } = input\n        return context.withChild('schedule', (ctx) => {\n            const taskId = `t${String(Math.floor(Math.random() * Math.pow(10, 6)))}`\n            const p = new Process({\n                taskId,\n                title,\n                context: ctx,\n            })\n            const taskChannel$ = this.getTaskChannel$(p, taskId, ctx)\n\n            if (targetWorkerId && !(targetWorkerId in this.workers$.value)) {\n                throw Error('Provided workerId not known')\n            }\n            if (targetWorkerId && targetWorkerId in this.workers$.value) {\n                ctx.info('Target worker already created, enqueue task')\n                p.schedule()\n                this.tasksQueue.push({\n                    entryPoint,\n                    args,\n                    taskId,\n                    title,\n                    channel$: taskChannel$,\n                    targetWorkerId,\n                })\n\n                if (!this.busyWorkers$.value.includes(targetWorkerId)) {\n                    ctx.info('Target worker IDLE, pick task')\n                    this.pickTask(targetWorkerId, ctx)\n                }\n\n                return taskChannel$\n            }\n            const worker$ = this.getIdleWorkerOrCreate$(ctx)\n            if (!worker$) {\n                ctx.info('No worker available & max worker count reached')\n                p.schedule()\n                this.tasksQueue.push({\n                    entryPoint,\n                    args,\n                    taskId,\n                    title,\n                    channel$: taskChannel$,\n                })\n                return taskChannel$\n            }\n            worker$\n                .pipe(\n                    map(({ workerId }) => {\n                        ctx.info(`Got a worker ready ${workerId}`)\n                        p.schedule()\n                        this.tasksQueue.push({\n                            entryPoint,\n                            args,\n                            taskId,\n                            title,\n                            channel$: taskChannel$,\n                        })\n                        this.pickTask(workerId, ctx)\n                        return workerId\n                    }),\n                )\n                .subscribe()\n\n            return taskChannel$\n        })\n    }\n\n    /**\n     * Send a message from main thread to the worker processing a target task.\n     * The function running in the worker has to instrument the received `context`\n     * argument in order to process the messages.\n     * E.g.\n     * ```\n     * async function functionInWorker({\n     *     args,\n     *     workerScope,\n     *     workerId,\n     *     taskId,\n     *     context,\n     * }){\n     *     context.onData = (args) => {\n     *         console.log('Received data from main thread', args)\n     *     }\n     * }\n     * ```\n     * @param _p\n     * @param _p.taskId Target taskId.\n     * @param _p.data Data to send, should be valid regarding the\n     * [structured clone algo](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm).\n     */\n    sendData({ taskId, data }: { taskId: string; data: unknown }) {\n        const runningTask = this.runningTasks$.value.find(\n            (t) => t.taskId === taskId,\n        )\n        if (!runningTask) {\n            console.error(`WorkersPool.sendMessage: no task #${taskId} running`)\n            return\n        }\n        const worker = this.workers$.value[runningTask.workerId].worker\n        worker.send({ taskId, data })\n    }\n\n    /**\n     * @returns The Web Workers proxy ({@link WebWorkersBrowser} in real usage).\n     */\n    getWebWorkersProxy(): IWWorkerProxy {\n        return WorkersPool.webWorkersProxy\n    }\n\n    private getTaskChannel$(\n        exposedProcess: Process,\n        taskId: string,\n        context: ContextTrait = new NoContext(),\n    ): Observable<Message> {\n        return context.withChild('getTaskChannel$', (ctx) => {\n            const channel$ = this.mergedChannel$.pipe(\n                filter((message) => message.data.taskId === taskId),\n                takeWhile((message) => message.type !== 'Exit', true),\n            )\n\n            channel$\n                .pipe(\n                    filter((message) => message.type === 'Start'),\n                    take(1),\n                )\n                .subscribe((message) => {\n                    ctx.info(`worker started on task ${taskId}`, message)\n                    exposedProcess.start()\n                })\n\n            channel$\n                .pipe(\n                    filter((message) => message.type === 'Exit'),\n                    take(1),\n                )\n                .subscribe((message) => {\n                    const data = message.data as unknown as MessageExit\n                    if (data.error) {\n                        ctx.info(\n                            `worker exited abnormally on task ${taskId}`,\n                            message,\n                        )\n                        exposedProcess.fail(data.result)\n                        return\n                    }\n                    exposedProcess.succeed()\n                    ctx.info(\n                        `worker exited normally on task ${taskId}`,\n                        message,\n                    )\n                })\n            channel$\n                .pipe(filter((message) => message.type === 'Log'))\n                .subscribe((message) => {\n                    const data = message.data as unknown as MessageLog\n                    exposedProcess.log(data.text)\n                    ctx.info(data.text, data.json)\n                })\n\n            return channel$\n        })\n    }\n\n    private getIdleWorkerOrCreate$(context: ContextTrait = new NoContext()):\n        | Observable<{\n              workerId: string\n              worker: WWorkerTrait\n              channel$: Observable<Message>\n          }>\n        | undefined {\n        return context.withChild('getIdleWorkerOrCreate$', (ctx) => {\n            const idleWorkerId = Object.keys(this.workers$.value).find(\n                (workerId) => !this.busyWorkers$.value.includes(workerId),\n            )\n\n            if (idleWorkerId) {\n                ctx.info(`return idle worker ${idleWorkerId}`)\n                return of({\n                    workerId: idleWorkerId,\n                    worker: this.workers$.value[idleWorkerId].worker,\n                    channel$: this.workers$.value[idleWorkerId].channel$,\n                })\n            }\n            if (this.requestedWorkersCount < this.pool.stretchTo) {\n                return this.createWorker$(ctx)\n            }\n            return undefined\n        }) as\n            | Observable<{\n                  workerId: string\n                  worker: WWorkerTrait\n                  channel$: Observable<Message>\n              }>\n            | undefined\n    }\n\n    private createWorker$(context: ContextTrait = new NoContext()): Observable<{\n        workerId: string\n        worker: WWorkerTrait\n        channel$: Observable<Message>\n    }> {\n        return context.withChild('createWorker$', (ctx) => {\n            this.requestedWorkersCount++\n            const workerChannel$ = new Subject<Message>()\n\n            const workerProxy = WorkersPool.webWorkersProxy.createWorker({\n                onMessageWorker: entryPointWorker,\n                onMessageMain: ({ data }: { data: Message }) => {\n                    workerChannel$.next(data)\n                    this.mergedChannel$.next(data)\n                },\n            })\n            const workerId = workerProxy.uid\n            ctx.info(`New raw worker ${workerId} created`)\n            this.startedWorkers$.next([...this.startedWorkers$.value, workerId])\n            const taskId = `t${String(Math.floor(Math.random() * Math.pow(10, 6)))}`\n            const title = 'Install environment'\n            const p = new Process({\n                taskId,\n                title,\n                context: ctx,\n            })\n            const taskChannel$ = this.getTaskChannel$(p, taskId, context)\n            const cdnPackage = pkgJson.name\n            const webpmClientUrl = `${\n                WorkersPool.BackendConfiguration.urlResource\n            }/${getAssetId(cdnPackage)}/${pkgJson.version}/dist/${cdnPackage}.js`\n\n            const proxy = WorkersPool.webWorkersProxy\n            const staticOnBefore = proxy.onBeforeWorkerInstall\n            const staticOnAfter = proxy.onAfterWorkerInstall\n            const argsInstall: MessageInstall = {\n                backendsPartitionId: WorkersPool.backendsPartitionId,\n                backendConfiguration: WorkersPool.BackendConfiguration,\n                frontendConfiguration: WorkersPool.FrontendConfiguration,\n                webpmClientUrl,\n                variables: this.environment.variables,\n                functions: this.environment.functions.map(\n                    ({\n                        id,\n                        target,\n                    }: {\n                        id: string\n                        target: (...unknown: unknown[]) => unknown\n                    }) => ({\n                        id,\n                        target: proxy.serializeFunction(target),\n                    }),\n                ),\n                cdnInstallation: this.environment.cdnInstallation,\n                postInstallTasks: (this.environment.postInstallTasks ?? []).map(\n                    (task) => {\n                        return {\n                            title: task.title,\n                            args: task.args,\n                            entryPoint: proxy.serializeFunction(\n                                task.entryPoint,\n                            ),\n                        }\n                    },\n                ),\n                onBeforeInstall:\n                    staticOnBefore && proxy.serializeFunction(staticOnBefore),\n                onAfterInstall:\n                    staticOnAfter && proxy.serializeFunction(staticOnAfter),\n            }\n\n            p.schedule()\n            workerProxy.execute({\n                taskId,\n                entryPoint: entryPointInstall,\n                args: argsInstall,\n            })\n\n            return workerChannel$.pipe(\n                tap((message: Message) => {\n                    const cdnEvent = isCdnEventMessage(message)\n                    if (cdnEvent) {\n                        this.cdnEvent$.next(cdnEvent)\n                    }\n                }),\n                filter((message) => message.type === 'Exit'),\n                take(1),\n                tap(() => {\n                    ctx.info(`New worker ready (${workerId}), pick task if any`)\n                    this.workers$.next({\n                        ...this.workers$.value,\n                        [workerId]: {\n                            worker: workerProxy,\n                            channel$: workerChannel$,\n                        },\n                    })\n                }),\n                map(() => ({\n                    workerId,\n                    worker: workerProxy,\n                    channel$: taskChannel$,\n                })),\n            )\n        })\n    }\n\n    /**\n     * Start a worker with first task in its queue\n     */\n    private pickTask(\n        workerId: string,\n        context: ContextTrait = new NoContext(),\n    ) {\n        context.withChild('pickTask', (ctx) => {\n            if (this.tasksQueue.length === 0) {\n                ctx.info(`No tasks in queue`)\n                return\n            }\n            if (\n                this.tasksQueue.filter(\n                    (task) =>\n                        task.targetWorkerId === undefined ||\n                        task.targetWorkerId === workerId,\n                ).length === 0\n            ) {\n                ctx.info(\n                    `No tasks in queue match fo target worker (${workerId})`,\n                )\n                return\n            }\n\n            if (this.busyWorkers$.value.includes(workerId)) {\n                throw Error(\n                    `Can not pick task by ${workerId}: worker already busy. Please report a bug for @youwol/webpm-client.`,\n                )\n            }\n            this.busyWorkers$.next([...this.busyWorkers$.value, workerId])\n            const task = this.tasksQueue.find((t) =>\n                t.targetWorkerId ? t.targetWorkerId === workerId : true,\n            )\n            if (!task) {\n                ctx.info(\n                    `No tasks in queue match fo target worker (${workerId})`,\n                )\n                return\n            }\n            const { taskId, title, entryPoint, args, channel$ } = task\n            ctx.info(`Pick task ${taskId} by ${workerId}`)\n            this.tasksQueue = this.tasksQueue.filter((t) => t.taskId !== taskId)\n\n            this.runningTasks$.next([\n                ...this.runningTasks$.value,\n                { workerId, taskId, title },\n            ])\n            const worker = this.workers$.value[workerId].worker\n\n            channel$\n                .pipe(\n                    filter((message) => {\n                        return message.type === 'Exit'\n                    }),\n                )\n                .subscribe((message) => {\n                    const exitData = message.data as unknown as MessageExit\n                    this.workerReleased$.next({\n                        taskId: exitData.taskId,\n                        workerId,\n                    })\n                })\n            worker.execute({ taskId, entryPoint, args })\n        })\n    }\n\n    /**\n     * Terminate all the workers.\n     */\n    terminate() {\n        Object.values(this.workers$.value).forEach(({ worker }) => {\n            worker.terminate()\n        })\n        this.startedWorkers$.next([])\n        this.workers$.next({})\n    }\n}",
                "startLine": 863,
                "endLine": 1440,
                "references": {
                    "WorkersPool": "@nav[webpm-client]/WorkersPoolModule.WorkersPool",
                    "WorkersPoolInput": "@nav[webpm-client]/WorkersPoolModule.WorkersPoolInput",
                    "ContextTrait": "@nav[webpm-client]/WorkersPoolModule.ContextTrait",
                    "CdnEventWorker": "@nav[webpm-client]/WorkersPoolModule.CdnEventWorker",
                    "WorkerEnvironment": "@nav[webpm-client]/WorkersPoolModule.WorkerEnvironment",
                    "Message": "@nav[webpm-client]/WorkersPoolModule.Message",
                    "PoolSize": "@nav[webpm-client]/WorkersPoolModule.PoolSize",
                    "WWorkerTrait": "@nav[webpm-client]/WorkersPoolModule.WWorkerTrait",
                    "BackendConfiguration": "@nav[webpm-client]/MainModule.BackendConfiguration",
                    "FrontendConfiguration": "@nav[webpm-client]/MainModule.FrontendConfiguration",
                    "IWWorkerProxy": "@nav[webpm-client]/WorkersPoolModule.IWWorkerProxy",
                    "ScheduleInput": "@nav[webpm-client]/WorkersPoolModule.ScheduleInput",
                    "NoContext": "@nav[webpm-client]/WorkersPoolModule.NoContext",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "Subject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "Observable": "https://rxjs.dev/guide/observable"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ContextTrait",
            "documentation": {
                "sections": [
                    {
                        "content": "Interface specification for  `Context`  object.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ContextTrait",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.ContextTrait",
            "attributes": [
                {
                    "name": "withChild",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Append a child context, usually wrapping a function call.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ContextTrait.withChild",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.ContextTrait.withChild",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "withChild: <T>(name: string, cb: (ctx: ContextTrait) => T) => T",
                        "implementation": "",
                        "startLine": 42,
                        "endLine": 43,
                        "references": {
                            "withChild": "@nav[webpm-client]/WorkersPoolModule.ContextTrait.withChild",
                            "ContextTrait": "@nav[webpm-client]/WorkersPoolModule.ContextTrait"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export interface ContextTrait",
                "implementation": "export interface ContextTrait {\n    /**\n     * Append a child context, usually wrapping a function call.\n     *\n     * @param name Name (usually the function name).\n     * @param cb The callback triggering the action.\n     * @returns The callback's return\n     */\n    withChild: <T>(name: string, cb: (ctx: ContextTrait) => T) => T\n    info: (text: string, data?: unknown) => void\n}",
                "startLine": 34,
                "endLine": 45,
                "references": {
                    "ContextTrait": "@nav[webpm-client]/WorkersPoolModule.ContextTrait",
                    "NoContext": "@nav[webpm-client]/WorkersPoolModule.NoContext"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "EntryPointArguments",
            "documentation": {
                "sections": [
                    {
                        "content": "Encapsulates arguments to be sent to a task's entry point (implementation function).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "EntryPointArguments",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.EntryPointArguments",
            "attributes": [
                {
                    "name": "args",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The arguments with witch the entry point is called.\n\nShould follow the\n[structured clone algo](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EntryPointArguments.args",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.EntryPointArguments.args",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "args: TArgs",
                        "implementation": "",
                        "startLine": 363,
                        "endLine": 364,
                        "references": {
                            "args": "@nav[webpm-client]/WorkersPoolModule.EntryPointArguments.args"
                        }
                    }
                },
                {
                    "name": "context",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The context, used for logging or sending data back to the main thread.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EntryPointArguments.context",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.EntryPointArguments.context",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "context: WorkerContext",
                        "implementation": "",
                        "startLine": 375,
                        "endLine": 376,
                        "references": {
                            "context": "@nav[webpm-client]/WorkersPoolModule.EntryPointArguments.context",
                            "WorkerContext": "@nav[webpm-client]/WorkersPoolModule.WorkerContext"
                        }
                    }
                },
                {
                    "name": "taskId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The task ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EntryPointArguments.taskId",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.EntryPointArguments.taskId",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "taskId: string",
                        "implementation": "",
                        "startLine": 367,
                        "endLine": 368,
                        "references": {
                            "taskId": "@nav[webpm-client]/WorkersPoolModule.EntryPointArguments.taskId"
                        }
                    }
                },
                {
                    "name": "workerId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The worker ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EntryPointArguments.workerId",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.EntryPointArguments.workerId",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "workerId: string",
                        "implementation": "",
                        "startLine": 371,
                        "endLine": 372,
                        "references": {
                            "workerId": "@nav[webpm-client]/WorkersPoolModule.EntryPointArguments.workerId"
                        }
                    }
                },
                {
                    "name": "workerScope",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The worker scope.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EntryPointArguments.workerScope",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.EntryPointArguments.workerScope",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "workerScope: Record<string, unknown>",
                        "implementation": "",
                        "startLine": 379,
                        "endLine": 380,
                        "references": {
                            "workerScope": "@nav[webpm-client]/WorkersPoolModule.EntryPointArguments.workerScope"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export interface EntryPointArguments<TArgs>",
                "implementation": "export interface EntryPointArguments<TArgs> {\n    /**\n     * The arguments with witch the entry point is called.\n     *\n     * Should follow the\n     * [structured clone algo](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm).\n     */\n    args: TArgs\n    /**\n     * The task ID.\n     */\n    taskId: string\n    /**\n     * The worker ID.\n     */\n    workerId: string\n    /**\n     * The context, used for logging or sending data back to the main thread.\n     */\n    context: WorkerContext\n    /**\n     * The worker scope.\n     */\n    workerScope: Record<string, unknown>\n}",
                "startLine": 356,
                "endLine": 381,
                "references": {
                    "EntryPointArguments": "@nav[webpm-client]/WorkersPoolModule.EntryPointArguments",
                    "WorkerContext": "@nav[webpm-client]/WorkersPoolModule.WorkerContext"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "IWWorkerProxy",
            "documentation": {
                "sections": [
                    {
                        "content": "Proxy interface for Web Workers creation.\n\nThe default implementation used is the one provided by the browser ( <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.WebWorkersBrowser\" semantic=\"class\">WebWorkersBrowser</mkapi-api-link> ).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "IWWorkerProxy",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.IWWorkerProxy",
            "attributes": [
                {
                    "name": "onAfterWorkerInstall",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Optional action to trigger after installing environment in a worker.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "IWWorkerProxy.onAfterWorkerInstall",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.IWWorkerProxy.onAfterWorkerInstall",
                    "code": {
                        "filePath": "src/lib/workers-pool/web-worker.proxy.ts",
                        "declaration": "onAfterWorkerInstall?: InWorkerAction",
                        "implementation": "",
                        "startLine": 72,
                        "endLine": 73,
                        "references": {
                            "onAfterWorkerInstall": "@nav[webpm-client]/WorkersPoolModule.IWWorkerProxy.onAfterWorkerInstall",
                            "InWorkerAction": "@nav[webpm-client]/WorkersPoolModule.InWorkerAction"
                        }
                    }
                },
                {
                    "name": "onBeforeWorkerInstall",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Optional action to trigger before installing environment in a worker.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "IWWorkerProxy.onBeforeWorkerInstall",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.IWWorkerProxy.onBeforeWorkerInstall",
                    "code": {
                        "filePath": "src/lib/workers-pool/web-worker.proxy.ts",
                        "declaration": "onBeforeWorkerInstall?: InWorkerAction",
                        "implementation": "",
                        "startLine": 68,
                        "endLine": 69,
                        "references": {
                            "onBeforeWorkerInstall": "@nav[webpm-client]/WorkersPoolModule.IWWorkerProxy.onBeforeWorkerInstall",
                            "InWorkerAction": "@nav[webpm-client]/WorkersPoolModule.InWorkerAction"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "createWorker",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Create a worker.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "IWWorkerProxy.createWorker",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.IWWorkerProxy.createWorker",
                    "code": {
                        "filePath": "src/lib/workers-pool/web-worker.proxy.ts",
                        "declaration": "createWorker({\n        onMessageWorker,\n        onMessageMain,\n    }: {\n        onMessageWorker: (message) => unknown\n        onMessageMain: (message) => unknown\n    }): WWorkerTrait",
                        "implementation": "",
                        "startLine": 52,
                        "endLine": 53,
                        "references": {
                            "createWorker": "@nav[webpm-client]/WorkersPoolModule.IWWorkerProxy.createWorker",
                            "WWorkerTrait": "@nav[webpm-client]/WorkersPoolModule.WWorkerTrait"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "serializeFunction",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Prepare a function to be send in a worker.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "IWWorkerProxy.serializeFunction",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.IWWorkerProxy.serializeFunction",
                    "code": {
                        "filePath": "src/lib/workers-pool/web-worker.proxy.ts",
                        "declaration": "serializeFunction(fct?: (...unknown: unknown[]) => unknown): string",
                        "implementation": "",
                        "startLine": 63,
                        "endLine": 64,
                        "references": {
                            "serializeFunction": "@nav[webpm-client]/WorkersPoolModule.IWWorkerProxy.serializeFunction"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/workers-pool/web-worker.proxy.ts",
                "declaration": "export interface IWWorkerProxy",
                "implementation": "export interface IWWorkerProxy {\n    type: string\n\n    /**\n     * Create a worker.\n     */\n    createWorker({\n        onMessageWorker,\n        onMessageMain,\n    }: {\n        onMessageWorker: (message) => unknown\n        onMessageMain: (message) => unknown\n    }): WWorkerTrait\n\n    /**\n     * Prepare a function to be send in a worker.\n     */\n    serializeFunction(fct?: (...unknown: unknown[]) => unknown): string\n\n    /**\n     * Optional action to trigger before installing environment in a worker.\n     */\n    onBeforeWorkerInstall?: InWorkerAction\n    /**\n     * Optional action to trigger after installing environment in a worker.\n     */\n    onAfterWorkerInstall?: InWorkerAction\n}",
                "startLine": 46,
                "endLine": 74,
                "references": {
                    "IWWorkerProxy": "@nav[webpm-client]/WorkersPoolModule.IWWorkerProxy",
                    "InWorkerAction": "@nav[webpm-client]/WorkersPoolModule.InWorkerAction",
                    "WWorkerTrait": "@nav[webpm-client]/WorkersPoolModule.WWorkerTrait",
                    "WebWorkersBrowser": "@nav[webpm-client]/WorkersPoolModule.WebWorkersBrowser",
                    "WebWorkersJest": "@nav[webpm-client]/MainModule/TestUtilsTypes.WebWorkersJest"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "MainToWorkerMessage",
            "documentation": {
                "sections": [
                    {
                        "content": "Message send from the main thread to a worker for a particular task.\nSee  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.WorkersPool.sendData\" semantic=\"method\">WorkersPool.sendData</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "MainToWorkerMessage",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.MainToWorkerMessage",
            "attributes": [
                {
                    "name": "data",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Data forwarded",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MainToWorkerMessage.data",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.MainToWorkerMessage.data",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "data: unknown",
                        "implementation": "",
                        "startLine": 299,
                        "endLine": 300,
                        "references": {
                            "data": "@nav[webpm-client]/WorkersPoolModule.MainToWorkerMessage.data"
                        }
                    }
                },
                {
                    "name": "taskId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "ID of the task",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MainToWorkerMessage.taskId",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.MainToWorkerMessage.taskId",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "taskId: string",
                        "implementation": "",
                        "startLine": 289,
                        "endLine": 290,
                        "references": {
                            "taskId": "@nav[webpm-client]/WorkersPoolModule.MainToWorkerMessage.taskId"
                        }
                    }
                },
                {
                    "name": "workerId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "ID of the worker",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MainToWorkerMessage.workerId",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.MainToWorkerMessage.workerId",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "workerId: string",
                        "implementation": "",
                        "startLine": 294,
                        "endLine": 295,
                        "references": {
                            "workerId": "@nav[webpm-client]/WorkersPoolModule.MainToWorkerMessage.workerId"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export interface MainToWorkerMessage",
                "implementation": "export interface MainToWorkerMessage {\n    /**\n     * ID of the task\n     */\n    taskId: string\n\n    /**\n     * ID of the worker\n     */\n    workerId: string\n\n    /**\n     * Data forwarded\n     */\n    data: unknown\n}",
                "startLine": 285,
                "endLine": 301,
                "references": {
                    "MainToWorkerMessage": "@nav[webpm-client]/WorkersPoolModule.MainToWorkerMessage"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "MessageCdnEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "A special type of  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.MessageData\" semantic=\"interface\">MessageData</mkapi-api-link>  for  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.CdnEvent\" semantic=\"interface\">MainModule.CdnEvent</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "MessageCdnEvent",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.MessageCdnEvent",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export interface MessageCdnEvent",
                "implementation": "export interface MessageCdnEvent {\n    type: 'CdnEvent'\n    workerId: string\n    taskId: string\n    event: CdnEvent\n}",
                "startLine": 76,
                "endLine": 82,
                "references": {
                    "MessageCdnEvent": "@nav[webpm-client]/WorkersPoolModule.MessageCdnEvent",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "MessageContent",
            "documentation": {
                "sections": [
                    {
                        "content": "Type mapping between  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.MessageType\" semantic=\"type-alias\">MessageType</mkapi-api-link>  and associated data structure.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "MessageContent",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.MessageContent",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export interface MessageContent",
                "implementation": "export interface MessageContent {\n    Execute: MessageExecute\n    Exit: MessageExit\n    Start: MessageStart\n    Log: MessageLog\n    Data: MessageData\n    MainToWorkerMessage: MainToWorkerMessage\n    PostError: MessagePostError\n    CdnEvent: MessageCdnEvent\n}",
                "startLine": 318,
                "endLine": 328,
                "references": {
                    "MessageContent": "@nav[webpm-client]/WorkersPoolModule.MessageContent",
                    "MessageCdnEvent": "@nav[webpm-client]/WorkersPoolModule.MessageCdnEvent",
                    "MessageData": "@nav[webpm-client]/WorkersPoolModule.MessageData",
                    "MessageExecute": "@nav[webpm-client]/WorkersPoolModule.MessageExecute",
                    "MessageExit": "@nav[webpm-client]/WorkersPoolModule.MessageExit",
                    "MessageLog": "@nav[webpm-client]/WorkersPoolModule.MessageLog",
                    "MainToWorkerMessage": "@nav[webpm-client]/WorkersPoolModule.MainToWorkerMessage",
                    "MessagePostError": "@nav[webpm-client]/WorkersPoolModule.MessagePostError",
                    "MessageStart": "@nav[webpm-client]/WorkersPoolModule.MessageStart"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "MessageData",
            "documentation": {
                "sections": [
                    {
                        "content": "Message emitted from workers when a data is sent (see  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.WorkerContext\" semantic=\"interface\">WorkerContext</mkapi-api-link> ).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "MessageData",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.MessageData",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export interface MessageData",
                "implementation": "export interface MessageData {\n    taskId: string\n    workerId: string\n    [k: string]: unknown\n}",
                "startLine": 266,
                "endLine": 271,
                "references": {
                    "MessageData": "@nav[webpm-client]/WorkersPoolModule.MessageData"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "MessageExecute",
            "documentation": {
                "sections": [
                    {
                        "content": "Message send from the workers to the main thread when a task is started.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "MessageExecute",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.MessageExecute",
            "attributes": [
                {
                    "name": "args",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Arguments provided",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MessageExecute.args",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.MessageExecute.args",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "args: unknown",
                        "implementation": "",
                        "startLine": 213,
                        "endLine": 214,
                        "references": {
                            "args": "@nav[webpm-client]/WorkersPoolModule.MessageExecute.args"
                        }
                    }
                },
                {
                    "name": "entryPoint",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Serialized entry point",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MessageExecute.entryPoint",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.MessageExecute.entryPoint",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "entryPoint: string",
                        "implementation": "",
                        "startLine": 209,
                        "endLine": 210,
                        "references": {
                            "entryPoint": "@nav[webpm-client]/WorkersPoolModule.MessageExecute.entryPoint"
                        }
                    }
                },
                {
                    "name": "taskId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "ID of the task",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MessageExecute.taskId",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.MessageExecute.taskId",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "taskId: string",
                        "implementation": "",
                        "startLine": 201,
                        "endLine": 202,
                        "references": {
                            "taskId": "@nav[webpm-client]/WorkersPoolModule.MessageExecute.taskId"
                        }
                    }
                },
                {
                    "name": "workerId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "ID of the worker",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "MessageExecute.workerId",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.MessageExecute.workerId",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "workerId: string",
                        "implementation": "",
                        "startLine": 205,
                        "endLine": 206,
                        "references": {
                            "workerId": "@nav[webpm-client]/WorkersPoolModule.MessageExecute.workerId"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export interface MessageExecute",
                "implementation": "export interface MessageExecute {\n    /**\n     * ID of the task\n     */\n    taskId: string\n    /**\n     * ID of the worker\n     */\n    workerId: string\n    /**\n     * Serialized entry point\n     */\n    entryPoint: string\n    /**\n     * Arguments provided\n     */\n    args: unknown\n}",
                "startLine": 197,
                "endLine": 215,
                "references": {
                    "MessageExecute": "@nav[webpm-client]/WorkersPoolModule.MessageExecute"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "MessageInstall",
            "documentation": {
                "sections": [
                    {
                        "content": "Message sent from the main thread to the workers to request installation of the  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.WorkerEnvironment\" semantic=\"interface\">WorkerEnvironment</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "MessageInstall",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.MessageInstall",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export interface MessageInstall",
                "implementation": "export interface MessageInstall {\n    backendsPartitionId: string\n    backendConfiguration: BackendConfiguration\n    frontendConfiguration: FrontendConfiguration\n    webpmClientUrl: string\n    variables: WorkerVariable<unknown>[]\n    functions: { id: string; target: string }[]\n    cdnInstallation: InstallInputs\n    postInstallTasks: {\n        title: string\n        entryPoint: string\n        args: unknown\n    }[]\n    onBeforeInstall?: InWorkerAction | string\n    onAfterInstall?: InWorkerAction | string\n}",
                "startLine": 560,
                "endLine": 576,
                "references": {
                    "MessageInstall": "@nav[webpm-client]/WorkersPoolModule.MessageInstall",
                    "BackendConfiguration": "@nav[webpm-client]/MainModule.BackendConfiguration",
                    "InstallInputs": "@nav[webpm-client]/MainModule.InstallInputs",
                    "FrontendConfiguration": "@nav[webpm-client]/MainModule.FrontendConfiguration",
                    "InWorkerAction": "@nav[webpm-client]/WorkersPoolModule.InWorkerAction",
                    "WorkerVariable": "@nav[webpm-client]/WorkersPoolModule.WorkerVariable"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "MessageLog",
            "documentation": {
                "sections": [
                    {
                        "content": "Message emitted from workers when a log is sent (see  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.WorkerContext\" semantic=\"interface\">WorkerContext</mkapi-api-link> ).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "MessageLog",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.MessageLog",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export interface MessageLog",
                "implementation": "export interface MessageLog {\n    workerId: string\n    taskId: string\n    text: string\n    json: unknown // Json\n}",
                "startLine": 256,
                "endLine": 262,
                "references": {
                    "MessageLog": "@nav[webpm-client]/WorkersPoolModule.MessageLog"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "MessagePostError",
            "documentation": {
                "sections": [
                    {
                        "content": "Message emitted from workers when an error occurred.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "MessagePostError",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.MessagePostError",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export interface MessagePostError",
                "implementation": "export interface MessagePostError {\n    taskId: string\n    workerId: string\n    error: Error\n}",
                "startLine": 275,
                "endLine": 280,
                "references": {
                    "MessagePostError": "@nav[webpm-client]/WorkersPoolModule.MessagePostError"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "MessageStart",
            "documentation": {
                "sections": [
                    {
                        "content": "Message emitted from workers when a task is started.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "MessageStart",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.MessageStart",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export interface MessageStart",
                "implementation": "export interface MessageStart {\n    taskId: string\n    workerId: string\n}",
                "startLine": 219,
                "endLine": 223,
                "references": {
                    "MessageStart": "@nav[webpm-client]/WorkersPoolModule.MessageStart"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PoolSize",
            "documentation": {
                "sections": [
                    {
                        "content": "Pool size specification.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PoolSize",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.PoolSize",
            "attributes": [
                {
                    "name": "startAt",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initial number of workers to get ready before  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.WorkersPool.ready\" semantic=\"method\">WorkersPool.ready</mkapi-api-link>  is fulfilled.\nSet to  `1`  by default.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PoolSize.startAt",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.PoolSize.startAt",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "startAt: number",
                        "implementation": "",
                        "startLine": 769,
                        "endLine": 770,
                        "references": {
                            "startAt": "@nav[webpm-client]/WorkersPoolModule.PoolSize.startAt"
                        }
                    }
                },
                {
                    "name": "stretchTo",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Maximum number of workers.\nSet to  `max(1, navigator.hardwareConcurrency - 1)`  by default.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PoolSize.stretchTo",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.PoolSize.stretchTo",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "stretchTo: number",
                        "implementation": "",
                        "startLine": 774,
                        "endLine": 775,
                        "references": {
                            "stretchTo": "@nav[webpm-client]/WorkersPoolModule.PoolSize.stretchTo"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export interface PoolSize",
                "implementation": "export interface PoolSize {\n    /**\n     * Initial number of workers to get ready before {@link WorkersPool.ready} is fulfilled.\n     * Set to `1` by default.\n     */\n    startAt: number\n    /**\n     * Maximum number of workers.\n     * Set to `max(1, navigator.hardwareConcurrency - 1)` by default.\n     */\n    stretchTo: number\n}",
                "startLine": 764,
                "endLine": 776,
                "references": {
                    "PoolSize": "@nav[webpm-client]/WorkersPoolModule.PoolSize"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ScheduleInput",
            "documentation": {
                "sections": [
                    {
                        "content": "Input for  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.WorkersPool.schedule\" semantic=\"method\">WorkersPool.schedule</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Generics",
                        "content": "\n*  **TArgs**: type of the entry point's argument.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ScheduleInput",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.ScheduleInput",
            "attributes": [
                {
                    "name": "args",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Arguments to forward to the entry point when executed",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ScheduleInput.args",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.ScheduleInput.args",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "args: TArgs",
                        "implementation": "",
                        "startLine": 831,
                        "endLine": 832,
                        "references": {
                            "args": "@nav[webpm-client]/WorkersPoolModule.ScheduleInput.args"
                        }
                    }
                },
                {
                    "name": "entryPoint",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Entry point of the task",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ScheduleInput.entryPoint",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.ScheduleInput.entryPoint",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "entryPoint: (input: EntryPointArguments<TArgs>) => void",
                        "implementation": "",
                        "startLine": 827,
                        "endLine": 828,
                        "references": {
                            "entryPoint": "@nav[webpm-client]/WorkersPoolModule.ScheduleInput.entryPoint",
                            "EntryPointArguments": "@nav[webpm-client]/WorkersPoolModule.EntryPointArguments"
                        }
                    }
                },
                {
                    "name": "targetWorkerId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "If provided, schedule the task on this particular worker.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ScheduleInput.targetWorkerId",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.ScheduleInput.targetWorkerId",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "targetWorkerId?: string",
                        "implementation": "",
                        "startLine": 835,
                        "endLine": 836,
                        "references": {
                            "targetWorkerId": "@nav[webpm-client]/WorkersPoolModule.ScheduleInput.targetWorkerId"
                        }
                    }
                },
                {
                    "name": "title",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Title of the task",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ScheduleInput.title",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.ScheduleInput.title",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "title: string",
                        "implementation": "",
                        "startLine": 823,
                        "endLine": 824,
                        "references": {
                            "title": "@nav[webpm-client]/WorkersPoolModule.ScheduleInput.title"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export interface ScheduleInput<TArgs>",
                "implementation": "export interface ScheduleInput<TArgs> {\n    /**\n     * Title of the task\n     */\n    title: string\n    /**\n     * Entry point of the task\n     */\n    entryPoint: (input: EntryPointArguments<TArgs>) => void\n    /**\n     * Arguments to forward to the entry point when executed\n     */\n    args: TArgs\n    /**\n     * If provided, schedule the task on this particular worker.\n     */\n    targetWorkerId?: string\n}",
                "startLine": 819,
                "endLine": 837,
                "references": {
                    "ScheduleInput": "@nav[webpm-client]/WorkersPoolModule.ScheduleInput",
                    "EntryPointArguments": "@nav[webpm-client]/WorkersPoolModule.EntryPointArguments"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Task",
            "documentation": {
                "sections": [
                    {
                        "content": "Task specification.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Generics",
                        "content": "\n*  **TArgs**: Type of the entry point's arguments\n*  **TReturn**: Type of the entry point's return\n(emitted afterward using  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.MessageExit\" semantic=\"type-alias\">MessageExit</mkapi-api-link> ).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Task",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.Task",
            "attributes": [
                {
                    "name": "args",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Arguments to forward to the entry point upon execution.\n\nMust follow\n[structured clone algo](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm)",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Task.args",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.Task.args",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "args: TArgs",
                        "implementation": "",
                        "startLine": 137,
                        "endLine": 138,
                        "references": {
                            "args": "@nav[webpm-client]/WorkersPoolModule.Task.args"
                        }
                    }
                },
                {
                    "name": "entryPoint",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Entry point implementation.\n\n<note level=\"warning\">\nAll variables referenced by the entry point should be available within the workers environment.\n</note>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Task.entryPoint",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.Task.entryPoint",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "entryPoint: (args: TArgs) => TReturn | Promise<TReturn>",
                        "implementation": "",
                        "startLine": 130,
                        "endLine": 131,
                        "references": {
                            "entryPoint": "@nav[webpm-client]/WorkersPoolModule.Task.entryPoint"
                        }
                    }
                },
                {
                    "name": "title",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Title of the task.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Task.title",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.Task.title",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "title: string",
                        "implementation": "",
                        "startLine": 118,
                        "endLine": 119,
                        "references": {
                            "title": "@nav[webpm-client]/WorkersPoolModule.Task.title"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export interface Task<TArgs = unknown, TReturn = unknown>",
                "implementation": "export interface Task<TArgs = unknown, TReturn = unknown> {\n    /**\n     * Title of the task.\n     */\n    title: string\n    /**\n     * Entry point implementation.\n     *\n     * <note level=\"warning\">\n     * All variables referenced by the entry point should be available within the workers environment.\n     * </note>\n     *\n     * @param args arguments of the entrypoint, see {@link Task.args}.\n     * @returns the value returned must follow\n     * [structured clone algo](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm)\n     */\n    entryPoint: (args: TArgs) => TReturn | Promise<TReturn>\n    /**\n     * Arguments to forward to the entry point upon execution.\n     *\n     * Must follow\n     * [structured clone algo](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm)\n     */\n    args: TArgs\n}",
                "startLine": 114,
                "endLine": 139,
                "references": {
                    "Task": "@nav[webpm-client]/WorkersPoolModule.Task"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "WorkerContext",
            "documentation": {
                "sections": [
                    {
                        "content": "Context available in  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.WWorkerTrait\" semantic=\"interface\">WWorkerTrait</mkapi-api-link>  to log info or send data.\nAll data must follow\n[structured clone algo](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "WorkerContext",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkerContext",
            "attributes": [
                {
                    "name": "info",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The info logged are send from the workers to the main thread as\n <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.MessageLog\" semantic=\"interface\">MessageLog</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerContext.info",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkerContext.info",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "info: (text: string, data?: unknown) => void",
                        "implementation": "",
                        "startLine": 176,
                        "endLine": 177,
                        "references": {
                            "info": "@nav[webpm-client]/WorkersPoolModule.WorkerContext.info"
                        }
                    }
                },
                {
                    "name": "onData",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "If defined by the developer in its worker's implementation,\nevery message send using  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.WorkersPool.sendData\" semantic=\"method\">WorkersPool.sendData</mkapi-api-link>  (from the main thread) will\nbe intercepted by this callback.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerContext.onData",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkerContext.onData",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "onData?: (message: unknown) => void",
                        "implementation": "",
                        "startLine": 190,
                        "endLine": 191,
                        "references": {
                            "onData": "@nav[webpm-client]/WorkersPoolModule.WorkerContext.onData"
                        }
                    }
                },
                {
                    "name": "sendData",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The data logged are send from the workers to the main thread as\n <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.MessageData\" semantic=\"interface\">MessageData</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerContext.sendData",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkerContext.sendData",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "sendData: (data: Record<string, unknown>) => void",
                        "implementation": "",
                        "startLine": 183,
                        "endLine": 184,
                        "references": {
                            "sendData": "@nav[webpm-client]/WorkersPoolModule.WorkerContext.sendData"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export interface WorkerContext",
                "implementation": "export interface WorkerContext {\n    /**\n     * The info logged are send from the workers to the main thread as\n     * {@link MessageLog}.\n     *\n     * @param text title of the log\n     * @param data data associated.\n     */\n    info: (text: string, data?: unknown) => void\n    /**\n     * The data logged are send from the workers to the main thread as\n     * {@link MessageData}.\n     *\n     * @param data data to send.\n     */\n    sendData: (data: Record<string, unknown>) => void\n\n    /**\n     * If defined by the developer in its worker's implementation,\n     * every message send using {@link WorkersPool.sendData} (from the main thread) will\n     * be intercepted by this callback.\n     */\n    onData?: (message: unknown) => void\n}",
                "startLine": 168,
                "endLine": 192,
                "references": {
                    "WorkerContext": "@nav[webpm-client]/WorkersPoolModule.WorkerContext"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "WorkerEnvironment",
            "documentation": {
                "sections": [
                    {
                        "content": "Specifies worker environment.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "WorkerEnvironment",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkerEnvironment",
            "attributes": [
                {
                    "name": "cdnInstallation",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Installation instruction to be executed in worker environment.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerEnvironment.cdnInstallation",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkerEnvironment.cdnInstallation",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "cdnInstallation: InstallInputs",
                        "implementation": "",
                        "startLine": 155,
                        "endLine": 156,
                        "references": {
                            "cdnInstallation": "@nav[webpm-client]/WorkersPoolModule.WorkerEnvironment.cdnInstallation",
                            "InstallInputs": "@nav[webpm-client]/MainModule.InstallInputs"
                        }
                    }
                },
                {
                    "name": "functions",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Global functions  accessible in worker environment.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerEnvironment.functions",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkerEnvironment.functions",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "functions: WorkerFunction<unknown>[]",
                        "implementation": "",
                        "startLine": 151,
                        "endLine": 152,
                        "references": {
                            "functions": "@nav[webpm-client]/WorkersPoolModule.WorkerEnvironment.functions",
                            "WorkerFunction": "@nav[webpm-client]/WorkersPoolModule.WorkerFunction"
                        }
                    }
                },
                {
                    "name": "postInstallTasks",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Tasks to realized after installation is done and before marking a worker as ready.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerEnvironment.postInstallTasks",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkerEnvironment.postInstallTasks",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "postInstallTasks?: Task[]",
                        "implementation": "",
                        "startLine": 159,
                        "endLine": 160,
                        "references": {
                            "postInstallTasks": "@nav[webpm-client]/WorkersPoolModule.WorkerEnvironment.postInstallTasks",
                            "Task": "@nav[webpm-client]/WorkersPoolModule.Task"
                        }
                    }
                },
                {
                    "name": "variables",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Global variables accessible in worker environment.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerEnvironment.variables",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkerEnvironment.variables",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "variables: WorkerVariable<unknown>[]",
                        "implementation": "",
                        "startLine": 147,
                        "endLine": 148,
                        "references": {
                            "variables": "@nav[webpm-client]/WorkersPoolModule.WorkerEnvironment.variables",
                            "WorkerVariable": "@nav[webpm-client]/WorkersPoolModule.WorkerVariable"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export interface WorkerEnvironment",
                "implementation": "export interface WorkerEnvironment {\n    /**\n     * Global variables accessible in worker environment.\n     */\n    variables: WorkerVariable<unknown>[]\n    /**\n     * Global functions  accessible in worker environment.\n     */\n    functions: WorkerFunction<unknown>[]\n    /**\n     * Installation instruction to be executed in worker environment.\n     */\n    cdnInstallation: InstallInputs\n    /**\n     * Tasks to realized after installation is done and before marking a worker as ready.\n     */\n    postInstallTasks?: Task[]\n}",
                "startLine": 143,
                "endLine": 161,
                "references": {
                    "WorkerEnvironment": "@nav[webpm-client]/WorkersPoolModule.WorkerEnvironment",
                    "InstallInputs": "@nav[webpm-client]/MainModule.InstallInputs",
                    "WorkerFunction": "@nav[webpm-client]/WorkersPoolModule.WorkerFunction",
                    "Task": "@nav[webpm-client]/WorkersPoolModule.Task",
                    "WorkerVariable": "@nav[webpm-client]/WorkersPoolModule.WorkerVariable"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "WorkersPoolInput",
            "documentation": {
                "sections": [
                    {
                        "content": "Input for  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.WorkersPool.constructor\" semantic=\"constructor\">WorkersPool.constructor</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "WorkersPoolInput",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPoolInput",
            "attributes": [
                {
                    "name": "cdnEvent$",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "If provided, all events regarding installation are forwarded here.\nOtherwise  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.WorkersPool.cdnEvent$\" semantic=\"attribute\">WorkersPool.cdnEvent$</mkapi-api-link>  is initialized and used.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPoolInput.cdnEvent$",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPoolInput.cdnEvent$",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "cdnEvent$?: Subject<CdnEventWorker>",
                        "implementation": "",
                        "startLine": 785,
                        "endLine": 786,
                        "references": {
                            "cdnEvent$": "@nav[webpm-client]/WorkersPoolModule.WorkersPoolInput.cdnEvent$",
                            "CdnEventWorker": "@nav[webpm-client]/WorkersPoolModule.CdnEventWorker",
                            "Subject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                        }
                    }
                },
                {
                    "name": "ctxFactory",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "A factory that create a  `Context`  objects used for logging purposes.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPoolInput.ctxFactory",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPoolInput.ctxFactory",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "ctxFactory?: (name: string) => ContextTrait",
                        "implementation": "",
                        "startLine": 806,
                        "endLine": 807,
                        "references": {
                            "ctxFactory": "@nav[webpm-client]/WorkersPoolModule.WorkersPoolInput.ctxFactory",
                            "ContextTrait": "@nav[webpm-client]/WorkersPoolModule.ContextTrait"
                        }
                    }
                },
                {
                    "name": "globals",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Globals variable to be copied in workers' environment, can be variables or functions.\nVariables must be serializable using the structured clone algorithm, and functions can only reference\nsymbols available within the workers.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPoolInput.globals",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPoolInput.globals",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "globals?: Record<string, unknown>",
                        "implementation": "",
                        "startLine": 791,
                        "endLine": 792,
                        "references": {
                            "globals": "@nav[webpm-client]/WorkersPoolModule.WorkersPoolInput.globals"
                        }
                    }
                },
                {
                    "name": "install",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Installation to proceed in the workers.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPoolInput.install",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPoolInput.install",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "install?: InstallInputs",
                        "implementation": "",
                        "startLine": 795,
                        "endLine": 796,
                        "references": {
                            "install": "@nav[webpm-client]/WorkersPoolModule.WorkersPoolInput.install",
                            "InstallInputs": "@nav[webpm-client]/MainModule.InstallInputs"
                        }
                    }
                },
                {
                    "name": "pool",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Constraints on the workers pool size.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPoolInput.pool",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPoolInput.pool",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "pool?: PoolSize",
                        "implementation": "",
                        "startLine": 811,
                        "endLine": 812,
                        "references": {
                            "pool": "@nav[webpm-client]/WorkersPoolModule.WorkersPoolInput.pool",
                            "PoolSize": "@nav[webpm-client]/WorkersPoolModule.PoolSize"
                        }
                    }
                },
                {
                    "name": "postInstallTasks",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "A list of tasks to execute in workers after installation is completed.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPoolInput.postInstallTasks",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WorkersPoolInput.postInstallTasks",
                    "code": {
                        "filePath": "src/lib/workers-pool/workers-factory.ts",
                        "declaration": "postInstallTasks?: Task[]",
                        "implementation": "",
                        "startLine": 799,
                        "endLine": 800,
                        "references": {
                            "postInstallTasks": "@nav[webpm-client]/WorkersPoolModule.WorkersPoolInput.postInstallTasks",
                            "Task": "@nav[webpm-client]/WorkersPoolModule.Task"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export interface WorkersPoolInput",
                "implementation": "export interface WorkersPoolInput {\n    /**\n     * If provided, all events regarding installation are forwarded here.\n     * Otherwise {@link WorkersPool.cdnEvent$} is initialized and used.\n     */\n    cdnEvent$?: Subject<CdnEventWorker>\n    /**\n     * Globals variable to be copied in workers' environment, can be variables or functions.\n     * Variables must be serializable using the structured clone algorithm, and functions can only reference\n     * symbols available within the workers.\n     */\n    globals?: Record<string, unknown>\n    /**\n     * Installation to proceed in the workers.\n     */\n    install?: InstallInputs\n    /**\n     * A list of tasks to execute in workers after installation is completed.\n     */\n    postInstallTasks?: Task[]\n    /**\n     * A factory that create a `Context` objects used for logging purposes.\n     *\n     * @param name Name of the root node of the context.\n     * @returns a `Context` object implementing {@link ContextTrait}.\n     */\n    ctxFactory?: (name: string) => ContextTrait\n\n    /**\n     * Constraints on the workers pool size.\n     */\n    pool?: PoolSize\n}",
                "startLine": 780,
                "endLine": 813,
                "references": {
                    "WorkersPoolInput": "@nav[webpm-client]/WorkersPoolModule.WorkersPoolInput",
                    "CdnEventWorker": "@nav[webpm-client]/WorkersPoolModule.CdnEventWorker",
                    "ContextTrait": "@nav[webpm-client]/WorkersPoolModule.ContextTrait",
                    "InstallInputs": "@nav[webpm-client]/MainModule.InstallInputs",
                    "PoolSize": "@nav[webpm-client]/WorkersPoolModule.PoolSize",
                    "Task": "@nav[webpm-client]/WorkersPoolModule.Task",
                    "Subject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "WWorkerTrait",
            "documentation": {
                "sections": [
                    {
                        "content": "Trait for abstracting the concept of Web Worker; default implementation is based on\nthe WebWorker API provided by the browser, see  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.WebWorkerBrowser\" semantic=\"class\">WebWorkerBrowser</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "WWorkerTrait",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.WWorkerTrait",
            "attributes": [
                {
                    "name": "uid",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Worker's UID",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WWorkerTrait.uid",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WWorkerTrait.uid",
                    "code": {
                        "filePath": "src/lib/workers-pool/web-worker.proxy.ts",
                        "declaration": "uid: string",
                        "implementation": "",
                        "startLine": 11,
                        "endLine": 12,
                        "references": {
                            "uid": "@nav[webpm-client]/WorkersPoolModule.WWorkerTrait.uid"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "execute",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Send a task execution request to the worker.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **args**: Arguments to provide.\n*  **entryPoint**: Function to execute.\n*  **taskId**: Task ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WWorkerTrait.execute",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WWorkerTrait.execute",
                    "code": {
                        "filePath": "src/lib/workers-pool/web-worker.proxy.ts",
                        "declaration": "execute<T>(params: {\n        taskId: string\n        entryPoint: (args: EntryPointArguments<T>) => unknown\n        args: T\n    })",
                        "implementation": "",
                        "startLine": 20,
                        "endLine": 21,
                        "references": {
                            "execute": "@nav[webpm-client]/WorkersPoolModule.WWorkerTrait.execute",
                            "EntryPointArguments": "@nav[webpm-client]/WorkersPoolModule.EntryPointArguments"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "send",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Send to the worker some data in the channel associated to  `taskId` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **data**: arguments to send\n*  **taskId**: task ID",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WWorkerTrait.send",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WWorkerTrait.send",
                    "code": {
                        "filePath": "src/lib/workers-pool/web-worker.proxy.ts",
                        "declaration": "send(params: { taskId: string; data: unknown })",
                        "implementation": "",
                        "startLine": 32,
                        "endLine": 33,
                        "references": {
                            "send": "@nav[webpm-client]/WorkersPoolModule.WWorkerTrait.send"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "terminate",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Terminate the worker.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WWorkerTrait.terminate",
                    "navPath": "@nav[webpm-client]/WorkersPoolModule.WWorkerTrait.terminate",
                    "code": {
                        "filePath": "src/lib/workers-pool/web-worker.proxy.ts",
                        "declaration": "terminate()",
                        "implementation": "",
                        "startLine": 37,
                        "endLine": 38,
                        "references": {
                            "terminate": "@nav[webpm-client]/WorkersPoolModule.WWorkerTrait.terminate"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/workers-pool/web-worker.proxy.ts",
                "declaration": "export interface WWorkerTrait",
                "implementation": "export interface WWorkerTrait {\n    /**\n     * Worker's UID\n     */\n    uid: string\n\n    /**\n     * Send a task execution request to the worker.\n     *\n     * @param params.taskId Task ID.\n     * @param params.entryPoint Function to execute.\n     * @param params.args Arguments to provide.\n     */\n    execute<T>(params: {\n        taskId: string\n        entryPoint: (args: EntryPointArguments<T>) => unknown\n        args: T\n    })\n\n    /**\n     * Send to the worker some data in the channel associated to `taskId`.\n     *\n     * @param params.taskId task ID\n     * @param params.data arguments to send\n     */\n    send(params: { taskId: string; data: unknown })\n\n    /**\n     * Terminate the worker.\n     */\n    terminate()\n}",
                "startLine": 7,
                "endLine": 39,
                "references": {
                    "WWorkerTrait": "@nav[webpm-client]/WorkersPoolModule.WWorkerTrait",
                    "EntryPointArguments": "@nav[webpm-client]/WorkersPoolModule.EntryPointArguments",
                    "WebWorkerBrowser": "@nav[webpm-client]/WorkersPoolModule.WebWorkerBrowser",
                    "WebWorkerJest": "@nav[webpm-client]/MainModule/TestUtilsTypes.WebWorkerJest"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CdnEventWorker",
            "documentation": {
                "sections": [
                    {
                        "content": "Any  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.CdnEvent\" semantic=\"interface\">MainModule.CdnEvent</mkapi-api-link>  emitted from a Worker ( <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.WWorkerTrait\" semantic=\"interface\">WWorkerTrait</mkapi-api-link> ).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CdnEventWorker",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.CdnEventWorker",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export type CdnEventWorker = CdnEvent & {\n    workerId: string\n}",
                "implementation": "",
                "startLine": 63,
                "endLine": 64,
                "references": {
                    "CdnEventWorker": "@nav[webpm-client]/WorkersPoolModule.CdnEventWorker",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Message",
            "documentation": {
                "sections": [
                    {
                        "content": "Messages exchanged between the main and the workers' thread.\n\nEmitted from the worker thread to the main thread:\n*   <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.MessageExecute\" semantic=\"interface\">MessageExecute</mkapi-api-link> \n*   <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.MessageStart\" semantic=\"interface\">MessageStart</mkapi-api-link> \n*   <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.MessageCdnEvent\" semantic=\"interface\">MessageCdnEvent</mkapi-api-link> \n*   <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.MessageLog\" semantic=\"interface\">MessageLog</mkapi-api-link> \n*   <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.MessageData\" semantic=\"interface\">MessageData</mkapi-api-link> \n*   <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.MessagePostError\" semantic=\"interface\">MessagePostError</mkapi-api-link> \n*   <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.MessageExit\" semantic=\"type-alias\">MessageExit</mkapi-api-link> \n\nEmitted from the main thread to the worker thread:\n*   <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.MainToWorkerMessage\" semantic=\"interface\">MainToWorkerMessage</mkapi-api-link>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Message",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.Message",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export type Message =\n    | { type: 'Execute'; data: MessageExecute }\n    | { type: 'Exit'; data: MessageExit }\n    | { type: 'Start'; data: MessageStart }\n    | { type: 'Log'; data: MessageLog }\n    | { type: 'Data'; data: MessageData }\n    | { type: 'MainToWorkerMessage'; data: MainToWorkerMessage }\n    | { type: 'PostError'; data: MessagePostError }\n    | { type: 'CdnEvent'; data: MessageCdnEvent }",
                "implementation": "",
                "startLine": 343,
                "endLine": 344,
                "references": {
                    "Message": "@nav[webpm-client]/WorkersPoolModule.Message",
                    "MessageExecute": "@nav[webpm-client]/WorkersPoolModule.MessageExecute",
                    "MessageExit": "@nav[webpm-client]/WorkersPoolModule.MessageExit",
                    "MessageStart": "@nav[webpm-client]/WorkersPoolModule.MessageStart",
                    "MessageLog": "@nav[webpm-client]/WorkersPoolModule.MessageLog",
                    "MessageData": "@nav[webpm-client]/WorkersPoolModule.MessageData",
                    "MainToWorkerMessage": "@nav[webpm-client]/WorkersPoolModule.MainToWorkerMessage",
                    "MessagePostError": "@nav[webpm-client]/WorkersPoolModule.MessagePostError",
                    "MessageCdnEvent": "@nav[webpm-client]/WorkersPoolModule.MessageCdnEvent"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "MessageExit",
            "documentation": {
                "sections": [
                    {
                        "content": "Message emitted from workers when a task is terminated.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "MessageExit",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.MessageExit",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export type MessageExit = {\n    /**\n     * Task ID.\n     */\n    taskId: string\n    /**\n     * Worker ID.\n     */\n    workerId: string\n} & (\n    | {\n          error: true\n          /**\n           * Data structure for failure.\n           */\n          result: Error\n      }\n    | {\n          error: false\n          /**\n           * Data structure for successful processing.\n           */\n          result: unknown\n      }\n)",
                "implementation": "",
                "startLine": 227,
                "endLine": 228,
                "references": {
                    "MessageExit": "@nav[webpm-client]/WorkersPoolModule.MessageExit"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "MessageType",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the available  `type`  in  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.Message\" semantic=\"type-alias\">Message</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "MessageType",
            "navPath": "@nav[webpm-client]/WorkersPoolModule.MessageType",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool/workers-factory.ts",
                "declaration": "export type MessageType =\n    | 'Execute'\n    | 'Exit'\n    | 'Start'\n    | 'Log'\n    | 'Data'\n    | 'MainToWorkerMessage'\n    | 'PostError'\n    | 'CdnEvent'",
                "implementation": "",
                "startLine": 305,
                "endLine": 306,
                "references": {
                    "MessageType": "@nav[webpm-client]/WorkersPoolModule.MessageType"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        }
    ],
    "callables": [],
    "files": [
        {
            "name": "workers-factory.ts",
            "path": "src/lib/workers-pool/workers-factory.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "web-worker.proxy.ts",
            "path": "src/lib/workers-pool/web-worker.proxy.ts",
            "documentation": {
                "sections": []
            }
        }
    ],
    "children": [],
    "semantic": {
        "role": "module",
        "labels": [],
        "attributes": {},
        "relations": {}
    }
}
