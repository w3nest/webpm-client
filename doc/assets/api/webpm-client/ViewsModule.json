{
    "name": "ViewsModule",
    "documentation": {
        "sections": [
            {
                "content": "This module provides UI components for visualizing installed resources and tracking real-time\ninstallation progress.\n\n<note level=\"warning\">\nThis module is **not included by default** in the main library.\nIt must be explicitly installed using  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.installViewsModule\" semantic=\"function\">MainModule.installViewsModule</mkapi-api-link> .\n</note>\n\n\nKey components include:\n-  <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.installWithUI\" semantic=\"function\">installWithUI</mkapi-api-link> : A convenient wrapper around  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.install\" semantic=\"function\">MainModule.install</mkapi-api-link>  that integrates a visual progress\n  indicator.\n-  <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.RuntimeView\" semantic=\"class\">RuntimeView</mkapi-api-link> : Displays a snapshot of currently installed resources.\n-  <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.WorkersPoolView\" semantic=\"class\">WorkersPoolView</mkapi-api-link> : Provides a dynamic visualization of a  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.WorkersPool\" semantic=\"class\">WorkersPoolModule.WorkersPool</mkapi-api-link> .\n\nAdditionally, this module offers components for building **custom views**, allowing tailored\nmonitoring and interaction with installed resources.",
                "contentType": "markdown",
                "semantic": {
                    "role": "",
                    "labels": [],
                    "attributes": {},
                    "relations": {}
                }
            }
        ]
    },
    "path": "webpm-client/ViewsModule",
    "navPath": "@nav[webpm-client]",
    "attributes": [
        {
            "name": "Dependencies",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "Dependencies instance.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Dependencies",
            "navPath": "@nav[webpm-client]/ViewsModule.Dependencies",
            "code": {
                "filePath": "src/lib/views/index.ts",
                "declaration": "Dependencies: Dependencies = {}",
                "implementation": "",
                "startLine": 43,
                "endLine": 44,
                "references": {
                    "Dependencies": "@nav[webpm-client]/ViewsModule.Dependencies"
                }
            }
        },
        {
            "name": "doneEvents",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "Events related to installation done.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "doneEvents",
            "navPath": "@nav[webpm-client]/ViewsModule.doneEvents",
            "code": {
                "filePath": "src/lib/views/events-manager.ts",
                "declaration": "doneEvents = ['InstallDoneEvent', 'InstallErrorEvent'] as const",
                "implementation": "",
                "startLine": 82,
                "endLine": 83,
                "references": {
                    "doneEvents": "@nav[webpm-client]/ViewsModule.doneEvents"
                }
            }
        },
        {
            "name": "pyModuleEvents",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "Events related to pyodide module installation.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "pyModuleEvents",
            "navPath": "@nav[webpm-client]/ViewsModule.pyModuleEvents",
            "code": {
                "filePath": "src/lib/views/events-manager.ts",
                "declaration": "pyModuleEvents = [\n    'InstallPyModuleEvent',\n    'PyModuleLoadedEvent',\n    'PyModuleErrorEvent',\n] as const",
                "implementation": "",
                "startLine": 24,
                "endLine": 25,
                "references": {
                    "pyModuleEvents": "@nav[webpm-client]/ViewsModule.pyModuleEvents"
                }
            }
        },
        {
            "name": "pyPyRuntimeEvents",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "Events related to pyodide runtime installation.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "pyPyRuntimeEvents",
            "navPath": "@nav[webpm-client]/ViewsModule.pyPyRuntimeEvents",
            "code": {
                "filePath": "src/lib/views/events-manager.ts",
                "declaration": "pyPyRuntimeEvents = [\n    'FetchPyRuntimeEvent',\n    'FetchedPyRuntimeEvent',\n    'StartPyRuntimeEvent',\n    'PyRuntimeReadyEvent',\n] as const",
                "implementation": "",
                "startLine": 48,
                "endLine": 49,
                "references": {
                    "pyPyRuntimeEvents": "@nav[webpm-client]/ViewsModule.pyPyRuntimeEvents"
                }
            }
        }
    ],
    "types": [
        {
            "name": "BackendEventsView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the view gathering events w/ backend installation; each event being displayed using  <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.BackendView\" semantic=\"class\">BackendView</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BackendEventsView",
            "navPath": "@nav[webpm-client]/ViewsModule.BackendEventsView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEventsView.children",
                    "navPath": "@nav[webpm-client]/ViewsModule.BackendEventsView.children",
                    "code": {
                        "filePath": "src/lib/views/backend.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 35,
                        "endLine": 36,
                        "references": {
                            "children": "@nav[webpm-client]/ViewsModule.BackendEventsView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEventsView.class",
                    "navPath": "@nav[webpm-client]/ViewsModule.BackendEventsView.class",
                    "code": {
                        "filePath": "src/lib/views/backend.view.ts",
                        "declaration": "public readonly class = BackendEventsView.CssSelector",
                        "implementation": "",
                        "startLine": 34,
                        "endLine": 35,
                        "references": {
                            "class": "@nav[webpm-client]/ViewsModule.BackendEventsView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEventsView.tag",
                    "navPath": "@nav[webpm-client]/ViewsModule.BackendEventsView.tag",
                    "code": {
                        "filePath": "src/lib/views/backend.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 33,
                        "endLine": 34,
                        "references": {
                            "tag": "@nav[webpm-client]/ViewsModule.BackendEventsView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEventsView.CssSelector",
                    "navPath": "@nav[webpm-client]/ViewsModule.BackendEventsView.CssSelector",
                    "code": {
                        "filePath": "src/lib/views/backend.view.ts",
                        "declaration": "static readonly CssSelector = 'webpm-BackendEventsView'",
                        "implementation": "",
                        "startLine": 31,
                        "endLine": 32,
                        "references": {
                            "CssSelector": "@nav[webpm-client]/ViewsModule.BackendEventsView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/backend.view.ts",
                "declaration": "export class BackendEventsView implements VirtualDOM<'div'>",
                "implementation": "export class BackendEventsView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'webpm-BackendEventsView'\n\n    public readonly tag = 'div'\n    public readonly class = BackendEventsView.CssSelector\n    public readonly children: ChildrenLike\n    constructor(state: EventsManager) {\n        this.children = sync$({\n            policy: 'sync',\n            source$: state.backendsStore$,\n            vdomMap: ({ name, version }) => {\n                return new BackendView({\n                    name,\n                    version,\n                    state,\n                })\n            },\n        })\n    }\n}",
                "startLine": 27,
                "endLine": 50,
                "references": {
                    "BackendEventsView": "@nav[webpm-client]/ViewsModule.BackendEventsView",
                    "EventsManager": "@nav[webpm-client]/ViewsModule.EventsManager",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "BackendView",
            "documentation": {
                "sections": [
                    {
                        "content": "The view for backend events targeting a specific backend.\nIt uses  <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.ItemView\" semantic=\"class\">ItemView</mkapi-api-link>  with  `download` ,  `install`  &  `start`  phases.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BackendView",
            "navPath": "@nav[webpm-client]/ViewsModule.BackendView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendView.children",
                    "navPath": "@nav[webpm-client]/ViewsModule.BackendView.children",
                    "code": {
                        "filePath": "src/lib/views/backend.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 61,
                        "endLine": 62,
                        "references": {
                            "children": "@nav[webpm-client]/ViewsModule.BackendView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendView.class",
                    "navPath": "@nav[webpm-client]/ViewsModule.BackendView.class",
                    "code": {
                        "filePath": "src/lib/views/backend.view.ts",
                        "declaration": "public readonly class = BackendView.CssSelector",
                        "implementation": "",
                        "startLine": 60,
                        "endLine": 61,
                        "references": {
                            "class": "@nav[webpm-client]/ViewsModule.BackendView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendView.tag",
                    "navPath": "@nav[webpm-client]/ViewsModule.BackendView.tag",
                    "code": {
                        "filePath": "src/lib/views/backend.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 59,
                        "endLine": 60,
                        "references": {
                            "tag": "@nav[webpm-client]/ViewsModule.BackendView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendView.CssSelector",
                    "navPath": "@nav[webpm-client]/ViewsModule.BackendView.CssSelector",
                    "code": {
                        "filePath": "src/lib/views/backend.view.ts",
                        "declaration": "static readonly CssSelector = 'webpm-BackendView'",
                        "implementation": "",
                        "startLine": 58,
                        "endLine": 59,
                        "references": {
                            "CssSelector": "@nav[webpm-client]/ViewsModule.BackendView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/backend.view.ts",
                "declaration": "export class BackendView implements VirtualDOM<'div'>",
                "implementation": "export class BackendView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'webpm-BackendView'\n    public readonly tag = 'div'\n    public readonly class = BackendView.CssSelector\n    public readonly children: ChildrenLike\n\n    constructor({\n        name,\n        version,\n        state,\n    }: {\n        name: string\n        version: string\n        state: EventsManager\n    }) {\n        const itemEvent$ = state.backendEvent$.pipe(\n            filter((ev) => ev.name === name && ev.version === version),\n            shareReplay({ refCount: true }),\n        )\n        const downloadEvent$ = itemEvent$.pipe(filter(isBackendDownloadEvent))\n        const installEvent$ = itemEvent$.pipe(filter(isBackendInstallEvent))\n        const startEvent$ = itemEvent$.pipe(filter(isBackendStartEvent))\n\n        const phases: Phase[] = [\n            {\n                source$: downloadEvent$.pipe(\n                    map((ev) => {\n                        return ev.event\n                    }),\n                ),\n                icon: 'fas fa-download',\n            },\n            {\n                source$: installEvent$.pipe(\n                    map((ev) => {\n                        return ev.event\n                    }),\n                ),\n                icon: 'fas fa-cog',\n            },\n            {\n                source$: startEvent$.pipe(\n                    map((ev) => {\n                        const event = ev.event\n                        const mapper: Record<typeof event, PhaseStatus> = {\n                            failed: 'failed',\n                            starting: 'started',\n                            listening: 'succeeded',\n                        }\n                        return mapper[event]\n                    }),\n                ),\n                icon: 'fas fa-play',\n            },\n        ]\n        this.children = [\n            new ItemView({ name, topic: 'Backend', version, phases }),\n        ]\n    }\n}",
                "startLine": 54,
                "endLine": 117,
                "references": {
                    "BackendView": "@nav[webpm-client]/ViewsModule.BackendView",
                    "EventsManager": "@nav[webpm-client]/ViewsModule.EventsManager",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CssEventsView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the view gathering events w/ CSS installation; each event being displayed using  <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.CssView\" semantic=\"class\">CssView</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CssEventsView",
            "navPath": "@nav[webpm-client]/ViewsModule.CssEventsView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssEventsView.children",
                    "navPath": "@nav[webpm-client]/ViewsModule.CssEventsView.children",
                    "code": {
                        "filePath": "src/lib/views/css.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 16,
                        "endLine": 17,
                        "references": {
                            "children": "@nav[webpm-client]/ViewsModule.CssEventsView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssEventsView.class",
                    "navPath": "@nav[webpm-client]/ViewsModule.CssEventsView.class",
                    "code": {
                        "filePath": "src/lib/views/css.view.ts",
                        "declaration": "public readonly class = CssEventsView.CssSelector",
                        "implementation": "",
                        "startLine": 15,
                        "endLine": 16,
                        "references": {
                            "class": "@nav[webpm-client]/ViewsModule.CssEventsView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssEventsView.tag",
                    "navPath": "@nav[webpm-client]/ViewsModule.CssEventsView.tag",
                    "code": {
                        "filePath": "src/lib/views/css.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 14,
                        "endLine": 15,
                        "references": {
                            "tag": "@nav[webpm-client]/ViewsModule.CssEventsView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssEventsView.CssSelector",
                    "navPath": "@nav[webpm-client]/ViewsModule.CssEventsView.CssSelector",
                    "code": {
                        "filePath": "src/lib/views/css.view.ts",
                        "declaration": "static readonly CssSelector = 'webpm-CssEventsView'",
                        "implementation": "",
                        "startLine": 13,
                        "endLine": 14,
                        "references": {
                            "CssSelector": "@nav[webpm-client]/ViewsModule.CssEventsView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/css.view.ts",
                "declaration": "export class CssEventsView implements VirtualDOM<'div'>",
                "implementation": "export class CssEventsView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'webpm-CssEventsView'\n    public readonly tag = 'div'\n    public readonly class = CssEventsView.CssSelector\n    public readonly children: ChildrenLike\n\n    constructor(state: EventsManager) {\n        this.children = sync$({\n            policy: 'sync',\n            source$: state.cssStyleSheetStore$,\n            vdomMap: ({ name, version, url }) => {\n                const target = url.split('/').slice(9).join('/')\n                return new CssView({ name, target, version, url, state })\n            },\n        })\n    }\n}",
                "startLine": 9,
                "endLine": 29,
                "references": {
                    "CssEventsView": "@nav[webpm-client]/ViewsModule.CssEventsView",
                    "EventsManager": "@nav[webpm-client]/ViewsModule.EventsManager",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CssView",
            "documentation": {
                "sections": [
                    {
                        "content": "The view for CSS events targeting a specific resource.\nIt uses  <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.ItemView\" semantic=\"class\">ItemView</mkapi-api-link>  with a single  `install`  phase.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CssView",
            "navPath": "@nav[webpm-client]/ViewsModule.CssView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssView.children",
                    "navPath": "@nav[webpm-client]/ViewsModule.CssView.children",
                    "code": {
                        "filePath": "src/lib/views/css.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 40,
                        "endLine": 41,
                        "references": {
                            "children": "@nav[webpm-client]/ViewsModule.CssView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssView.class",
                    "navPath": "@nav[webpm-client]/ViewsModule.CssView.class",
                    "code": {
                        "filePath": "src/lib/views/css.view.ts",
                        "declaration": "public readonly class = CssView.CssSelector",
                        "implementation": "",
                        "startLine": 39,
                        "endLine": 40,
                        "references": {
                            "class": "@nav[webpm-client]/ViewsModule.CssView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssView.tag",
                    "navPath": "@nav[webpm-client]/ViewsModule.CssView.tag",
                    "code": {
                        "filePath": "src/lib/views/css.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 38,
                        "endLine": 39,
                        "references": {
                            "tag": "@nav[webpm-client]/ViewsModule.CssView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssView.CssSelector",
                    "navPath": "@nav[webpm-client]/ViewsModule.CssView.CssSelector",
                    "code": {
                        "filePath": "src/lib/views/css.view.ts",
                        "declaration": "static readonly CssSelector = 'webpm-CssView'",
                        "implementation": "",
                        "startLine": 37,
                        "endLine": 38,
                        "references": {
                            "CssSelector": "@nav[webpm-client]/ViewsModule.CssView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/css.view.ts",
                "declaration": "export class CssView implements VirtualDOM<'div'>",
                "implementation": "export class CssView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'webpm-CssView'\n    public readonly tag = 'div'\n    public readonly class = CssView.CssSelector\n    public readonly children: ChildrenLike\n\n    constructor({\n        name,\n        version,\n        target,\n        url,\n        state,\n    }: {\n        name: string\n        version: string\n        target: string\n        url: string\n        state: EventsManager\n    }) {\n        const itemEvent$ = state.cssEvent$.pipe(\n            filter((ev) => ev.targetName === name && ev.version === version),\n            shareReplay({ refCount: true }),\n        )\n        const installEvent$ = itemEvent$.pipe(\n            filter((ev) => {\n                return ev.url === url\n            }),\n            map((ev) => {\n                const step = ev.step\n                const mapper: Record<typeof step, PhaseStatus> = {\n                    CssLoadingEvent: 'started',\n                    CssParsedEvent: 'succeeded',\n                    UrlNotFoundEvent: 'failed404',\n                    UnauthorizedEvent: 'failed401',\n                }\n                return mapper[step]\n            }),\n        )\n        const phases: Phase[] = [\n            {\n                source$: installEvent$,\n                icon: 'fab fa-css3',\n            },\n        ]\n        this.children = [\n            new ItemView({ name, topic: 'CSS', version, target, phases }),\n        ]\n    }\n}",
                "startLine": 33,
                "endLine": 85,
                "references": {
                    "CssView": "@nav[webpm-client]/ViewsModule.CssView",
                    "EventsManager": "@nav[webpm-client]/ViewsModule.EventsManager",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "EsmEventsView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the view gathering events w/ ESM installation; each event being displayed using  <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.EsmView\" semantic=\"class\">EsmView</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "EsmEventsView",
            "navPath": "@nav[webpm-client]/ViewsModule.EsmEventsView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EsmEventsView.children",
                    "navPath": "@nav[webpm-client]/ViewsModule.EsmEventsView.children",
                    "code": {
                        "filePath": "src/lib/views/esm.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 16,
                        "endLine": 17,
                        "references": {
                            "children": "@nav[webpm-client]/ViewsModule.EsmEventsView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EsmEventsView.class",
                    "navPath": "@nav[webpm-client]/ViewsModule.EsmEventsView.class",
                    "code": {
                        "filePath": "src/lib/views/esm.view.ts",
                        "declaration": "public readonly class = EsmEventsView.CssSelector",
                        "implementation": "",
                        "startLine": 15,
                        "endLine": 16,
                        "references": {
                            "class": "@nav[webpm-client]/ViewsModule.EsmEventsView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EsmEventsView.tag",
                    "navPath": "@nav[webpm-client]/ViewsModule.EsmEventsView.tag",
                    "code": {
                        "filePath": "src/lib/views/esm.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 14,
                        "endLine": 15,
                        "references": {
                            "tag": "@nav[webpm-client]/ViewsModule.EsmEventsView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EsmEventsView.CssSelector",
                    "navPath": "@nav[webpm-client]/ViewsModule.EsmEventsView.CssSelector",
                    "code": {
                        "filePath": "src/lib/views/esm.view.ts",
                        "declaration": "static readonly CssSelector = 'webpm-EsmEventsView'",
                        "implementation": "",
                        "startLine": 13,
                        "endLine": 14,
                        "references": {
                            "CssSelector": "@nav[webpm-client]/ViewsModule.EsmEventsView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/esm.view.ts",
                "declaration": "export class EsmEventsView implements VirtualDOM<'div'>",
                "implementation": "export class EsmEventsView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'webpm-EsmEventsView'\n    public readonly tag = 'div'\n    public readonly class = EsmEventsView.CssSelector\n    public readonly children: ChildrenLike\n\n    constructor(state: EventsManager) {\n        this.children = sync$({\n            policy: 'sync',\n            source$: state.esmStore$,\n            vdomMap: ({ name, version, url }) => {\n                return new EsmView({ name, version, url, state })\n            },\n        })\n    }\n}",
                "startLine": 9,
                "endLine": 28,
                "references": {
                    "EsmEventsView": "@nav[webpm-client]/ViewsModule.EsmEventsView",
                    "EventsManager": "@nav[webpm-client]/ViewsModule.EventsManager",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "EsmView",
            "documentation": {
                "sections": [
                    {
                        "content": "The view for ESM events targeting a specific module.\nIt uses  <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.ItemView\" semantic=\"class\">ItemView</mkapi-api-link>  with  `loading`  &  `parsing`  phases.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "EsmView",
            "navPath": "@nav[webpm-client]/ViewsModule.EsmView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EsmView.children",
                    "navPath": "@nav[webpm-client]/ViewsModule.EsmView.children",
                    "code": {
                        "filePath": "src/lib/views/esm.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 40,
                        "endLine": 41,
                        "references": {
                            "children": "@nav[webpm-client]/ViewsModule.EsmView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EsmView.class",
                    "navPath": "@nav[webpm-client]/ViewsModule.EsmView.class",
                    "code": {
                        "filePath": "src/lib/views/esm.view.ts",
                        "declaration": "public readonly class = EsmView.CssSelector",
                        "implementation": "",
                        "startLine": 39,
                        "endLine": 40,
                        "references": {
                            "class": "@nav[webpm-client]/ViewsModule.EsmView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EsmView.tag",
                    "navPath": "@nav[webpm-client]/ViewsModule.EsmView.tag",
                    "code": {
                        "filePath": "src/lib/views/esm.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 38,
                        "endLine": 39,
                        "references": {
                            "tag": "@nav[webpm-client]/ViewsModule.EsmView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EsmView.CssSelector",
                    "navPath": "@nav[webpm-client]/ViewsModule.EsmView.CssSelector",
                    "code": {
                        "filePath": "src/lib/views/esm.view.ts",
                        "declaration": "static readonly CssSelector = 'webpm-EsmView'",
                        "implementation": "",
                        "startLine": 37,
                        "endLine": 38,
                        "references": {
                            "CssSelector": "@nav[webpm-client]/ViewsModule.EsmView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/esm.view.ts",
                "declaration": "export class EsmView implements VirtualDOM<'div'>",
                "implementation": "export class EsmView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'webpm-EsmView'\n    public readonly tag = 'div'\n    public readonly class = EsmView.CssSelector\n    public readonly children: ChildrenLike\n\n    constructor({\n        name,\n        version,\n        url,\n        state,\n    }: {\n        name: string\n        version: string\n        url: string\n        state: EventsManager\n    }) {\n        const itemEvent$ = state.esmEvent$.pipe(\n            filter((ev) => ev.targetName === name && ev.version === version),\n            shareReplay({ refCount: true }),\n        )\n        const loadingEvent$ = itemEvent$.pipe(\n            filter(\n                (ev) =>\n                    ev.step === 'SourceLoadingEvent' ||\n                    ev.step === 'SourceLoadedEvent' ||\n                    ev.step === 'UrlNotFoundEvent' ||\n                    ev.step === 'UnauthorizedEvent',\n            ),\n            filter((ev) => {\n                return ev.url === url\n            }),\n            map((ev) => {\n                const step = ev.step\n                const mapper: Record<typeof step, PhaseStatus> = {\n                    SourceLoadingEvent: 'started',\n                    SourceLoadedEvent: 'succeeded',\n                    UrlNotFoundEvent: 'failed',\n                    UnauthorizedEvent: 'failed',\n                }\n                return mapper[step]\n            }),\n        )\n        const parsingEvent$ = itemEvent$.pipe(\n            filter(\n                (ev) =>\n                    ev.step === 'SourceParsedEvent' ||\n                    ev.step === 'ParseErrorEvent',\n            ),\n            map((ev) =>\n                ev.step === 'SourceParsedEvent' ? 'succeeded' : 'failed',\n            ),\n        )\n        const phases: Phase[] = [\n            {\n                source$: loadingEvent$,\n                icon: 'fas fa-download',\n            },\n            {\n                source$: parsingEvent$,\n                icon: 'fas fa-play',\n            },\n        ]\n        this.children = [new ItemView({ name, topic: 'ESM', version, phases })]\n    }\n}",
                "startLine": 33,
                "endLine": 102,
                "references": {
                    "EsmView": "@nav[webpm-client]/ViewsModule.EsmView",
                    "EventsManager": "@nav[webpm-client]/ViewsModule.EventsManager",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "EventsManager",
            "documentation": {
                "sections": [
                    {
                        "content": "Installation related events manager.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "EventsManager",
            "navPath": "@nav[webpm-client]/ViewsModule.EventsManager",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/events-manager.ts",
                "declaration": "export class EventsManager",
                "implementation": "export class EventsManager {\n    public readonly event$ = new ReplaySubject<CdnEvent>()\n\n    public readonly consoleEvent$: Observable<AllEvents['ConsoleEvent']>\n    public readonly loadingGraphEvent$: Observable<\n        AllEvents[LoadingGraphEventType]\n    >\n    public readonly esmEvent$: Observable<AllEvents[EsmEventType]>\n    public readonly esmStore$: Observable<\n        { name: string; version: string; url: string }[]\n    >\n\n    public readonly backendEvent$: Observable<AllEvents[BackendEventType]>\n    public readonly backendsStore$: Observable<\n        { name: string; version: string }[]\n    >\n\n    public readonly pyEvent$: Observable<AllEvents[PyEventType]>\n    public readonly pyRuntimeEvent$: Observable<AllEvents[PyRuntimeEventType]>\n    public readonly pyModuleEvent$: Observable<AllEvents[PyModuleEventType]>\n    public readonly pyModulesStore$: Observable<string[]>\n\n    public readonly cssEvent$: Observable<AllEvents[CssEventType]>\n    public readonly cssStyleSheetStore$: Observable<\n        { name: string; version: string; url: string }[]\n    >\n    public readonly installDoneEvent$: Observable<AllEvents[DoneEventType]>\n\n    constructor() {\n        const scanCbNameVersion = <T extends { name: string; version: string }>(\n            acc: T[],\n            e: T,\n        ) => {\n            return acc.some(\n                (prev) => prev.name === e.name && prev.version === e.version,\n            )\n                ? acc\n                : [...acc, e]\n        }\n        const scanCbUrl = <T extends { url: string }>(acc: T[], e: T) => {\n            return acc.some((prev) => prev.url === e.url) ? acc : [...acc, e]\n        }\n\n        this.consoleEvent$ = this.event$.pipe(filter(isConsoleEvent))\n        this.loadingGraphEvent$ = this.event$.pipe(filter(isLoadingGraphEvent))\n        this.esmEvent$ = this.event$.pipe(filter(isEsmEvent))\n        this.esmStore$ = this.esmEvent$.pipe(\n            map((ev) => ({\n                name: ev.targetName,\n                url: ev.url,\n                version: ev.version,\n            })),\n            scan(\n                scanCbUrl,\n                [] as { name: string; version: string; url: string }[],\n            ),\n        )\n\n        this.backendEvent$ = this.event$.pipe(filter(isBackendEvent))\n        this.backendsStore$ = this.backendEvent$.pipe(\n            map((ev) => ({ name: ev.name, version: ev.version })),\n            scan(scanCbNameVersion, [] as { name: string; version: string }[]),\n        )\n\n        this.pyEvent$ = this.event$.pipe(filter(isPyEvent))\n        this.pyRuntimeEvent$ = this.event$.pipe(filter(isPyRuntimeEvent))\n        this.pyModuleEvent$ = this.event$.pipe(filter(isPyModuleEvent))\n        this.pyModulesStore$ = this.pyModuleEvent$.pipe(\n            map((ev) => ev.name),\n            scan(\n                (acc, e) => (acc.includes(e) ? acc : [...acc, e]),\n                [] as string[],\n            ),\n        )\n\n        this.cssEvent$ = this.event$.pipe(filter(isCssEvent))\n        this.cssStyleSheetStore$ = this.cssEvent$.pipe(\n            map((ev) => ({\n                name: ev.targetName,\n                version: ev.version,\n                url: ev.url,\n            })),\n            scan(\n                scanCbUrl,\n                [] as { name: string; version: string; url: string }[],\n            ),\n        )\n        this.installDoneEvent$ = this.event$.pipe(\n            filter(isInstallDoneEvent),\n            take(1),\n        )\n    }\n}",
                "startLine": 102,
                "endLine": 195,
                "references": {
                    "EventsManager": "@nav[webpm-client]/ViewsModule.EventsManager",
                    "DownloadBackendEvent": "@nav[webpm-client]/MainModule.DownloadBackendEvent",
                    "InstallBackendEvent": "@nav[webpm-client]/MainModule.InstallBackendEvent",
                    "StartBackendEvent": "@nav[webpm-client]/MainModule.StartBackendEvent",
                    "BackendErrorEvent": "@nav[webpm-client]/MainModule.BackendErrorEvent",
                    "ConsoleEvent": "@nav[webpm-client]/MainModule.ConsoleEvent",
                    "CssLoadingEvent": "@nav[webpm-client]/MainModule.CssLoadingEvent",
                    "CssParsedEvent": "@nav[webpm-client]/MainModule.CssParsedEvent",
                    "UnauthorizedEvent": "@nav[webpm-client]/MainModule.UnauthorizedEvent",
                    "UrlNotFoundEvent": "@nav[webpm-client]/MainModule.UrlNotFoundEvent",
                    "StartEvent": "@nav[webpm-client]/MainModule.StartEvent",
                    "SourceLoadingEvent": "@nav[webpm-client]/MainModule.SourceLoadingEvent",
                    "SourceLoadedEvent": "@nav[webpm-client]/MainModule.SourceLoadedEvent",
                    "SourceParsedEvent": "@nav[webpm-client]/MainModule.SourceParsedEvent",
                    "ParseErrorEvent": "@nav[webpm-client]/MainModule.ParseErrorEvent",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent",
                    "InstallDoneEvent": "@nav[webpm-client]/MainModule.InstallDoneEvent",
                    "InstallErrorEvent": "@nav[webpm-client]/MainModule.InstallErrorEvent",
                    "CdnLoadingGraphQueryEvent": "@nav[webpm-client]/MainModule.CdnLoadingGraphQueryEvent",
                    "CdnLoadingGraphResolvedEvent": "@nav[webpm-client]/MainModule.CdnLoadingGraphResolvedEvent",
                    "CdnLoadingGraphErrorEvent": "@nav[webpm-client]/MainModule.CdnLoadingGraphErrorEvent",
                    "FetchPyRuntimeEvent": "@nav[webpm-client]/MainModule.FetchPyRuntimeEvent",
                    "FetchedPyRuntimeEvent": "@nav[webpm-client]/MainModule.FetchedPyRuntimeEvent",
                    "StartPyRuntimeEvent": "@nav[webpm-client]/MainModule.StartPyRuntimeEvent",
                    "PyRuntimeReadyEvent": "@nav[webpm-client]/MainModule.PyRuntimeReadyEvent",
                    "StartPyEnvironmentInstallEvent": "@nav[webpm-client]/MainModule.StartPyEnvironmentInstallEvent",
                    "InstallPyModuleEvent": "@nav[webpm-client]/MainModule.InstallPyModuleEvent",
                    "PyModuleLoadedEvent": "@nav[webpm-client]/MainModule.PyModuleLoadedEvent",
                    "PyModuleErrorEvent": "@nav[webpm-client]/MainModule.PyModuleErrorEvent",
                    "PyEnvironmentReadyEvent": "@nav[webpm-client]/MainModule.PyEnvironmentReadyEvent",
                    "PyEnvironmentErrorEvent": "@nav[webpm-client]/MainModule.PyEnvironmentErrorEvent",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "ReplaySubject": "https://www.learnrxjs.io/learn-rxjs/subjects/replaysubject"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "FooterView",
            "documentation": {
                "sections": [
                    {
                        "content": "Footer view for  <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.InstallView\" semantic=\"class\">InstallView</mkapi-api-link>  displaying a given message.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "FooterView",
            "navPath": "@nav[webpm-client]/ViewsModule.FooterView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FooterView.children",
                    "navPath": "@nav[webpm-client]/ViewsModule.FooterView.children",
                    "code": {
                        "filePath": "src/lib/views/install.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 238,
                        "endLine": 239,
                        "references": {
                            "children": "@nav[webpm-client]/ViewsModule.FooterView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FooterView.class",
                    "navPath": "@nav[webpm-client]/ViewsModule.FooterView.class",
                    "code": {
                        "filePath": "src/lib/views/install.view.ts",
                        "declaration": "public readonly class = `${FooterView.CssSelector} my-2`",
                        "implementation": "",
                        "startLine": 237,
                        "endLine": 238,
                        "references": {
                            "class": "@nav[webpm-client]/ViewsModule.FooterView.class"
                        }
                    }
                },
                {
                    "name": "style",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The style associated with the element. Typically, for a static value:\n ```typescript\n{\n     tag: 'div',\n     style: {\n         backgroundColor: 'blue'\n     }\n}\n``` \nFor more details on hyphenated properties, see  <mkapi-ext-link href=\"/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute\">CSSAttribute</mkapi-ext-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FooterView.style",
                    "navPath": "@nav[webpm-client]/ViewsModule.FooterView.style",
                    "code": {
                        "filePath": "src/lib/views/install.view.ts",
                        "declaration": "public readonly style = { fontWeight: 'bold' as const }",
                        "implementation": "",
                        "startLine": 239,
                        "endLine": 240,
                        "references": {
                            "style": "@nav[webpm-client]/ViewsModule.FooterView.style"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FooterView.tag",
                    "navPath": "@nav[webpm-client]/ViewsModule.FooterView.tag",
                    "code": {
                        "filePath": "src/lib/views/install.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 236,
                        "endLine": 237,
                        "references": {
                            "tag": "@nav[webpm-client]/ViewsModule.FooterView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FooterView.CssSelector",
                    "navPath": "@nav[webpm-client]/ViewsModule.FooterView.CssSelector",
                    "code": {
                        "filePath": "src/lib/views/install.view.ts",
                        "declaration": "static readonly CssSelector = 'webpm-FooterView'",
                        "implementation": "",
                        "startLine": 235,
                        "endLine": 236,
                        "references": {
                            "CssSelector": "@nav[webpm-client]/ViewsModule.FooterView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/install.view.ts",
                "declaration": "export class FooterView implements VirtualDOM<'div'>",
                "implementation": "export class FooterView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'webpm-FooterView'\n    public readonly tag = 'div'\n    public readonly class = `${FooterView.CssSelector} my-2`\n    public readonly children: ChildrenLike\n    public readonly style = { fontWeight: 'bold' as const }\n    constructor({ text }: { text: string }) {\n        this.children = [\n            {\n                tag: 'div',\n                innerText: text,\n            },\n        ]\n    }\n}",
                "startLine": 231,
                "endLine": 249,
                "references": {
                    "FooterView": "@nav[webpm-client]/ViewsModule.FooterView",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "InstallHeaderBar",
            "documentation": {
                "sections": [
                    {
                        "content": "Header bar for  <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.InstallView\" semantic=\"class\">InstallView</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "InstallHeaderBar",
            "navPath": "@nav[webpm-client]/ViewsModule.InstallHeaderBar",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallHeaderBar.children",
                    "navPath": "@nav[webpm-client]/ViewsModule.InstallHeaderBar.children",
                    "code": {
                        "filePath": "src/lib/views/install.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 141,
                        "endLine": 142,
                        "references": {
                            "children": "@nav[webpm-client]/ViewsModule.InstallHeaderBar.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallHeaderBar.class",
                    "navPath": "@nav[webpm-client]/ViewsModule.InstallHeaderBar.class",
                    "code": {
                        "filePath": "src/lib/views/install.view.ts",
                        "declaration": "public readonly class: AttributeLike<string>",
                        "implementation": "",
                        "startLine": 140,
                        "endLine": 141,
                        "references": {
                            "class": "@nav[webpm-client]/ViewsModule.InstallHeaderBar.class",
                            "AttributeLike": "/apps/@rx-vdom/doc/latest?nav=/api.AttributeLike"
                        }
                    }
                },
                {
                    "name": "style",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The style associated with the element. Typically, for a static value:\n ```typescript\n{\n     tag: 'div',\n     style: {\n         backgroundColor: 'blue'\n     }\n}\n``` \nFor more details on hyphenated properties, see  <mkapi-ext-link href=\"/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute\">CSSAttribute</mkapi-ext-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallHeaderBar.style",
                    "navPath": "@nav[webpm-client]/ViewsModule.InstallHeaderBar.style",
                    "code": {
                        "filePath": "src/lib/views/install.view.ts",
                        "declaration": "public readonly style = {\n        fontWeight: 'bolder' as const,\n    }",
                        "implementation": "",
                        "startLine": 143,
                        "endLine": 144,
                        "references": {
                            "style": "@nav[webpm-client]/ViewsModule.InstallHeaderBar.style"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallHeaderBar.tag",
                    "navPath": "@nav[webpm-client]/ViewsModule.InstallHeaderBar.tag",
                    "code": {
                        "filePath": "src/lib/views/install.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 139,
                        "endLine": 140,
                        "references": {
                            "tag": "@nav[webpm-client]/ViewsModule.InstallHeaderBar.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallHeaderBar.CssSelector",
                    "navPath": "@nav[webpm-client]/ViewsModule.InstallHeaderBar.CssSelector",
                    "code": {
                        "filePath": "src/lib/views/install.view.ts",
                        "declaration": "static readonly CssSelector = 'webpm-InstallHeaderBar'",
                        "implementation": "",
                        "startLine": 137,
                        "endLine": 138,
                        "references": {
                            "CssSelector": "@nav[webpm-client]/ViewsModule.InstallHeaderBar.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/install.view.ts",
                "declaration": "export class InstallHeaderBar implements VirtualDOM<'div'>",
                "implementation": "export class InstallHeaderBar implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'webpm-InstallHeaderBar'\n\n    public readonly tag = 'div'\n    public readonly class: AttributeLike<string>\n    public readonly children: ChildrenLike\n    public readonly expanded$ = new BehaviorSubject(true)\n    public readonly style = {\n        fontWeight: 'bolder' as const,\n    }\n    constructor({\n        eventsMgr,\n        mode$,\n        expandedMode,\n    }: {\n        eventsMgr: EventsManager\n        mode$: BehaviorSubject<'events' | 'logs'>\n        expandedMode?: ExpandedMode\n    }) {\n        const baseClass = `${InstallHeaderBar.CssSelector} p-1 w-100 d-flex border-bottom align-items-center`\n        this.class = attr$({\n            source$: eventsMgr.installDoneEvent$,\n            vdomMap: (ev) => {\n                return ev.step === 'InstallDoneEvent'\n                    ? 'mkdocs-bg-success'\n                    : 'mkdocs-bg-failure'\n            },\n            untilFirst: 'mkdocs-bg-info',\n            wrapper: (d) => `${d} ${baseClass}`,\n        })\n        if (expandedMode === undefined || expandedMode == 'auto') {\n            eventsMgr.installDoneEvent$\n                .pipe(take(1), delay(1000))\n                .subscribe((ev) => {\n                    if (ev.step === 'InstallDoneEvent') {\n                        this.expanded$.next(false)\n                    }\n                })\n        }\n        if (expandedMode == 'collapsed') {\n            this.expanded$.next(false)\n        }\n        if (expandedMode == 'expanded') {\n            this.expanded$.next(true)\n        }\n        this.children = [\n            {\n                tag: 'i',\n                class: attr$({\n                    source$: eventsMgr.installDoneEvent$,\n                    vdomMap: (ev) =>\n                        ev.step === 'InstallDoneEvent'\n                            ? 'fas fa-check text-success'\n                            : `fas fa-times text-danger`,\n                    untilFirst: 'fas fa-cog fa-spin',\n                }),\n            },\n            { tag: 'div', class: 'mx-1' },\n            {\n                tag: 'div',\n                innerText: attr$({\n                    source$: eventsMgr.installDoneEvent$,\n                    vdomMap: (ev) =>\n                        ev.step === 'InstallDoneEvent'\n                            ? `Installation successful`\n                            : `Installation failed`,\n                    untilFirst: 'Installing...',\n                }),\n            },\n            { tag: 'div', class: 'flex-grow-1' },\n            child$({\n                source$: this.expanded$,\n                vdomMap: (expanded) =>\n                    expanded ? new ToggleViewMode({ mode$ }) : EmptyDiv,\n            }),\n            { tag: 'div', class: 'mx-1' },\n            {\n                tag: 'button',\n                onclick: () => {\n                    this.expanded$.next(!this.expanded$.value)\n                },\n                class: attr$({\n                    source$: this.expanded$,\n                    vdomMap: (expanded): string =>\n                        expanded ? 'fa-chevron-down' : 'fa-chevron-right',\n                    wrapper: (d) => `fas ${d} btn btn-sm btn-light`,\n                }),\n            },\n        ]\n    }\n}",
                "startLine": 133,
                "endLine": 227,
                "references": {
                    "InstallHeaderBar": "@nav[webpm-client]/ViewsModule.InstallHeaderBar",
                    "EventsManager": "@nav[webpm-client]/ViewsModule.EventsManager",
                    "ExpandedMode": "@nav[webpm-client]/ViewsModule.ExpandedMode",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "AttributeLike": "/apps/@rx-vdom/doc/latest?nav=/api.AttributeLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "InstallView",
            "documentation": {
                "sections": [
                    {
                        "content": "A virtual DOM component that displays the installation process of various dependencies\n(ESM, Pyodide, Backend, and CSS) with real-time updates.\n\nIt is an expandable group with header defined by  <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.InstallHeaderBar\" semantic=\"class\">InstallHeaderBar</mkapi-api-link> , and content including (if applicable):\n\n*   <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.LoadingGraphEventsView\" semantic=\"class\">LoadingGraphEventsView</mkapi-api-link> \n\n*   <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.EsmEventsView\" semantic=\"class\">EsmEventsView</mkapi-api-link> \n\n*   <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.PyEventsView\" semantic=\"class\">PyEventsView</mkapi-api-link> \n\n*   <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.BackendEventsView\" semantic=\"class\">BackendEventsView</mkapi-api-link> \n\n*   <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.CssEventsView\" semantic=\"class\">CssEventsView</mkapi-api-link> \n\n*   <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.FooterView\" semantic=\"class\">FooterView</mkapi-api-link>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "InstallView",
            "navPath": "@nav[webpm-client]/ViewsModule.InstallView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallView.children",
                    "navPath": "@nav[webpm-client]/ViewsModule.InstallView.children",
                    "code": {
                        "filePath": "src/lib/views/install.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 53,
                        "endLine": 54,
                        "references": {
                            "children": "@nav[webpm-client]/ViewsModule.InstallView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallView.class",
                    "navPath": "@nav[webpm-client]/ViewsModule.InstallView.class",
                    "code": {
                        "filePath": "src/lib/views/install.view.ts",
                        "declaration": "public readonly class = `${InstallView.CssSelector} border rounded w-100`",
                        "implementation": "",
                        "startLine": 52,
                        "endLine": 53,
                        "references": {
                            "class": "@nav[webpm-client]/ViewsModule.InstallView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallView.tag",
                    "navPath": "@nav[webpm-client]/ViewsModule.InstallView.tag",
                    "code": {
                        "filePath": "src/lib/views/install.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 51,
                        "endLine": 52,
                        "references": {
                            "tag": "@nav[webpm-client]/ViewsModule.InstallView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallView.CssSelector",
                    "navPath": "@nav[webpm-client]/ViewsModule.InstallView.CssSelector",
                    "code": {
                        "filePath": "src/lib/views/install.view.ts",
                        "declaration": "static readonly CssSelector = 'webpm-InstallView'",
                        "implementation": "",
                        "startLine": 50,
                        "endLine": 51,
                        "references": {
                            "CssSelector": "@nav[webpm-client]/ViewsModule.InstallView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "constructor",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Initialize a new instance.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **eventsMgr**: Allow to provide an explicit events manager if needed.\n*  **expandedMode**: Initial expanded mode, default to  `auto`",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallView.constructor",
                    "navPath": "@nav[webpm-client]/ViewsModule.InstallView.constructor",
                    "code": {
                        "filePath": "src/lib/views/install.view.ts",
                        "declaration": "constructor(\n    params: { eventsMgr?: EventsManager; expandedMode?: ExpandedMode } = {},\n)",
                        "implementation": "constructor(\n    params: { eventsMgr?: EventsManager; expandedMode?: ExpandedMode } = {},\n) {\n    Object.assign(this, params)\n    const header = new InstallHeaderBar({\n        eventsMgr: this.eventsMgr,\n        mode$: this.mode$,\n        expandedMode: params.expandedMode,\n    })\n    this.children = [\n        header,\n        {\n            tag: 'div',\n            class: attr$({\n                source$: header.expanded$,\n                vdomMap: (expanded) =>\n                    expanded ? 'p-1 bg-light overflow-auto' : 'd-none',\n            }),\n            children: [\n                child$({\n                    source$: this.mode$,\n                    vdomMap: (mode) => {\n                        if (mode === 'logs') {\n                            return new LogsView({\n                                logEvent$: this.eventsMgr.consoleEvent$,\n                            })\n                        }\n                        return {\n                            tag: 'div',\n                            children: [\n                                new LoadingGraphEventsView(this.eventsMgr),\n                                new EsmEventsView(this.eventsMgr),\n                                new PyEventsView(this.eventsMgr),\n                                new BackendEventsView(this.eventsMgr),\n                                new CssEventsView(this.eventsMgr),\n                                child$({\n                                    source$:\n                                        this.eventsMgr.installDoneEvent$,\n                                    vdomMap: (ev) => {\n                                        const text =\n                                            ev.step === 'InstallDoneEvent'\n                                                ? 'All set, environment ready.'\n                                                : 'Error occurred during installation.'\n                                        return new FooterView({ text })\n                                    },\n                                }),\n                            ],\n                        }\n                    },\n                }),\n            ],\n        },\n    ]\n}",
                        "startLine": 65,
                        "endLine": 119,
                        "references": {
                            "InstallView": "@nav[webpm-client]/ViewsModule.InstallView",
                            "EventsManager": "@nav[webpm-client]/ViewsModule.EventsManager",
                            "ExpandedMode": "@nav[webpm-client]/ViewsModule.ExpandedMode"
                        }
                    },
                    "semantic": {
                        "role": "constructor",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/views/install.view.ts",
                "declaration": "export class InstallView implements VirtualDOM<'div'>",
                "implementation": "export class InstallView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'webpm-InstallView'\n    public readonly tag = 'div'\n    public readonly class = `${InstallView.CssSelector} border rounded w-100`\n    public readonly children: ChildrenLike\n\n    public readonly mode$ = new BehaviorSubject<'events' | 'logs'>('events')\n    public readonly eventsMgr = new EventsManager()\n\n    /**\n     * Initialize a new instance.\n     *\n     * @param params\n     * @param params.eventsMgr Allow to provide an explicit events manager if needed.\n     * @param params.expandedMode Initial expanded mode, default to `auto`\n     */\n    constructor(\n        params: { eventsMgr?: EventsManager; expandedMode?: ExpandedMode } = {},\n    ) {\n        Object.assign(this, params)\n        const header = new InstallHeaderBar({\n            eventsMgr: this.eventsMgr,\n            mode$: this.mode$,\n            expandedMode: params.expandedMode,\n        })\n        this.children = [\n            header,\n            {\n                tag: 'div',\n                class: attr$({\n                    source$: header.expanded$,\n                    vdomMap: (expanded) =>\n                        expanded ? 'p-1 bg-light overflow-auto' : 'd-none',\n                }),\n                children: [\n                    child$({\n                        source$: this.mode$,\n                        vdomMap: (mode) => {\n                            if (mode === 'logs') {\n                                return new LogsView({\n                                    logEvent$: this.eventsMgr.consoleEvent$,\n                                })\n                            }\n                            return {\n                                tag: 'div',\n                                children: [\n                                    new LoadingGraphEventsView(this.eventsMgr),\n                                    new EsmEventsView(this.eventsMgr),\n                                    new PyEventsView(this.eventsMgr),\n                                    new BackendEventsView(this.eventsMgr),\n                                    new CssEventsView(this.eventsMgr),\n                                    child$({\n                                        source$:\n                                            this.eventsMgr.installDoneEvent$,\n                                        vdomMap: (ev) => {\n                                            const text =\n                                                ev.step === 'InstallDoneEvent'\n                                                    ? 'All set, environment ready.'\n                                                    : 'Error occurred during installation.'\n                                            return new FooterView({ text })\n                                        },\n                                    }),\n                                ],\n                            }\n                        },\n                    }),\n                ],\n            },\n        ]\n    }\n\n    onEvent(ev: CdnEvent) {\n        this.eventsMgr.event$.next(ev)\n    }\n\n    toHTML(): HTMLElement {\n        return render(this)\n    }\n}",
                "startLine": 46,
                "endLine": 128,
                "references": {
                    "InstallView": "@nav[webpm-client]/ViewsModule.InstallView",
                    "EventsManager": "@nav[webpm-client]/ViewsModule.EventsManager",
                    "ExpandedMode": "@nav[webpm-client]/ViewsModule.ExpandedMode",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "BehaviorSubject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ItemView",
            "documentation": {
                "sections": [
                    {
                        "content": "Generic view for a given target (ESM module, backend, CSS resource, pyodide module, *etc.*).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ItemView",
            "navPath": "@nav[webpm-client]/ViewsModule.ItemView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ItemView.children",
                    "navPath": "@nav[webpm-client]/ViewsModule.ItemView.children",
                    "code": {
                        "filePath": "src/lib/views/common.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 78,
                        "endLine": 79,
                        "references": {
                            "children": "@nav[webpm-client]/ViewsModule.ItemView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ItemView.class",
                    "navPath": "@nav[webpm-client]/ViewsModule.ItemView.class",
                    "code": {
                        "filePath": "src/lib/views/common.view.ts",
                        "declaration": "public readonly class = `${ItemView.CssSelector} d-flex align-items-center`",
                        "implementation": "",
                        "startLine": 77,
                        "endLine": 78,
                        "references": {
                            "class": "@nav[webpm-client]/ViewsModule.ItemView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ItemView.tag",
                    "navPath": "@nav[webpm-client]/ViewsModule.ItemView.tag",
                    "code": {
                        "filePath": "src/lib/views/common.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 76,
                        "endLine": 77,
                        "references": {
                            "tag": "@nav[webpm-client]/ViewsModule.ItemView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ItemView.CssSelector",
                    "navPath": "@nav[webpm-client]/ViewsModule.ItemView.CssSelector",
                    "code": {
                        "filePath": "src/lib/views/common.view.ts",
                        "declaration": "static readonly CssSelector = 'webpm-ItemView'",
                        "implementation": "",
                        "startLine": 74,
                        "endLine": 75,
                        "references": {
                            "CssSelector": "@nav[webpm-client]/ViewsModule.ItemView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/common.view.ts",
                "declaration": "export class ItemView implements VirtualDOM<'div'>",
                "implementation": "export class ItemView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'webpm-ItemView'\n\n    public readonly tag = 'div'\n    public readonly class = `${ItemView.CssSelector} d-flex align-items-center`\n    public readonly children: ChildrenLike\n\n    constructor({\n        name,\n        topic,\n        version,\n        target,\n        phases,\n    }: {\n        name: string\n        topic: Topic\n        version?: string\n        target?: string\n        phases: Phase[]\n    }) {\n        const icons: Record<PhaseStatus, string> = {\n            started: 'webpm-pulse',\n            succeeded: 'text-success',\n            failed: 'text-danger',\n            failed401: 'fas text-danger fa-ban',\n            failed404: 'fas text-danger fa-search',\n        }\n        if (version) {\n            name += `#${version}`\n        }\n        if (target) {\n            name += `~${target}`\n        }\n        this.children = [\n            {\n                tag: 'img',\n                src: imageTopics[topic],\n                width: 25,\n            },\n            { tag: 'div', class: 'mx-2' },\n            {\n                tag: 'div',\n                innerText: name,\n            },\n            ...phases.map((phase) => {\n                return {\n                    tag: 'i' as const,\n                    class: attr$({\n                        source$: phase.source$,\n                        vdomMap: (event) => {\n                            if (\n                                event === 'failed401' ||\n                                event === 'failed404'\n                            ) {\n                                return icons[event]\n                            }\n                            return `${phase.icon} ${icons[event]}`\n                        },\n                        wrapper: (d) => `${d} mx-1`,\n                    }),\n                }\n            }),\n        ]\n    }\n}",
                "startLine": 70,
                "endLine": 138,
                "references": {
                    "ItemView": "@nav[webpm-client]/ViewsModule.ItemView",
                    "Phase": "@nav[webpm-client]/ViewsModule.Phase",
                    "Topic": "@nav[webpm-client]/MainModule.Topic",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LoadingGraphEventsView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the view gathering events w/ loading graph installation.\n\nIt uses  <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.ItemView\" semantic=\"class\">ItemView</mkapi-api-link>  with a single  `resolution`  phase.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LoadingGraphEventsView",
            "navPath": "@nav[webpm-client]/ViewsModule.LoadingGraphEventsView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingGraphEventsView.children",
                    "navPath": "@nav[webpm-client]/ViewsModule.LoadingGraphEventsView.children",
                    "code": {
                        "filePath": "src/lib/views/loading-graph.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 19,
                        "endLine": 20,
                        "references": {
                            "children": "@nav[webpm-client]/ViewsModule.LoadingGraphEventsView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingGraphEventsView.class",
                    "navPath": "@nav[webpm-client]/ViewsModule.LoadingGraphEventsView.class",
                    "code": {
                        "filePath": "src/lib/views/loading-graph.view.ts",
                        "declaration": "public readonly class = LoadingGraphEventsView.CssSelector",
                        "implementation": "",
                        "startLine": 18,
                        "endLine": 19,
                        "references": {
                            "class": "@nav[webpm-client]/ViewsModule.LoadingGraphEventsView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingGraphEventsView.tag",
                    "navPath": "@nav[webpm-client]/ViewsModule.LoadingGraphEventsView.tag",
                    "code": {
                        "filePath": "src/lib/views/loading-graph.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 17,
                        "endLine": 18,
                        "references": {
                            "tag": "@nav[webpm-client]/ViewsModule.LoadingGraphEventsView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingGraphEventsView.CssSelector",
                    "navPath": "@nav[webpm-client]/ViewsModule.LoadingGraphEventsView.CssSelector",
                    "code": {
                        "filePath": "src/lib/views/loading-graph.view.ts",
                        "declaration": "static readonly CssSelector = 'webpm-LoadingGraphEventsView'",
                        "implementation": "",
                        "startLine": 16,
                        "endLine": 17,
                        "references": {
                            "CssSelector": "@nav[webpm-client]/ViewsModule.LoadingGraphEventsView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/loading-graph.view.ts",
                "declaration": "export class LoadingGraphEventsView implements VirtualDOM<'div'>",
                "implementation": "export class LoadingGraphEventsView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'webpm-LoadingGraphEventsView'\n    public readonly tag = 'div'\n    public readonly class = LoadingGraphEventsView.CssSelector\n    public readonly children: ChildrenLike\n\n    constructor(state: EventsManager) {\n        const phases: Phase[] = [\n            {\n                source$: state.loadingGraphEvent$.pipe(\n                    map((ev) => {\n                        const step = ev.step\n                        const mapper: Record<typeof step, PhaseStatus> = {\n                            CdnLoadingGraphQueryEvent: 'started',\n                            CdnLoadingGraphResolvedEvent: 'succeeded',\n                            CdnLoadingGraphErrorEvent: 'failed',\n                        }\n                        return mapper[step]\n                    }),\n                ),\n                icon: 'fas fa-search',\n            },\n        ]\n        this.children = [\n            child$({\n                source$: state.loadingGraphEvent$.pipe(take(1)),\n                vdomMap: () =>\n                    new ItemView({\n                        name: 'Dependencies tree',\n                        topic: 'LoadingGraph',\n                        phases,\n                    }),\n            }),\n        ]\n    }\n}",
                "startLine": 12,
                "endLine": 51,
                "references": {
                    "LoadingGraphEventsView": "@nav[webpm-client]/ViewsModule.LoadingGraphEventsView",
                    "EventsManager": "@nav[webpm-client]/ViewsModule.EventsManager",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LogsView",
            "documentation": {
                "sections": [
                    {
                        "content": "Logs View.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LogsView",
            "navPath": "@nav[webpm-client]/ViewsModule.LogsView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LogsView.children",
                    "navPath": "@nav[webpm-client]/ViewsModule.LogsView.children",
                    "code": {
                        "filePath": "src/lib/views/logs.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 16,
                        "endLine": 17,
                        "references": {
                            "children": "@nav[webpm-client]/ViewsModule.LogsView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LogsView.class",
                    "navPath": "@nav[webpm-client]/ViewsModule.LogsView.class",
                    "code": {
                        "filePath": "src/lib/views/logs.view.ts",
                        "declaration": "public readonly class = `${LogsView.CssSelector} bg-dark text-light w-100 h-100 px-1 py-2 overflow-auto`",
                        "implementation": "",
                        "startLine": 15,
                        "endLine": 16,
                        "references": {
                            "class": "@nav[webpm-client]/ViewsModule.LogsView.class"
                        }
                    }
                },
                {
                    "name": "style",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The style associated with the element. Typically, for a static value:\n ```typescript\n{\n     tag: 'div',\n     style: {\n         backgroundColor: 'blue'\n     }\n}\n``` \nFor more details on hyphenated properties, see  <mkapi-ext-link href=\"/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute\">CSSAttribute</mkapi-ext-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LogsView.style",
                    "navPath": "@nav[webpm-client]/ViewsModule.LogsView.style",
                    "code": {
                        "filePath": "src/lib/views/logs.view.ts",
                        "declaration": "public readonly style = {\n        fontSize: 'medium' as const,\n        maxHeight: '25vh',\n        fontFamily: 'monospace',\n        whiteSpace: 'nowrap' as const,\n    }",
                        "implementation": "",
                        "startLine": 17,
                        "endLine": 18,
                        "references": {
                            "style": "@nav[webpm-client]/ViewsModule.LogsView.style"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LogsView.tag",
                    "navPath": "@nav[webpm-client]/ViewsModule.LogsView.tag",
                    "code": {
                        "filePath": "src/lib/views/logs.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 14,
                        "endLine": 15,
                        "references": {
                            "tag": "@nav[webpm-client]/ViewsModule.LogsView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LogsView.CssSelector",
                    "navPath": "@nav[webpm-client]/ViewsModule.LogsView.CssSelector",
                    "code": {
                        "filePath": "src/lib/views/logs.view.ts",
                        "declaration": "static readonly CssSelector = 'webpm-LogsView'",
                        "implementation": "",
                        "startLine": 13,
                        "endLine": 14,
                        "references": {
                            "CssSelector": "@nav[webpm-client]/ViewsModule.LogsView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/logs.view.ts",
                "declaration": "export class LogsView implements VirtualDOM<'div'>",
                "implementation": "export class LogsView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'webpm-LogsView'\n    public readonly tag = 'div'\n    public readonly class = `${LogsView.CssSelector} bg-dark text-light w-100 h-100 px-1 py-2 overflow-auto`\n    public readonly children: ChildrenLike\n    public readonly style = {\n        fontSize: 'medium' as const,\n        maxHeight: '25vh',\n        fontFamily: 'monospace',\n        whiteSpace: 'nowrap' as const,\n    }\n    constructor({ logEvent$ }: { logEvent$: Observable<ConsoleEvent> }) {\n        const entryView = (ev: ConsoleEvent): AnyVirtualDOM => {\n            return {\n                tag: 'div',\n                class: 'd-flex align-items-center',\n                children: [\n                    {\n                        tag: 'img',\n                        src: imageTopics[ev.topic],\n                        width: 15,\n                    },\n                    { tag: 'div', class: 'mx-1' },\n                    {\n                        tag: 'div',\n                        class: ev.level === 'Error' ? 'text-danger' : '',\n                        innerText: ev.text,\n                    },\n                ],\n            }\n        }\n        this.children = [\n            {\n                tag: 'div',\n                children: append$({\n                    policy: 'append',\n                    source$: logEvent$.pipe(map((e) => [e])),\n                    vdomMap: (ev) => entryView(ev),\n                }),\n            },\n        ]\n    }\n}",
                "startLine": 9,
                "endLine": 55,
                "references": {
                    "LogsView": "@nav[webpm-client]/ViewsModule.LogsView",
                    "ConsoleEvent": "@nav[webpm-client]/MainModule.ConsoleEvent",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyEventsView",
            "documentation": {
                "sections": [
                    {
                        "content": "Represents the view gathering events w/ pyodide installation; each event being displayed using  <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.PyModuleView\" semantic=\"class\">PyModuleView</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyEventsView",
            "navPath": "@nav[webpm-client]/ViewsModule.PyEventsView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyEventsView.children",
                    "navPath": "@nav[webpm-client]/ViewsModule.PyEventsView.children",
                    "code": {
                        "filePath": "src/lib/views/pyodide.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 15,
                        "endLine": 16,
                        "references": {
                            "children": "@nav[webpm-client]/ViewsModule.PyEventsView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyEventsView.class",
                    "navPath": "@nav[webpm-client]/ViewsModule.PyEventsView.class",
                    "code": {
                        "filePath": "src/lib/views/pyodide.view.ts",
                        "declaration": "public readonly class = PyEventsView.CssSelector",
                        "implementation": "",
                        "startLine": 14,
                        "endLine": 15,
                        "references": {
                            "class": "@nav[webpm-client]/ViewsModule.PyEventsView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyEventsView.tag",
                    "navPath": "@nav[webpm-client]/ViewsModule.PyEventsView.tag",
                    "code": {
                        "filePath": "src/lib/views/pyodide.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 13,
                        "endLine": 14,
                        "references": {
                            "tag": "@nav[webpm-client]/ViewsModule.PyEventsView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyEventsView.CssSelector",
                    "navPath": "@nav[webpm-client]/ViewsModule.PyEventsView.CssSelector",
                    "code": {
                        "filePath": "src/lib/views/pyodide.view.ts",
                        "declaration": "static readonly CssSelector = 'webpm-PyEventsView'",
                        "implementation": "",
                        "startLine": 12,
                        "endLine": 13,
                        "references": {
                            "CssSelector": "@nav[webpm-client]/ViewsModule.PyEventsView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/pyodide.view.ts",
                "declaration": "export class PyEventsView implements VirtualDOM<'div'>",
                "implementation": "export class PyEventsView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'webpm-PyEventsView'\n    public readonly tag = 'div'\n    public readonly class = PyEventsView.CssSelector\n    public readonly children: ChildrenLike\n\n    constructor(state: EventsManager) {\n        const trigger$ = state.pyRuntimeEvent$.pipe(\n            take(1),\n            map((e) => ({ name: 'Pyodide', version: e.pyodideVersion })),\n        )\n        const runtimePhases: Phase[] = [\n            {\n                source$: state.pyRuntimeEvent$.pipe(\n                    filter(\n                        (ev) =>\n                            ev.step === 'FetchPyRuntimeEvent' ||\n                            ev.step === 'FetchedPyRuntimeEvent',\n                    ),\n                    map((ev) => {\n                        return ev.step === 'FetchedPyRuntimeEvent'\n                            ? 'succeeded'\n                            : 'started'\n                    }),\n                ),\n                icon: 'fas fa-download',\n            },\n            {\n                source$: state.pyRuntimeEvent$.pipe(\n                    filter(\n                        (ev) =>\n                            ev.step === 'StartPyRuntimeEvent' ||\n                            ev.step === 'PyRuntimeReadyEvent',\n                    ),\n                    map((ev) => {\n                        return ev.step === 'PyRuntimeReadyEvent'\n                            ? 'succeeded'\n                            : 'started'\n                    }),\n                ),\n                icon: 'fas fa-play',\n            },\n        ]\n\n        this.children = [\n            child$({\n                source$: trigger$,\n                vdomMap: ({ name, version }) =>\n                    new ItemView({\n                        name,\n                        topic: 'Python',\n                        version,\n                        phases: runtimePhases,\n                    }),\n            }),\n            {\n                tag: 'div',\n                children: sync$({\n                    policy: 'sync',\n                    source$: state.pyModulesStore$,\n                    vdomMap: (name) => {\n                        return new PyModuleView({\n                            name,\n                            state,\n                        })\n                    },\n                }),\n            },\n        ]\n    }\n}",
                "startLine": 8,
                "endLine": 82,
                "references": {
                    "PyEventsView": "@nav[webpm-client]/ViewsModule.PyEventsView",
                    "EventsManager": "@nav[webpm-client]/ViewsModule.EventsManager",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyModuleView",
            "documentation": {
                "sections": [
                    {
                        "content": "The view for pyodide events targeting a specific module.\nIt uses  <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.ItemView\" semantic=\"class\">ItemView</mkapi-api-link>  with a single  `install`  phase.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyModuleView",
            "navPath": "@nav[webpm-client]/ViewsModule.PyModuleView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyModuleView.children",
                    "navPath": "@nav[webpm-client]/ViewsModule.PyModuleView.children",
                    "code": {
                        "filePath": "src/lib/views/pyodide.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 93,
                        "endLine": 94,
                        "references": {
                            "children": "@nav[webpm-client]/ViewsModule.PyModuleView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyModuleView.class",
                    "navPath": "@nav[webpm-client]/ViewsModule.PyModuleView.class",
                    "code": {
                        "filePath": "src/lib/views/pyodide.view.ts",
                        "declaration": "public readonly class = PyModuleView.CssSelector",
                        "implementation": "",
                        "startLine": 92,
                        "endLine": 93,
                        "references": {
                            "class": "@nav[webpm-client]/ViewsModule.PyModuleView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyModuleView.tag",
                    "navPath": "@nav[webpm-client]/ViewsModule.PyModuleView.tag",
                    "code": {
                        "filePath": "src/lib/views/pyodide.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 91,
                        "endLine": 92,
                        "references": {
                            "tag": "@nav[webpm-client]/ViewsModule.PyModuleView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyModuleView.CssSelector",
                    "navPath": "@nav[webpm-client]/ViewsModule.PyModuleView.CssSelector",
                    "code": {
                        "filePath": "src/lib/views/pyodide.view.ts",
                        "declaration": "static readonly CssSelector = 'webpm-PyModuleView'",
                        "implementation": "",
                        "startLine": 90,
                        "endLine": 91,
                        "references": {
                            "CssSelector": "@nav[webpm-client]/ViewsModule.PyModuleView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/pyodide.view.ts",
                "declaration": "export class PyModuleView implements VirtualDOM<'div'>",
                "implementation": "export class PyModuleView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'webpm-PyModuleView'\n    public readonly tag = 'div'\n    public readonly class = PyModuleView.CssSelector\n    public readonly children: ChildrenLike\n\n    constructor({ name, state }: { name: string; state: EventsManager }) {\n        const itemEvent$ = state.pyModuleEvent$.pipe(\n            filter((ev) => ev.name === name),\n            shareReplay({ refCount: true }),\n        )\n        const phases: Phase[] = [\n            {\n                source$: itemEvent$.pipe(\n                    map((ev) => {\n                        return ev.step === 'PyModuleLoadedEvent'\n                            ? 'succeeded'\n                            : 'started'\n                    }),\n                ),\n                icon: 'fas fa-cog',\n            },\n        ]\n        this.children = [\n            child$({\n                source$: itemEvent$,\n                vdomMap: () => {\n                    return new ItemView({ name, topic: 'Python', phases })\n                },\n            }),\n        ]\n    }\n}",
                "startLine": 86,
                "endLine": 122,
                "references": {
                    "PyModuleView": "@nav[webpm-client]/ViewsModule.PyModuleView",
                    "EventsManager": "@nav[webpm-client]/ViewsModule.EventsManager",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "RuntimeView",
            "documentation": {
                "sections": [
                    {
                        "content": "Display the current run time with installed components.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "RuntimeView",
            "navPath": "@nav[webpm-client]/ViewsModule.RuntimeView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "RuntimeView.children",
                    "navPath": "@nav[webpm-client]/ViewsModule.RuntimeView.children",
                    "code": {
                        "filePath": "src/lib/views/runtime.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 11,
                        "endLine": 12,
                        "references": {
                            "children": "@nav[webpm-client]/ViewsModule.RuntimeView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "RuntimeView.tag",
                    "navPath": "@nav[webpm-client]/ViewsModule.RuntimeView.tag",
                    "code": {
                        "filePath": "src/lib/views/runtime.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 10,
                        "endLine": 11,
                        "references": {
                            "tag": "@nav[webpm-client]/ViewsModule.RuntimeView.tag"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/runtime.view.ts",
                "declaration": "export class RuntimeView implements VirtualDOM<'div'>",
                "implementation": "export class RuntimeView implements VirtualDOM<'div'> {\n    public readonly tag = 'div'\n    public readonly children: ChildrenLike\n\n    constructor() {\n        this.children = [\n            {\n                tag: 'div',\n                class: 'w-100 text-center',\n                style: { fontSize: 'larger', fontWeight: 'bolder' },\n                innerText: `${pkgJson.name}#${pkgJson.version}`,\n            },\n            new EsmView(),\n        ]\n    }\n}",
                "startLine": 9,
                "endLine": 25,
                "references": {
                    "RuntimeView": "@nav[webpm-client]/ViewsModule.RuntimeView",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ToggleViewMode",
            "documentation": {
                "sections": [
                    {
                        "content": "Toggle button to display  `items`  or  `logs`  view within  <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.InstallView\" semantic=\"class\">InstallView</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ToggleViewMode",
            "navPath": "@nav[webpm-client]/ViewsModule.ToggleViewMode",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Children of the element.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ToggleViewMode.children",
                    "navPath": "@nav[webpm-client]/ViewsModule.ToggleViewMode.children",
                    "code": {
                        "filePath": "src/lib/views/common.view.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 15,
                        "endLine": 16,
                        "references": {
                            "children": "@nav[webpm-client]/ViewsModule.ToggleViewMode.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The class associated with the element, equivalent to the  `className`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ToggleViewMode.class",
                    "navPath": "@nav[webpm-client]/ViewsModule.ToggleViewMode.class",
                    "code": {
                        "filePath": "src/lib/views/common.view.ts",
                        "declaration": "public readonly class = `${ToggleViewMode.CssSelector} d-flex align-items-center`",
                        "implementation": "",
                        "startLine": 14,
                        "endLine": 15,
                        "references": {
                            "class": "@nav[webpm-client]/ViewsModule.ToggleViewMode.class"
                        }
                    }
                },
                {
                    "name": "style",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The style associated with the element. Typically, for a static value:\n ```typescript\n{\n     tag: 'div',\n     style: {\n         backgroundColor: 'blue'\n     }\n}\n``` \nFor more details on hyphenated properties, see  <mkapi-ext-link href=\"/apps/@rx-vdom/doc/latest?nav=/api.CSSAttribute\">CSSAttribute</mkapi-ext-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ToggleViewMode.style",
                    "navPath": "@nav[webpm-client]/ViewsModule.ToggleViewMode.style",
                    "code": {
                        "filePath": "src/lib/views/common.view.ts",
                        "declaration": "public readonly style = {\n        fontWeight: 'bolder' as const,\n    }",
                        "implementation": "",
                        "startLine": 16,
                        "endLine": 17,
                        "references": {
                            "style": "@nav[webpm-client]/ViewsModule.ToggleViewMode.style"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The tag of the element, equivalent to the  `tagName`  property of  `HTMLElement` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ToggleViewMode.tag",
                    "navPath": "@nav[webpm-client]/ViewsModule.ToggleViewMode.tag",
                    "code": {
                        "filePath": "src/lib/views/common.view.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 13,
                        "endLine": 14,
                        "references": {
                            "tag": "@nav[webpm-client]/ViewsModule.ToggleViewMode.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ToggleViewMode.CssSelector",
                    "navPath": "@nav[webpm-client]/ViewsModule.ToggleViewMode.CssSelector",
                    "code": {
                        "filePath": "src/lib/views/common.view.ts",
                        "declaration": "static readonly CssSelector = 'webpm-ToggleViewMode'",
                        "implementation": "",
                        "startLine": 12,
                        "endLine": 13,
                        "references": {
                            "CssSelector": "@nav[webpm-client]/ViewsModule.ToggleViewMode.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/common.view.ts",
                "declaration": "export class ToggleViewMode implements VirtualDOM<'div'>",
                "implementation": "export class ToggleViewMode implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static readonly CssSelector = 'webpm-ToggleViewMode'\n    public readonly tag = 'div'\n    public readonly class = `${ToggleViewMode.CssSelector} d-flex align-items-center`\n    public readonly children: ChildrenLike\n    public readonly style = {\n        fontWeight: 'bolder' as const,\n    }\n    constructor({ mode$ }: { mode$: Subject<'events' | 'logs'> }) {\n        const btn = (target: 'events' | 'logs', icon: string) => {\n            return {\n                tag: 'button' as const,\n                class: attr$({\n                    source$: mode$,\n                    vdomMap: (mode): string =>\n                        mode === target ? 'btn-dark' : 'btn-light',\n                    wrapper: (d) => `${d} btn btn-sm fas ${icon} mx-1`,\n                }),\n                onclick: () => {\n                    mode$.next(target)\n                },\n            }\n        }\n        this.children = [\n            {\n                tag: 'div',\n                class: 'd-flex align-items-center',\n                children: [\n                    btn('events', 'fa-list-ul'),\n                    btn('logs', 'fa-newspaper'),\n                ],\n            },\n        ]\n    }\n}",
                "startLine": 8,
                "endLine": 46,
                "references": {
                    "ToggleViewMode": "@nav[webpm-client]/ViewsModule.ToggleViewMode",
                    "Subject": "https://www.learnrxjs.io/learn-rxjs/subjects/subject",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "WorkerCard",
            "documentation": {
                "sections": [
                    {
                        "content": "Component representing a particular worker.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "WorkerCard",
            "navPath": "@nav[webpm-client]/ViewsModule.WorkerCard",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCard.children",
                    "navPath": "@nav[webpm-client]/ViewsModule.WorkerCard.children",
                    "code": {
                        "filePath": "src/lib/views/workers-pool.views.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 90,
                        "endLine": 91,
                        "references": {
                            "children": "@nav[webpm-client]/ViewsModule.WorkerCard.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCard.class",
                    "navPath": "@nav[webpm-client]/ViewsModule.WorkerCard.class",
                    "code": {
                        "filePath": "src/lib/views/workers-pool.views.ts",
                        "declaration": "public readonly class = `${WorkerCard.CssSelector} p-2 m-2 rounded border`",
                        "implementation": "",
                        "startLine": 76,
                        "endLine": 77,
                        "references": {
                            "class": "@nav[webpm-client]/ViewsModule.WorkerCard.class"
                        }
                    }
                },
                {
                    "name": "connectedCallback",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Lifecycle hook called just after the element has been attached to the document's DOM.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCard.connectedCallback",
                    "navPath": "@nav[webpm-client]/ViewsModule.WorkerCard.connectedCallback",
                    "code": {
                        "filePath": "src/lib/views/workers-pool.views.ts",
                        "declaration": "public readonly connectedCallback: (elem: RxHTMLElement<'div'>) => void",
                        "implementation": "",
                        "startLine": 102,
                        "endLine": 103,
                        "references": {
                            "connectedCallback": "@nav[webpm-client]/ViewsModule.WorkerCard.connectedCallback",
                            "RxHTMLElement": "/apps/@rx-vdom/doc/latest?nav=/api.RxHTMLElement"
                        }
                    }
                },
                {
                    "name": "style",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCard.style",
                    "navPath": "@nav[webpm-client]/ViewsModule.WorkerCard.style",
                    "code": {
                        "filePath": "src/lib/views/workers-pool.views.ts",
                        "declaration": "public readonly style = {\n        height: 'fit-content',\n        width: 'fit-content',\n        maxWidth: '100%',\n    }",
                        "implementation": "",
                        "startLine": 81,
                        "endLine": 82,
                        "references": {
                            "style": "@nav[webpm-client]/ViewsModule.WorkerCard.style"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCard.tag",
                    "navPath": "@nav[webpm-client]/ViewsModule.WorkerCard.tag",
                    "code": {
                        "filePath": "src/lib/views/workers-pool.views.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 72,
                        "endLine": 73,
                        "references": {
                            "tag": "@nav[webpm-client]/ViewsModule.WorkerCard.tag"
                        }
                    }
                },
                {
                    "name": "workerId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCard.workerId",
                    "navPath": "@nav[webpm-client]/ViewsModule.WorkerCard.workerId",
                    "code": {
                        "filePath": "src/lib/views/workers-pool.views.ts",
                        "declaration": "public readonly workerId: string",
                        "implementation": "",
                        "startLine": 95,
                        "endLine": 96,
                        "references": {
                            "workerId": "@nav[webpm-client]/ViewsModule.WorkerCard.workerId"
                        }
                    }
                },
                {
                    "name": "workersPool",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCard.workersPool",
                    "navPath": "@nav[webpm-client]/ViewsModule.WorkerCard.workersPool",
                    "code": {
                        "filePath": "src/lib/views/workers-pool.views.ts",
                        "declaration": "public readonly workersPool: WorkersPool",
                        "implementation": "",
                        "startLine": 100,
                        "endLine": 101,
                        "references": {
                            "workersPool": "@nav[webpm-client]/ViewsModule.WorkerCard.workersPool",
                            "WorkersPool": "@nav[webpm-client]/WorkersPoolModule.WorkersPool"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCard.CssSelector",
                    "navPath": "@nav[webpm-client]/ViewsModule.WorkerCard.CssSelector",
                    "code": {
                        "filePath": "src/lib/views/workers-pool.views.ts",
                        "declaration": "static CssSelector = 'webpm-WorkerCard'",
                        "implementation": "",
                        "startLine": 68,
                        "endLine": 69,
                        "references": {
                            "CssSelector": "@nav[webpm-client]/ViewsModule.WorkerCard.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/workers-pool.views.ts",
                "declaration": "export class WorkerCard implements VirtualDOM<'div'>",
                "implementation": "export class WorkerCard implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static CssSelector = 'webpm-WorkerCard'\n    /**\n     * @group Immutable DOM Constants\n     */\n    public readonly tag = 'div'\n    /**\n     * @group Immutable DOM Constants\n     */\n    public readonly class = `${WorkerCard.CssSelector} p-2 m-2 rounded border`\n\n    /**\n     * @group Immutable DOM Constants\n     */\n    public readonly style = {\n        height: 'fit-content',\n        width: 'fit-content',\n        maxWidth: '100%',\n    }\n\n    /**\n     * @group Immutable DOM Constants\n     */\n    public readonly children: ChildrenLike\n\n    /**\n     * @group Immutable Constants\n     */\n    public readonly workerId: string\n\n    /**\n     * @group States\n     */\n    public readonly workersPool: WorkersPool\n\n    public readonly connectedCallback: (elem: RxHTMLElement<'div'>) => void\n    constructor(params: {\n        workerId: string\n        workersPool: WorkersPool\n        cdnEvent$: Observable<CdnEvent>\n    }) {\n        Object.assign(this, params)\n        const eventsMgr = new EventsManager()\n        this.children = [\n            new WorkerCardTitleView(params),\n            new InstallView({ eventsMgr }),\n        ]\n        this.connectedCallback = (elem) => {\n            elem.ownSubscriptions(\n                params.cdnEvent$.subscribe((ev) => {\n                    eventsMgr.event$.next(ev)\n                }),\n            )\n        }\n    }\n}",
                "startLine": 64,
                "endLine": 123,
                "references": {
                    "WorkerCard": "@nav[webpm-client]/ViewsModule.WorkerCard",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent",
                    "WorkersPool": "@nav[webpm-client]/WorkersPoolModule.WorkersPool",
                    "Observable": "https://rxjs.dev/guide/observable",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "RxHTMLElement": "/apps/@rx-vdom/doc/latest?nav=/api.RxHTMLElement",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "WorkerCardTitleView",
            "documentation": {
                "sections": [
                    {
                        "content": "Component representing the title of a  <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.WorkerCard\" semantic=\"class\">WorkerCard</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "WorkerCardTitleView",
            "navPath": "@nav[webpm-client]/ViewsModule.WorkerCardTitleView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCardTitleView.children",
                    "navPath": "@nav[webpm-client]/ViewsModule.WorkerCardTitleView.children",
                    "code": {
                        "filePath": "src/lib/views/workers-pool.views.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 147,
                        "endLine": 148,
                        "references": {
                            "children": "@nav[webpm-client]/ViewsModule.WorkerCardTitleView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCardTitleView.class",
                    "navPath": "@nav[webpm-client]/ViewsModule.WorkerCardTitleView.class",
                    "code": {
                        "filePath": "src/lib/views/workers-pool.views.ts",
                        "declaration": "public readonly class = `${WorkerCardTitleView.CssSelector} d-flex align-items-center`",
                        "implementation": "",
                        "startLine": 142,
                        "endLine": 143,
                        "references": {
                            "class": "@nav[webpm-client]/ViewsModule.WorkerCardTitleView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCardTitleView.tag",
                    "navPath": "@nav[webpm-client]/ViewsModule.WorkerCardTitleView.tag",
                    "code": {
                        "filePath": "src/lib/views/workers-pool.views.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 138,
                        "endLine": 139,
                        "references": {
                            "tag": "@nav[webpm-client]/ViewsModule.WorkerCardTitleView.tag"
                        }
                    }
                },
                {
                    "name": "workerId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCardTitleView.workerId",
                    "navPath": "@nav[webpm-client]/ViewsModule.WorkerCardTitleView.workerId",
                    "code": {
                        "filePath": "src/lib/views/workers-pool.views.ts",
                        "declaration": "public readonly workerId: string",
                        "implementation": "",
                        "startLine": 152,
                        "endLine": 153,
                        "references": {
                            "workerId": "@nav[webpm-client]/ViewsModule.WorkerCardTitleView.workerId"
                        }
                    }
                },
                {
                    "name": "workersPool",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCardTitleView.workersPool",
                    "navPath": "@nav[webpm-client]/ViewsModule.WorkerCardTitleView.workersPool",
                    "code": {
                        "filePath": "src/lib/views/workers-pool.views.ts",
                        "declaration": "public readonly workersPool: WorkersPool",
                        "implementation": "",
                        "startLine": 157,
                        "endLine": 158,
                        "references": {
                            "workersPool": "@nav[webpm-client]/ViewsModule.WorkerCardTitleView.workersPool",
                            "WorkersPool": "@nav[webpm-client]/WorkersPoolModule.WorkersPool"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkerCardTitleView.CssSelector",
                    "navPath": "@nav[webpm-client]/ViewsModule.WorkerCardTitleView.CssSelector",
                    "code": {
                        "filePath": "src/lib/views/workers-pool.views.ts",
                        "declaration": "static CssSelector = 'webpm-WorkerCardTitleView'",
                        "implementation": "",
                        "startLine": 134,
                        "endLine": 135,
                        "references": {
                            "CssSelector": "@nav[webpm-client]/ViewsModule.WorkerCardTitleView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/workers-pool.views.ts",
                "declaration": "export class WorkerCardTitleView implements VirtualDOM<'div'>",
                "implementation": "export class WorkerCardTitleView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static CssSelector = 'webpm-WorkerCardTitleView'\n    /**\n     * @group Immutable DOM Constants\n     */\n    public readonly tag = 'div'\n    /**\n     * @group Immutable DOM Constants\n     */\n    public readonly class = `${WorkerCardTitleView.CssSelector} d-flex align-items-center`\n\n    /**\n     * @group Immutable DOM Constants\n     */\n    public readonly children: ChildrenLike\n\n    /**\n     * @group Immutable Constants\n     */\n    public readonly workerId: string\n\n    /**\n     * @group States\n     */\n    public readonly workersPool: WorkersPool\n\n    constructor(params: { workerId: string; workersPool: WorkersPool }) {\n        Object.assign(this, params)\n        const wp = this.workersPool\n        const classes: Record<WorkerStatus, string> = {\n            Pending: 'fa-cloud-download-alt',\n            Created: '',\n            Busy: 'fa-play',\n        }\n        const statusWorker$ = combineLatest([\n            wp.workers$.pipe(map((workers) => Object.keys(workers))),\n            wp.busyWorkers$,\n        ]).pipe(\n            map(([ready, busy]) => {\n                const readyStatus = ready.includes(this.workerId)\n                    ? 'Created'\n                    : 'Pending'\n                return busy.includes(this.workerId) ? 'Busy' : readyStatus\n            }),\n        )\n        this.children = [\n            {\n                tag: 'div',\n                style: {\n                    fontWeight: 'bolder',\n                    fontSize: 'larger',\n                },\n                innerText: `Worker ${this.workerId}`,\n            },\n            {\n                tag: 'div',\n                class: {\n                    source$: statusWorker$,\n                    vdomMap: (status: WorkerStatus): string => classes[status],\n                    wrapper: (d: string) =>\n                        `fas ${d} text-success fa-fade mx-2`,\n                },\n            },\n        ]\n    }\n}",
                "startLine": 130,
                "endLine": 199,
                "references": {
                    "WorkerCardTitleView": "@nav[webpm-client]/ViewsModule.WorkerCardTitleView",
                    "WorkersPool": "@nav[webpm-client]/WorkersPoolModule.WorkersPool",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "WorkersPoolView",
            "documentation": {
                "sections": [
                    {
                        "content": "Displays installation progress in  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule.WorkersPool\" semantic=\"class\">WorkersPoolModule.WorkersPool</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "WorkersPoolView",
            "navPath": "@nav[webpm-client]/ViewsModule.WorkersPoolView",
            "attributes": [
                {
                    "name": "children",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPoolView.children",
                    "navPath": "@nav[webpm-client]/ViewsModule.WorkersPoolView.children",
                    "code": {
                        "filePath": "src/lib/views/workers-pool.views.ts",
                        "declaration": "public readonly children: ChildrenLike",
                        "implementation": "",
                        "startLine": 31,
                        "endLine": 32,
                        "references": {
                            "children": "@nav[webpm-client]/ViewsModule.WorkersPoolView.children",
                            "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike"
                        }
                    }
                },
                {
                    "name": "class",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPoolView.class",
                    "navPath": "@nav[webpm-client]/ViewsModule.WorkersPoolView.class",
                    "code": {
                        "filePath": "src/lib/views/workers-pool.views.ts",
                        "declaration": "public class = `${WorkersPoolView.CssSelector} w-100 h-100 d-flex flex-column`",
                        "implementation": "",
                        "startLine": 26,
                        "endLine": 27,
                        "references": {
                            "class": "@nav[webpm-client]/ViewsModule.WorkersPoolView.class"
                        }
                    }
                },
                {
                    "name": "tag",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPoolView.tag",
                    "navPath": "@nav[webpm-client]/ViewsModule.WorkersPoolView.tag",
                    "code": {
                        "filePath": "src/lib/views/workers-pool.views.ts",
                        "declaration": "public readonly tag = 'div'",
                        "implementation": "",
                        "startLine": 22,
                        "endLine": 23,
                        "references": {
                            "tag": "@nav[webpm-client]/ViewsModule.WorkersPoolView.tag"
                        }
                    }
                },
                {
                    "name": "CssSelector",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Component's class name for CSS query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "WorkersPoolView.CssSelector",
                    "navPath": "@nav[webpm-client]/ViewsModule.WorkersPoolView.CssSelector",
                    "code": {
                        "filePath": "src/lib/views/workers-pool.views.ts",
                        "declaration": "static CssSelector = 'webpm-WorkersPoolView'",
                        "implementation": "",
                        "startLine": 17,
                        "endLine": 18,
                        "references": {
                            "CssSelector": "@nav[webpm-client]/ViewsModule.WorkersPoolView.CssSelector"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/workers-pool.views.ts",
                "declaration": "export class WorkersPoolView implements VirtualDOM<'div'>",
                "implementation": "export class WorkersPoolView implements VirtualDOM<'div'> {\n    /**\n     * Component's class name for CSS query.\n     */\n    static CssSelector = 'webpm-WorkersPoolView'\n\n    /**\n     * @group Immutable DOM Constants\n     */\n    public readonly tag = 'div'\n    /**\n     * @group Immutable DOM Constants\n     */\n    public class = `${WorkersPoolView.CssSelector} w-100 h-100 d-flex flex-column`\n\n    /**\n     * @group Immutable DOM Constants\n     */\n    public readonly children: ChildrenLike\n\n    constructor(params: { workersPool: WorkersPool }) {\n        const replayedEvents$ = params.workersPool.cdnEvent$.pipe(\n            shareReplay({ refCount: true }),\n        )\n        this.children = [\n            {\n                tag: 'div',\n                class: 'w-100 d-flex flex-grow-1 p-2 flex-wrap overflow-auto',\n                children: sync$({\n                    policy: 'sync',\n                    source$: params.workersPool.startedWorkers$,\n                    vdomMap: (workerId: string) => {\n                        return new WorkerCard({\n                            workerId,\n                            workersPool: params.workersPool,\n                            cdnEvent$: replayedEvents$.pipe(\n                                filter((ev) => ev.workerId === workerId),\n                            ),\n                        })\n                    },\n                }),\n            },\n        ]\n    }\n}",
                "startLine": 13,
                "endLine": 58,
                "references": {
                    "WorkersPoolView": "@nav[webpm-client]/ViewsModule.WorkersPoolView",
                    "WorkersPool": "@nav[webpm-client]/WorkersPoolModule.WorkersPool",
                    "ChildrenLike": "/apps/@rx-vdom/doc/latest?nav=/api.ChildrenLike",
                    "VirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.VirtualDOM"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Dependencies",
            "documentation": {
                "sections": [
                    {
                        "content": "Dependencies of this sub-module (set by the main module of the library).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Dependencies",
            "navPath": "@nav[webpm-client]/ViewsModule.Dependencies",
            "attributes": [
                {
                    "name": "webpm",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Point to the main module instance.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Dependencies.webpm",
                    "navPath": "@nav[webpm-client]/ViewsModule.Dependencies.webpm",
                    "code": {
                        "filePath": "src/lib/views/index.ts",
                        "declaration": "webpm?: typeof WebPM",
                        "implementation": "",
                        "startLine": 47,
                        "endLine": 48,
                        "references": {
                            "webpm": "@nav[webpm-client]/ViewsModule.Dependencies.webpm"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/index.ts",
                "declaration": "Dependencies: Dependencies = {}",
                "implementation": "",
                "startLine": 43,
                "endLine": 44,
                "references": {
                    "Dependencies": "@nav[webpm-client]/ViewsModule.Dependencies"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "DoneEvents",
            "documentation": {
                "sections": [
                    {
                        "content": "<mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.doneEvents\" semantic=\"global\">doneEvents</mkapi-api-link>  as type union of  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.AllEvents\" semantic=\"interface\">AllEvents</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DoneEvents",
            "navPath": "@nav[webpm-client]/ViewsModule.DoneEvents",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/events-manager.ts",
                "declaration": "export type DoneEvents = AllEvents[DoneEventType]",
                "implementation": "",
                "startLine": 90,
                "endLine": 91,
                "references": {
                    "DoneEvents": "@nav[webpm-client]/ViewsModule.DoneEvents",
                    "DoneEventType": "@nav[webpm-client]/ViewsModule.DoneEventType",
                    "AllEvents": "@nav[webpm-client]/MainModule.AllEvents"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "DoneEventType",
            "documentation": {
                "sections": [
                    {
                        "content": "<mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.doneEvents\" semantic=\"global\">doneEvents</mkapi-api-link>  as type literal union.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DoneEventType",
            "navPath": "@nav[webpm-client]/ViewsModule.DoneEventType",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/events-manager.ts",
                "declaration": "export type DoneEventType = (typeof doneEvents)[number]",
                "implementation": "",
                "startLine": 86,
                "endLine": 87,
                "references": {
                    "DoneEventType": "@nav[webpm-client]/ViewsModule.DoneEventType",
                    "doneEvents": "@nav[webpm-client]/ViewsModule.doneEvents"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ExpandedMode",
            "documentation": {
                "sections": [
                    {
                        "content": "Initial expanded mode for  <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.InstallView\" semantic=\"class\">InstallView</mkapi-api-link>  widget.\n\nThe value  `auto`  means expanded until the installation finished successfully (with 1s delay).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ExpandedMode",
            "navPath": "@nav[webpm-client]/ViewsModule.ExpandedMode",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/install.view.ts",
                "declaration": "export type ExpandedMode = 'auto' | 'expanded' | 'collapsed'",
                "implementation": "",
                "startLine": 26,
                "endLine": 27,
                "references": {
                    "ExpandedMode": "@nav[webpm-client]/ViewsModule.ExpandedMode"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyModuleEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "<mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.pyModuleEvents\" semantic=\"global\">pyModuleEvents</mkapi-api-link>  as type union of  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.AllEvents\" semantic=\"interface\">AllEvents</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyModuleEvent",
            "navPath": "@nav[webpm-client]/ViewsModule.PyModuleEvent",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/events-manager.ts",
                "declaration": "export type PyModuleEvent = AllEvents[PyModuleEventType]",
                "implementation": "",
                "startLine": 37,
                "endLine": 38,
                "references": {
                    "PyModuleEvent": "@nav[webpm-client]/ViewsModule.PyModuleEvent",
                    "PyModuleEventType": "@nav[webpm-client]/ViewsModule.PyModuleEventType",
                    "AllEvents": "@nav[webpm-client]/MainModule.AllEvents"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyModuleEventType",
            "documentation": {
                "sections": [
                    {
                        "content": "<mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.pyModuleEvents\" semantic=\"global\">pyModuleEvents</mkapi-api-link>  as type literal union.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyModuleEventType",
            "navPath": "@nav[webpm-client]/ViewsModule.PyModuleEventType",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/events-manager.ts",
                "declaration": "export type PyModuleEventType = (typeof pyModuleEvents)[number]",
                "implementation": "",
                "startLine": 33,
                "endLine": 34,
                "references": {
                    "PyModuleEventType": "@nav[webpm-client]/ViewsModule.PyModuleEventType",
                    "pyModuleEvents": "@nav[webpm-client]/ViewsModule.pyModuleEvents"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyRuntimeEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "<mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.pyPyRuntimeEvents\" semantic=\"global\">pyPyRuntimeEvents</mkapi-api-link>  as type union of  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.AllEvents\" semantic=\"interface\">AllEvents</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyRuntimeEvent",
            "navPath": "@nav[webpm-client]/ViewsModule.PyRuntimeEvent",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/events-manager.ts",
                "declaration": "export type PyRuntimeEvent = AllEvents[PyRuntimeEventType]",
                "implementation": "",
                "startLine": 63,
                "endLine": 64,
                "references": {
                    "PyRuntimeEvent": "@nav[webpm-client]/ViewsModule.PyRuntimeEvent",
                    "PyRuntimeEventType": "@nav[webpm-client]/ViewsModule.PyRuntimeEventType",
                    "AllEvents": "@nav[webpm-client]/MainModule.AllEvents"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyRuntimeEventType",
            "documentation": {
                "sections": [
                    {
                        "content": "<mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.pyModuleEvents\" semantic=\"global\">pyModuleEvents</mkapi-api-link>  as type literal union.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyRuntimeEventType",
            "navPath": "@nav[webpm-client]/ViewsModule.PyRuntimeEventType",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/views/events-manager.ts",
                "declaration": "export type PyRuntimeEventType = (typeof pyPyRuntimeEvents)[number]",
                "implementation": "",
                "startLine": 58,
                "endLine": 59,
                "references": {
                    "PyRuntimeEventType": "@nav[webpm-client]/ViewsModule.PyRuntimeEventType",
                    "pyPyRuntimeEvents": "@nav[webpm-client]/ViewsModule.pyPyRuntimeEvents"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        }
    ],
    "callables": [
        {
            "name": "installWithUI",
            "documentation": {
                "sections": [
                    {
                        "content": "Installs dependencies while displaying a real-time installation progress UI.\n\n**Functionality Overview:**\n- Creates an  <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.InstallView\" semantic=\"class\">InstallView</mkapi-api-link>  to visualize and respond to  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.CdnEvent\" semantic=\"interface\">MainModule.CdnEvent</mkapi-api-link>  updates.\n- Calls the user-provided  `display`  callback with the generated view.\n  - The consumer is responsible for inserting this view into the DOM,\n    optionally converting it into a standard  `HTMLElement`  using  <mkapi-ext-link href=\"/apps/@rx-vdom/doc/latest?nav=/api.render\">rx-vdom.render</mkapi-ext-link> .\n- Invokes  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.install\" semantic=\"function\">MainModule.install</mkapi-api-link> , forwarding the provided  `inputs`  argument.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **inputs**: The standard installation inputs, extended with a  `display`  attribute.\n*  **display**: A callback that receives the generated view (as a VirtualDOM)\n  before the installation process starts.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "A Promise resolving to an object containing the installed modules.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "installWithUI",
            "navPath": "@nav[webpm-client]/ViewsModule.installWithUI",
            "code": {
                "filePath": "src/lib/views/index.ts",
                "declaration": "export function installWithUI(\n    inputs: InstallInputs & { display: (v: AnyVirtualDOM) => void },\n)",
                "implementation": "export function installWithUI(\n    inputs: InstallInputs & { display: (v: AnyVirtualDOM) => void },\n) {\n    if (!Dependencies.webpm) {\n        throw Error(\n            \"The webpm's `Views` module should be installed using `webpm.installViewsModule`\",\n        )\n    }\n    const view = new InstallView()\n    inputs.display(view)\n    return Dependencies.webpm.install({\n        ...inputs,\n        onEvent: (ev) => {\n            if (inputs.onEvent) {\n                inputs.onEvent(ev)\n            }\n            view.onEvent(ev)\n        },\n    })\n}",
                "startLine": 69,
                "endLine": 89,
                "references": {
                    "installWithUI": "@nav[webpm-client]/ViewsModule.installWithUI",
                    "InstallInputs": "@nav[webpm-client]/MainModule.InstallInputs",
                    "AnyVirtualDOM": "/apps/@rx-vdom/doc/latest?nav=/api.AnyVirtualDOM"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "isConsoleEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Type guard for  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.ConsoleEvent\" semantic=\"class\">ConsoleEvent</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "isConsoleEvent",
            "navPath": "@nav[webpm-client]/ViewsModule.isConsoleEvent",
            "code": {
                "filePath": "src/lib/views/events-manager.ts",
                "declaration": "export function isConsoleEvent(event: CdnEvent): event is ConsoleEvent",
                "implementation": "export function isConsoleEvent(event: CdnEvent): event is ConsoleEvent {\n    return event.step === 'ConsoleEvent'\n}",
                "startLine": 75,
                "endLine": 78,
                "references": {
                    "isConsoleEvent": "@nav[webpm-client]/ViewsModule.isConsoleEvent",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent",
                    "ConsoleEvent": "@nav[webpm-client]/MainModule.ConsoleEvent"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "isInstallDoneEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Type guard for  <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.DoneEvents\" semantic=\"type-alias\">DoneEvents</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "isInstallDoneEvent",
            "navPath": "@nav[webpm-client]/ViewsModule.isInstallDoneEvent",
            "code": {
                "filePath": "src/lib/views/events-manager.ts",
                "declaration": "export function isInstallDoneEvent(event: CdnEvent): event is DoneEvents",
                "implementation": "export function isInstallDoneEvent(event: CdnEvent): event is DoneEvents {\n    return doneEvents.includes(event.step as DoneEventType)\n}",
                "startLine": 95,
                "endLine": 98,
                "references": {
                    "isInstallDoneEvent": "@nav[webpm-client]/ViewsModule.isInstallDoneEvent",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent",
                    "DoneEvents": "@nav[webpm-client]/ViewsModule.DoneEvents"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "isPyRuntimeEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Type guard for  <mkapi-api-link nav=\"@nav[webpm-client]/ViewsModule.PyRuntimeEvent\" semantic=\"type-alias\">PyRuntimeEvent</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "isPyRuntimeEvent",
            "navPath": "@nav[webpm-client]/ViewsModule.isPyRuntimeEvent",
            "code": {
                "filePath": "src/lib/views/events-manager.ts",
                "declaration": "export function isPyRuntimeEvent(event: CdnEvent): event is PyRuntimeEvent",
                "implementation": "export function isPyRuntimeEvent(event: CdnEvent): event is PyRuntimeEvent {\n    return pyPyRuntimeEvents.includes(event.step as PyRuntimeEventType)\n}",
                "startLine": 68,
                "endLine": 71,
                "references": {
                    "isPyRuntimeEvent": "@nav[webpm-client]/ViewsModule.isPyRuntimeEvent",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent",
                    "PyRuntimeEvent": "@nav[webpm-client]/ViewsModule.PyRuntimeEvent"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        }
    ],
    "files": [
        {
            "name": "backend.view.ts",
            "path": "src/lib/views/backend.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "css.view.ts",
            "path": "src/lib/views/css.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "esm.view.ts",
            "path": "src/lib/views/esm.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "events-manager.ts",
            "path": "src/lib/views/events-manager.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "install.view.ts",
            "path": "src/lib/views/install.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "common.view.ts",
            "path": "src/lib/views/common.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "loading-graph.view.ts",
            "path": "src/lib/views/loading-graph.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "logs.view.ts",
            "path": "src/lib/views/logs.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "pyodide.view.ts",
            "path": "src/lib/views/pyodide.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "runtime.view.ts",
            "path": "src/lib/views/runtime.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "workers-pool.views.ts",
            "path": "src/lib/views/workers-pool.views.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "index.ts",
            "path": "src/lib/views/index.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "This module provides UI components for visualizing installed resources and tracking real-time\ninstallation progress.\n\n<note level=\"warning\">\nThis module is **not included by default** in the main library.\nIt must be explicitly installed using .\n</note>\n\n\nKey components include:\n- : A convenient wrapper around  that integrates a visual progress\n  indicator.\n- : Displays a snapshot of currently installed resources.\n- : Provides a dynamic visualization of a .\n\nAdditionally, this module offers components for building **custom views**, allowing tailored\nmonitoring and interaction with installed resources.",
                        "contentType": "markdown"
                    }
                ]
            }
        }
    ],
    "children": [],
    "semantic": {
        "role": "module",
        "labels": [],
        "attributes": {},
        "relations": {}
    }
}
