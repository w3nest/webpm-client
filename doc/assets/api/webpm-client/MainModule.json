{
    "name": "MainModule",
    "documentation": {
        "sections": [
            {
                "content": "The main module of this library is responsible for resource installation within the main thread of the browser,\nusing the  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.install\" semantic=\"function\">install</mkapi-api-link>  function.",
                "contentType": "markdown",
                "semantic": {
                    "role": "",
                    "labels": [],
                    "attributes": {},
                    "relations": {}
                }
            }
        ]
    },
    "path": "webpm-client/MainModule",
    "navPath": "@nav[webpm-client]",
    "attributes": [
        {
            "name": "backendEventTypes",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "Events related to backend installation.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "backendEventTypes",
            "navPath": "@nav[webpm-client]/MainModule.backendEventTypes",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "backendEventTypes = [\n    'DownloadBackendEvent',\n    'InstallBackendEvent',\n    'StartBackendEvent',\n    'BackendErrorEvent',\n] as const",
                "implementation": "",
                "startLine": 159,
                "endLine": 160,
                "references": {
                    "backendEventTypes": "@nav[webpm-client]/MainModule.backendEventTypes"
                }
            }
        },
        {
            "name": "cssEventTypes",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "Events related to CSS installation.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "cssEventTypes",
            "navPath": "@nav[webpm-client]/MainModule.cssEventTypes",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "cssEventTypes = [\n    'CssLoadingEvent',\n    'CssParsedEvent',\n    'UnauthorizedEvent',\n    'UrlNotFoundEvent',\n] as const",
                "implementation": "",
                "startLine": 107,
                "endLine": 108,
                "references": {
                    "cssEventTypes": "@nav[webpm-client]/MainModule.cssEventTypes"
                }
            }
        },
        {
            "name": "defaultEsmInput",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "Default configuration values for ESM modules installation, excluding the  `modules`  list.\n\nThis constant provides a base  `EsmInputs`  object with sensible defaults for all optional fields when\nan installation using  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.LightLibraryWithAliasQueryString\" semantic=\"type-alias\">LightLibraryWithAliasQueryString</mkapi-api-link>  is triggered.\n\n### Default Values (see  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.EsmInputs\" semantic=\"interface\">EsmInputs</mkapi-api-link> ):\n\n-  `scripts` :  `[]`  — No additional standalone scripts are loaded.\n-  `aliases` :  `{}`  — No custom aliasing of modules.\n-  `usingDependencies` :  `[]`  — All dependencies are resolved from the natural loading graph unless specified.\n-  `modulesSideEffects` :  `{}`  — No side effects are triggered during module loading.\n-  `autoUnwrapDefault` :  `true`  — Modules with only a default export are unwrapped automatically.\n\nThis configuration is useful when you want to ensure consistent behavior across multiple installations\nwhile maintaining flexibility to override module-specific settings.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "defaultEsmInput",
            "navPath": "@nav[webpm-client]/MainModule.defaultEsmInput",
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "defaultEsmInput: Omit<EsmInputs, 'modules'> = {\n    scripts: [],\n    aliases: {},\n    usingDependencies: [],\n    modulesSideEffects: {},\n    autoUnwrapDefault: true,\n}",
                "implementation": "",
                "startLine": 94,
                "endLine": 95,
                "references": {
                    "defaultEsmInput": "@nav[webpm-client]/MainModule.defaultEsmInput",
                    "EsmInputs": "@nav[webpm-client]/MainModule.EsmInputs"
                }
            }
        },
        {
            "name": "errorEventTypes",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "Error events.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "errorEventTypes",
            "navPath": "@nav[webpm-client]/MainModule.errorEventTypes",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "errorEventTypes = [\n    'UnauthorizedEvent',\n    'UrlNotFoundEvent',\n    'ParseErrorEvent',\n    'PyModuleErrorEvent',\n    'BackendErrorEvent',\n    'InstallErrorEvent',\n    'CdnLoadingGraphErrorEvent',\n] as const",
                "implementation": "",
                "startLine": 204,
                "endLine": 205,
                "references": {
                    "errorEventTypes": "@nav[webpm-client]/MainModule.errorEventTypes"
                }
            }
        },
        {
            "name": "esmEventTypes",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "Events related to CSS installation.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "esmEventTypes",
            "navPath": "@nav[webpm-client]/MainModule.esmEventTypes",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "esmEventTypes = [\n    'StartEvent',\n    'SourceLoadingEvent',\n    'SourceLoadedEvent',\n    'SourceParsedEvent',\n    'UnauthorizedEvent',\n    'UrlNotFoundEvent',\n    'ParseErrorEvent',\n] as const",
                "implementation": "",
                "startLine": 80,
                "endLine": 81,
                "references": {
                    "esmEventTypes": "@nav[webpm-client]/MainModule.esmEventTypes"
                }
            }
        },
        {
            "name": "eventTypes",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "All events.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "eventTypes",
            "navPath": "@nav[webpm-client]/MainModule.eventTypes",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "eventTypes = [\n    'CdnMessageEvent',\n    'StartInstallEvent',\n    'InstallDoneEvent',\n    'InstallErrorEvent',\n    'ConsoleEvent',\n    ...loadingGraphEventTypes,\n    ...cssEventTypes,\n    ...esmEventTypes,\n    ...pyEventTypes,\n    ...backendEventTypes,\n] as const",
                "implementation": "",
                "startLine": 183,
                "endLine": 184,
                "references": {
                    "eventTypes": "@nav[webpm-client]/MainModule.eventTypes"
                }
            }
        },
        {
            "name": "loadingGraphEventTypes",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "Events related to loading graph resolution.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "loadingGraphEventTypes",
            "navPath": "@nav[webpm-client]/MainModule.loadingGraphEventTypes",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "loadingGraphEventTypes = [\n    'CdnLoadingGraphQueryEvent',\n    'CdnLoadingGraphResolvedEvent',\n    'CdnLoadingGraphErrorEvent',\n] as const",
                "implementation": "",
                "startLine": 59,
                "endLine": 60,
                "references": {
                    "loadingGraphEventTypes": "@nav[webpm-client]/MainModule.loadingGraphEventTypes"
                }
            }
        },
        {
            "name": "pyEventTypes",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "Events related to pyodide installation.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "pyEventTypes",
            "navPath": "@nav[webpm-client]/MainModule.pyEventTypes",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "pyEventTypes = [\n    'FetchPyRuntimeEvent',\n    'FetchedPyRuntimeEvent',\n    'StartPyRuntimeEvent',\n    'PyRuntimeReadyEvent',\n    'StartPyEnvironmentInstallEvent',\n    'InstallPyModuleEvent',\n    'PyModuleLoadedEvent',\n    'PyModuleErrorEvent',\n    'PyEnvironmentReadyEvent',\n    'PyEnvironmentErrorEvent',\n] as const",
                "implementation": "",
                "startLine": 131,
                "endLine": 132,
                "references": {
                    "pyEventTypes": "@nav[webpm-client]/MainModule.pyEventTypes"
                }
            }
        }
    ],
    "types": [
        {
            "name": "BackendErrorEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Events emitted when a backend error has been caught.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BackendErrorEvent",
            "navPath": "@nav[webpm-client]/MainModule.BackendErrorEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.BackendEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 536,
                        "endLine": 537,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.BackendEvent.id",
                            "CdnEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.BackendEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status: 'Pending' | 'Failed'",
                        "implementation": "",
                        "startLine": 538,
                        "endLine": 539,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.BackendEvent.status",
                            "CdnEvent.status": "@nav[webpm-client]/MainModule.CdnEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.BackendEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step:\n        | 'DownloadBackendEvent'\n        | 'InstallBackendEvent'\n        | 'StartBackendEvent'\n        | 'BackendErrorEvent'",
                        "implementation": "",
                        "startLine": 539,
                        "endLine": 540,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.BackendEvent.step",
                            "CdnEvent.step": "@nav[webpm-client]/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.BackendEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 537,
                        "endLine": 538,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.BackendEvent.text",
                            "CdnEvent.text": "@nav[webpm-client]/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class BackendErrorEvent extends BackendEvent",
                "implementation": "export class BackendErrorEvent extends BackendEvent {\n    public readonly detail: string\n    constructor(params: {\n        name: string\n        version: string\n        detail: string\n        event: string\n    }) {\n        super(\n            'BackendErrorEvent',\n            params.name,\n            params.version,\n            params.detail,\n            params.event,\n        )\n        this.detail = params.detail\n    }\n}",
                "startLine": 628,
                "endLine": 646,
                "references": {
                    "BackendErrorEvent": "@nav[webpm-client]/MainModule.BackendErrorEvent",
                    "BackendEvent.constructor": "@nav[webpm-client]/MainModule.BackendEvent.constructor",
                    "BackendEvent.event": "@nav[webpm-client]/MainModule.BackendEvent.event",
                    "BackendEvent.id": "@nav[webpm-client]/MainModule.BackendEvent.id",
                    "BackendEvent.name": "@nav[webpm-client]/MainModule.BackendEvent.name",
                    "BackendEvent.status": "@nav[webpm-client]/MainModule.BackendEvent.status",
                    "BackendEvent.step": "@nav[webpm-client]/MainModule.BackendEvent.step",
                    "BackendEvent.text": "@nav[webpm-client]/MainModule.BackendEvent.text",
                    "BackendEvent.title": "@nav[webpm-client]/MainModule.BackendEvent.title",
                    "BackendEvent.version": "@nav[webpm-client]/MainModule.BackendEvent.version",
                    "BackendEvent": "@nav[webpm-client]/MainModule.BackendEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "BackendEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Base class for events related to backend.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BackendEvent",
            "navPath": "@nav[webpm-client]/MainModule.BackendEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.BackendEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 536,
                        "endLine": 537,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.BackendEvent.id",
                            "CdnEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.BackendEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status: 'Pending' | 'Failed'",
                        "implementation": "",
                        "startLine": 538,
                        "endLine": 539,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.BackendEvent.status",
                            "CdnEvent.status": "@nav[webpm-client]/MainModule.CdnEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.BackendEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step:\n        | 'DownloadBackendEvent'\n        | 'InstallBackendEvent'\n        | 'StartBackendEvent'\n        | 'BackendErrorEvent'",
                        "implementation": "",
                        "startLine": 539,
                        "endLine": 540,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.BackendEvent.step",
                            "CdnEvent.step": "@nav[webpm-client]/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.BackendEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 537,
                        "endLine": 538,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.BackendEvent.text",
                            "CdnEvent.text": "@nav[webpm-client]/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class BackendEvent implements CdnEvent",
                "implementation": "export class BackendEvent implements CdnEvent {\n    public readonly id: string\n    public readonly text: string\n    public readonly status: 'Pending' | 'Failed'\n    public readonly step:\n        | 'DownloadBackendEvent'\n        | 'InstallBackendEvent'\n        | 'StartBackendEvent'\n        | 'BackendErrorEvent'\n    public readonly name: string\n    public readonly version: string\n    public readonly title: string\n    public readonly event: string\n\n    constructor(\n        step:\n            | 'DownloadBackendEvent'\n            | 'InstallBackendEvent'\n            | 'StartBackendEvent'\n            | 'BackendErrorEvent',\n        name: string,\n        version: string,\n        title: string,\n        event: string,\n    ) {\n        this.id = `${name}_${version.replace('.', '-')}`\n        this.text = `${name}#${version}: ${title}`\n        this.status = event === 'failed' ? 'Failed' : 'Pending'\n        Object.assign(this, { step, name, version, title, event })\n    }\n}",
                "startLine": 535,
                "endLine": 566,
                "references": {
                    "BackendEvent": "@nav[webpm-client]/MainModule.BackendEvent",
                    "CdnEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id",
                    "CdnEvent.status": "@nav[webpm-client]/MainModule.CdnEvent.status",
                    "CdnEvent.step": "@nav[webpm-client]/MainModule.CdnEvent.step",
                    "CdnEvent.text": "@nav[webpm-client]/MainModule.CdnEvent.text",
                    "DownloadBackendEvent": "@nav[webpm-client]/MainModule.DownloadBackendEvent",
                    "InstallBackendEvent": "@nav[webpm-client]/MainModule.InstallBackendEvent",
                    "StartBackendEvent": "@nav[webpm-client]/MainModule.StartBackendEvent",
                    "BackendErrorEvent": "@nav[webpm-client]/MainModule.BackendErrorEvent",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "BackendException",
            "documentation": {
                "sections": [
                    {
                        "content": "Errors related to backends installation (download, install or start).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BackendException",
            "navPath": "@nav[webpm-client]/MainModule.BackendException",
            "attributes": [
                {
                    "name": "stackTraceLimit",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The  `Error.stackTraceLimit`  property specifies the number of stack frames\ncollected by a stack trace (whether generated by  `new Error().stack`  or\n `Error.captureStackTrace(obj)` ).\n\nThe default value is  `10`  but may be set to any valid JavaScript number. Changes\nwill affect any stack trace captured _after_ the value has been changed.\n\nIf set to a non-number value, or set to a negative number, stack traces will\nnot capture any frames.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnError.stackTraceLimit",
                    "navPath": "@nav[webpm-client]/MainModule.CdnError.stackTraceLimit",
                    "code": {
                        "filePath": "",
                        "declaration": "",
                        "implementation": "",
                        "startLine": 1,
                        "endLine": 2,
                        "references": {}
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/errors.models.ts",
                "declaration": "export class BackendException extends CdnError",
                "implementation": "export class BackendException extends CdnError {\n    static exceptionType = 'DownloadBackendFailed'\n    public readonly name: string\n    public readonly version: string\n    public readonly detail: string\n    constructor(params: { name: string; version: string; detail: string }) {\n        super()\n        Object.assign(this, params)\n    }\n}",
                "startLine": 174,
                "endLine": 184,
                "references": {
                    "BackendException": "@nav[webpm-client]/MainModule.BackendException",
                    "CdnError.constructor": "@nav[webpm-client]/MainModule.CdnError.constructor",
                    "CdnError.message": "@nav[webpm-client]/MainModule.CdnError.message",
                    "CdnError.name": "@nav[webpm-client]/MainModule.CdnError.name",
                    "CdnError.stack": "@nav[webpm-client]/MainModule.CdnError.stack",
                    "CdnError.exceptionType": "@nav[webpm-client]/MainModule.CdnError.exceptionType",
                    "CdnError.stackTraceLimit": "@nav[webpm-client]/MainModule.CdnError.stackTraceLimit",
                    "CdnError.captureStackTrace": "@nav[webpm-client]/MainModule.CdnError.captureStackTrace",
                    "CdnError.prepareStackTrace": "@nav[webpm-client]/MainModule.CdnError.prepareStackTrace",
                    "CdnError": "@nav[webpm-client]/MainModule.CdnError"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CdnError",
            "documentation": {
                "sections": [
                    {
                        "content": "Base class of Errors.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CdnError",
            "navPath": "@nav[webpm-client]/MainModule.CdnError",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/errors.models.ts",
                "declaration": "export class CdnError extends Error",
                "implementation": "export class CdnError extends Error {\n    static exceptionType = 'CdnError'\n}",
                "startLine": 6,
                "endLine": 9,
                "references": {
                    "CdnError": "@nav[webpm-client]/MainModule.CdnError",
                    "LocalYouwolRequired": "@nav[webpm-client]/MainModule.LocalYouwolRequired",
                    "LoadingGraphError": "@nav[webpm-client]/MainModule.LoadingGraphError",
                    "Unauthorized": "@nav[webpm-client]/MainModule.Unauthorized",
                    "UrlNotFound": "@nav[webpm-client]/MainModule.UrlNotFound",
                    "FetchErrors": "@nav[webpm-client]/MainModule.FetchErrors",
                    "SourceParsingFailed": "@nav[webpm-client]/MainModule.SourceParsingFailed",
                    "BackendException": "@nav[webpm-client]/MainModule.BackendException"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CdnLoadingGraphErrorEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when an  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.LoadingGraphError\" semantic=\"class\">LoadingGraphError</mkapi-api-link>  error occurred.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CdnLoadingGraphErrorEvent",
            "navPath": "@nav[webpm-client]/MainModule.CdnLoadingGraphErrorEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphErrorEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.CdnLoadingGraphErrorEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id = 'loading-graph'",
                        "implementation": "",
                        "startLine": 505,
                        "endLine": 506,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.CdnLoadingGraphErrorEvent.id",
                            "CdnEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphErrorEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.CdnLoadingGraphErrorEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Failed'",
                        "implementation": "",
                        "startLine": 508,
                        "endLine": 509,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.CdnLoadingGraphErrorEvent.status",
                            "CdnEvent.status": "@nav[webpm-client]/MainModule.CdnEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphErrorEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.CdnLoadingGraphErrorEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'CdnLoadingGraphErrorEvent'",
                        "implementation": "",
                        "startLine": 506,
                        "endLine": 507,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.CdnLoadingGraphErrorEvent.step",
                            "CdnEvent.step": "@nav[webpm-client]/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphErrorEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.CdnLoadingGraphErrorEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text = 'Failed to retrieve the loading graph'",
                        "implementation": "",
                        "startLine": 507,
                        "endLine": 508,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.CdnLoadingGraphErrorEvent.text",
                            "CdnEvent.text": "@nav[webpm-client]/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class CdnLoadingGraphErrorEvent implements CdnEvent",
                "implementation": "export class CdnLoadingGraphErrorEvent implements CdnEvent {\n    public readonly id = 'loading-graph'\n    public readonly step = 'CdnLoadingGraphErrorEvent'\n    public readonly text = 'Failed to retrieve the loading graph'\n    public readonly status = 'Failed'\n    constructor(public readonly error: LoadingGraphError) {}\n}",
                "startLine": 504,
                "endLine": 511,
                "references": {
                    "CdnLoadingGraphErrorEvent": "@nav[webpm-client]/MainModule.CdnLoadingGraphErrorEvent",
                    "LoadingGraphError": "@nav[webpm-client]/MainModule.LoadingGraphError",
                    "CdnEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id",
                    "CdnEvent.status": "@nav[webpm-client]/MainModule.CdnEvent.status",
                    "CdnEvent.step": "@nav[webpm-client]/MainModule.CdnEvent.step",
                    "CdnEvent.text": "@nav[webpm-client]/MainModule.CdnEvent.text",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CdnLoadingGraphQueryEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when querying the loading graph occurred.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CdnLoadingGraphQueryEvent",
            "navPath": "@nav[webpm-client]/MainModule.CdnLoadingGraphQueryEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphQueryEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.CdnLoadingGraphQueryEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id = 'loading-graph-query'",
                        "implementation": "",
                        "startLine": 480,
                        "endLine": 481,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.CdnLoadingGraphQueryEvent.id",
                            "CdnEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphQueryEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.CdnLoadingGraphQueryEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 483,
                        "endLine": 484,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.CdnLoadingGraphQueryEvent.status",
                            "CdnEvent.status": "@nav[webpm-client]/MainModule.CdnEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphQueryEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.CdnLoadingGraphQueryEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'CdnLoadingGraphQueryEvent'",
                        "implementation": "",
                        "startLine": 481,
                        "endLine": 482,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.CdnLoadingGraphQueryEvent.step",
                            "CdnEvent.step": "@nav[webpm-client]/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphQueryEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.CdnLoadingGraphQueryEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text = 'Retrieve the loading graph'",
                        "implementation": "",
                        "startLine": 482,
                        "endLine": 483,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.CdnLoadingGraphQueryEvent.text",
                            "CdnEvent.text": "@nav[webpm-client]/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class CdnLoadingGraphQueryEvent implements CdnEvent",
                "implementation": "export class CdnLoadingGraphQueryEvent implements CdnEvent {\n    public readonly id = 'loading-graph-query'\n    public readonly step = 'CdnLoadingGraphQueryEvent'\n    public readonly text = 'Retrieve the loading graph'\n    public readonly status = 'Pending'\n}",
                "startLine": 479,
                "endLine": 485,
                "references": {
                    "CdnLoadingGraphQueryEvent": "@nav[webpm-client]/MainModule.CdnLoadingGraphQueryEvent",
                    "CdnEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id",
                    "CdnEvent.status": "@nav[webpm-client]/MainModule.CdnEvent.status",
                    "CdnEvent.step": "@nav[webpm-client]/MainModule.CdnEvent.step",
                    "CdnEvent.text": "@nav[webpm-client]/MainModule.CdnEvent.text",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CdnLoadingGraphResolvedEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when querying the loading graph occurred.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CdnLoadingGraphResolvedEvent",
            "navPath": "@nav[webpm-client]/MainModule.CdnLoadingGraphResolvedEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphResolvedEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.CdnLoadingGraphResolvedEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id = 'loading-graph-resolved'",
                        "implementation": "",
                        "startLine": 490,
                        "endLine": 491,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.CdnLoadingGraphResolvedEvent.id",
                            "CdnEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphResolvedEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.CdnLoadingGraphResolvedEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 493,
                        "endLine": 494,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.CdnLoadingGraphResolvedEvent.status",
                            "CdnEvent.status": "@nav[webpm-client]/MainModule.CdnEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphResolvedEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.CdnLoadingGraphResolvedEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'CdnLoadingGraphResolvedEvent'",
                        "implementation": "",
                        "startLine": 491,
                        "endLine": 492,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.CdnLoadingGraphResolvedEvent.step",
                            "CdnEvent.step": "@nav[webpm-client]/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphResolvedEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.CdnLoadingGraphResolvedEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text = 'Loading graph resolved'",
                        "implementation": "",
                        "startLine": 492,
                        "endLine": 493,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.CdnLoadingGraphResolvedEvent.text",
                            "CdnEvent.text": "@nav[webpm-client]/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class CdnLoadingGraphResolvedEvent implements CdnEvent",
                "implementation": "export class CdnLoadingGraphResolvedEvent implements CdnEvent {\n    public readonly id = 'loading-graph-resolved'\n    public readonly step = 'CdnLoadingGraphResolvedEvent'\n    public readonly text = 'Loading graph resolved'\n    public readonly status = 'Pending'\n    public readonly response: LoadingGraph\n\n    constructor(public readonly resp: LoadingGraph) {\n        this.response = resp\n    }\n}",
                "startLine": 489,
                "endLine": 500,
                "references": {
                    "CdnLoadingGraphResolvedEvent": "@nav[webpm-client]/MainModule.CdnLoadingGraphResolvedEvent",
                    "LoadingGraph": "@nav[webpm-client]/MainModule.LoadingGraph",
                    "CdnEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id",
                    "CdnEvent.status": "@nav[webpm-client]/MainModule.CdnEvent.status",
                    "CdnEvent.step": "@nav[webpm-client]/MainModule.CdnEvent.step",
                    "CdnEvent.text": "@nav[webpm-client]/MainModule.CdnEvent.text",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CdnMessageEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Generic custom CDN event.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CdnMessageEvent",
            "navPath": "@nav[webpm-client]/MainModule.CdnMessageEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnMessageEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.CdnMessageEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 267,
                        "endLine": 268,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.CdnMessageEvent.id",
                            "CdnEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnMessageEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.CdnMessageEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status: EventStatus = 'None'",
                        "implementation": "",
                        "startLine": 269,
                        "endLine": 270,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.CdnMessageEvent.status",
                            "EventStatus": "@nav[webpm-client]/MainModule.EventStatus",
                            "CdnEvent.status": "@nav[webpm-client]/MainModule.CdnEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnMessageEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.CdnMessageEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'CdnMessageEvent'",
                        "implementation": "",
                        "startLine": 266,
                        "endLine": 267,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.CdnMessageEvent.step",
                            "CdnEvent.step": "@nav[webpm-client]/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnMessageEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.CdnMessageEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 268,
                        "endLine": 269,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.CdnMessageEvent.text",
                            "CdnEvent.text": "@nav[webpm-client]/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class CdnMessageEvent implements CdnEvent",
                "implementation": "export class CdnMessageEvent implements CdnEvent {\n    public readonly step = 'CdnMessageEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status: EventStatus = 'None'\n    constructor(id: string, text: string, status: EventStatus = 'None') {\n        this.id = id\n        this.status = status\n        this.text = text\n    }\n}",
                "startLine": 265,
                "endLine": 276,
                "references": {
                    "CdnMessageEvent": "@nav[webpm-client]/MainModule.CdnMessageEvent",
                    "EventStatus": "@nav[webpm-client]/MainModule.EventStatus",
                    "CdnEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id",
                    "CdnEvent.status": "@nav[webpm-client]/MainModule.CdnEvent.status",
                    "CdnEvent.step": "@nav[webpm-client]/MainModule.CdnEvent.step",
                    "CdnEvent.text": "@nav[webpm-client]/MainModule.CdnEvent.text",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CircularDependencies",
            "documentation": {
                "sections": [
                    {
                        "content": "Dependencies resolution while resolving a loading graph lead to a circular dependency problem.\nSee also  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.CdnLoadingGraphErrorEvent\" semantic=\"class\">CdnLoadingGraphErrorEvent</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CircularDependencies",
            "navPath": "@nav[webpm-client]/MainModule.CircularDependencies",
            "attributes": [
                {
                    "name": "stackTraceLimit",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The  `Error.stackTraceLimit`  property specifies the number of stack frames\ncollected by a stack trace (whether generated by  `new Error().stack`  or\n `Error.captureStackTrace(obj)` ).\n\nThe default value is  `10`  but may be set to any valid JavaScript number. Changes\nwill affect any stack trace captured _after_ the value has been changed.\n\nIf set to a non-number value, or set to a negative number, stack traces will\nnot capture any frames.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingGraphError.stackTraceLimit",
                    "navPath": "@nav[webpm-client]/MainModule.LoadingGraphError.stackTraceLimit",
                    "code": {
                        "filePath": "",
                        "declaration": "",
                        "implementation": "",
                        "startLine": 1,
                        "endLine": 2,
                        "references": {}
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/errors.models.ts",
                "declaration": "export class CircularDependencies extends LoadingGraphError",
                "implementation": "export class CircularDependencies extends LoadingGraphError {\n    static exceptionType = 'CircularDependencies'\n\n    constructor(\n        public readonly detail: {\n            context: string\n            packages: Record<string, { name: string; version: string }[]>\n        },\n    ) {\n        super()\n    }\n\n    static isInstance(resp: CdnError): resp is CircularDependencies {\n        return (\n            'exceptionType' in resp &&\n            resp.exceptionType === CircularDependencies.exceptionType\n        )\n    }\n}",
                "startLine": 149,
                "endLine": 168,
                "references": {
                    "CircularDependencies": "@nav[webpm-client]/MainModule.CircularDependencies",
                    "LoadingGraphError.constructor": "@nav[webpm-client]/MainModule.LoadingGraphError.constructor",
                    "LoadingGraphError.message": "@nav[webpm-client]/MainModule.LoadingGraphError.message",
                    "LoadingGraphError.name": "@nav[webpm-client]/MainModule.LoadingGraphError.name",
                    "LoadingGraphError.stack": "@nav[webpm-client]/MainModule.LoadingGraphError.stack",
                    "LoadingGraphError.exceptionType": "@nav[webpm-client]/MainModule.LoadingGraphError.exceptionType",
                    "LoadingGraphError.stackTraceLimit": "@nav[webpm-client]/MainModule.LoadingGraphError.stackTraceLimit",
                    "LoadingGraphError.captureStackTrace": "@nav[webpm-client]/MainModule.LoadingGraphError.captureStackTrace",
                    "CdnError": "@nav[webpm-client]/MainModule.CdnError",
                    "LoadingGraphError.prepareStackTrace": "@nav[webpm-client]/MainModule.LoadingGraphError.prepareStackTrace",
                    "LoadingGraphError": "@nav[webpm-client]/MainModule.LoadingGraphError"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ConsoleEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "An event representing a log entry.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ConsoleEvent",
            "navPath": "@nav[webpm-client]/MainModule.ConsoleEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ConsoleEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.ConsoleEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 799,
                        "endLine": 800,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.ConsoleEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ConsoleEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.ConsoleEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 801,
                        "endLine": 802,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.ConsoleEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ConsoleEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.ConsoleEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'ConsoleEvent'",
                        "implementation": "",
                        "startLine": 800,
                        "endLine": 801,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.ConsoleEvent.step"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class ConsoleEvent implements CdnPyEvent",
                "implementation": "export class ConsoleEvent implements CdnPyEvent {\n    public readonly id: string\n    public readonly step = 'ConsoleEvent'\n    public readonly status = 'Pending'\n    constructor(\n        public readonly level: 'Info' | 'Warning' | 'Error',\n        public readonly topic: Topic,\n        public readonly text: string,\n    ) {\n        this.id = String(Math.floor(Math.random() * 1e6))\n        if (level === 'Error') {\n            console.error(text)\n        }\n    }\n}",
                "startLine": 798,
                "endLine": 813,
                "references": {
                    "ConsoleEvent": "@nav[webpm-client]/MainModule.ConsoleEvent",
                    "Topic": "@nav[webpm-client]/MainModule.Topic",
                    "CdnPyEvent": "@nav[webpm-client]/MainModule.CdnPyEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CssLoadingEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when starting to install a style sheet.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CssLoadingEvent",
            "navPath": "@nav[webpm-client]/MainModule.CssLoadingEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssLoadingEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.CssLoadingEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 386,
                        "endLine": 387,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.CssLoadingEvent.id",
                            "CdnFetchEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssLoadingEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.CssLoadingEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 388,
                        "endLine": 389,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.CssLoadingEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssLoadingEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.CssLoadingEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'CssLoadingEvent'",
                        "implementation": "",
                        "startLine": 385,
                        "endLine": 386,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.CssLoadingEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssLoadingEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.CssLoadingEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 387,
                        "endLine": 388,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.CssLoadingEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class CssLoadingEvent implements CdnFetchEvent",
                "implementation": "export class CssLoadingEvent implements CdnFetchEvent {\n    public readonly step = 'CssLoadingEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Pending'\n    constructor(\n        public readonly targetName: string,\n        public readonly assetId: string,\n        public readonly url: string,\n        public readonly version: string,\n    ) {\n        this.id = targetName\n        this.text = `${targetName}: fetching over HTTP`\n    }\n}",
                "startLine": 384,
                "endLine": 399,
                "references": {
                    "CssLoadingEvent": "@nav[webpm-client]/MainModule.CssLoadingEvent",
                    "CdnFetchEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id",
                    "CdnFetchEvent": "@nav[webpm-client]/MainModule.CdnFetchEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CssParsedEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when a style sheet has been added to the document.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CssParsedEvent",
            "navPath": "@nav[webpm-client]/MainModule.CssParsedEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssParsedEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.CssParsedEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 405,
                        "endLine": 406,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.CssParsedEvent.id",
                            "CdnFetchEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssParsedEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.CssParsedEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Succeeded'",
                        "implementation": "",
                        "startLine": 407,
                        "endLine": 408,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.CssParsedEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssParsedEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.CssParsedEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'CssParsedEvent'",
                        "implementation": "",
                        "startLine": 404,
                        "endLine": 405,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.CssParsedEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssParsedEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.CssParsedEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 406,
                        "endLine": 407,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.CssParsedEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class CssParsedEvent implements CdnFetchEvent",
                "implementation": "export class CssParsedEvent implements CdnFetchEvent {\n    public readonly step = 'CssParsedEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Succeeded'\n    constructor(\n        public readonly targetName: string,\n        public readonly assetId: string,\n        public readonly url: string,\n        public readonly version: string,\n    ) {\n        this.id = targetName\n        this.text = `${targetName}: module/script imported`\n    }\n}",
                "startLine": 403,
                "endLine": 418,
                "references": {
                    "CssParsedEvent": "@nav[webpm-client]/MainModule.CssParsedEvent",
                    "CdnFetchEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id",
                    "CdnFetchEvent": "@nav[webpm-client]/MainModule.CdnFetchEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "DependenciesError",
            "documentation": {
                "sections": [
                    {
                        "content": "Error occurred trying to resolve a direct or indirect dependency while resolving a loading graph.\nSee also  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.CdnLoadingGraphErrorEvent\" semantic=\"class\">CdnLoadingGraphErrorEvent</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DependenciesError",
            "navPath": "@nav[webpm-client]/MainModule.DependenciesError",
            "attributes": [
                {
                    "name": "stackTraceLimit",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The  `Error.stackTraceLimit`  property specifies the number of stack frames\ncollected by a stack trace (whether generated by  `new Error().stack`  or\n `Error.captureStackTrace(obj)` ).\n\nThe default value is  `10`  but may be set to any valid JavaScript number. Changes\nwill affect any stack trace captured _after_ the value has been changed.\n\nIf set to a non-number value, or set to a negative number, stack traces will\nnot capture any frames.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingGraphError.stackTraceLimit",
                    "navPath": "@nav[webpm-client]/MainModule.LoadingGraphError.stackTraceLimit",
                    "code": {
                        "filePath": "",
                        "declaration": "",
                        "implementation": "",
                        "startLine": 1,
                        "endLine": 2,
                        "references": {}
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/errors.models.ts",
                "declaration": "export class DependenciesError extends LoadingGraphError",
                "implementation": "export class DependenciesError extends LoadingGraphError {\n    static exceptionType = 'DependenciesError'\n\n    constructor(\n        public readonly detail: {\n            context: string\n            errors: {\n                query: string\n                fromPackage: { name: string; version: string }\n                detail: string\n            }[]\n        },\n    ) {\n        super()\n    }\n\n    static isInstance(resp: CdnError): resp is DependenciesError {\n        return (\n            'exceptionType' in resp &&\n            resp.exceptionType === DependenciesError.exceptionType\n        )\n    }\n}",
                "startLine": 119,
                "endLine": 142,
                "references": {
                    "DependenciesError": "@nav[webpm-client]/MainModule.DependenciesError",
                    "LoadingGraphError.constructor": "@nav[webpm-client]/MainModule.LoadingGraphError.constructor",
                    "LoadingGraphError.message": "@nav[webpm-client]/MainModule.LoadingGraphError.message",
                    "LoadingGraphError.name": "@nav[webpm-client]/MainModule.LoadingGraphError.name",
                    "LoadingGraphError.stack": "@nav[webpm-client]/MainModule.LoadingGraphError.stack",
                    "LoadingGraphError.exceptionType": "@nav[webpm-client]/MainModule.LoadingGraphError.exceptionType",
                    "LoadingGraphError.stackTraceLimit": "@nav[webpm-client]/MainModule.LoadingGraphError.stackTraceLimit",
                    "LoadingGraphError.captureStackTrace": "@nav[webpm-client]/MainModule.LoadingGraphError.captureStackTrace",
                    "CdnError": "@nav[webpm-client]/MainModule.CdnError",
                    "LoadingGraphError.prepareStackTrace": "@nav[webpm-client]/MainModule.LoadingGraphError.prepareStackTrace",
                    "LoadingGraphError": "@nav[webpm-client]/MainModule.LoadingGraphError"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "DownloadBackendEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Events emitted when a backend is downloaded.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DownloadBackendEvent",
            "navPath": "@nav[webpm-client]/MainModule.DownloadBackendEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.BackendEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 536,
                        "endLine": 537,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.BackendEvent.id",
                            "CdnEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.BackendEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status: 'Pending' | 'Failed'",
                        "implementation": "",
                        "startLine": 538,
                        "endLine": 539,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.BackendEvent.status",
                            "CdnEvent.status": "@nav[webpm-client]/MainModule.CdnEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.BackendEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step:\n        | 'DownloadBackendEvent'\n        | 'InstallBackendEvent'\n        | 'StartBackendEvent'\n        | 'BackendErrorEvent'",
                        "implementation": "",
                        "startLine": 539,
                        "endLine": 540,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.BackendEvent.step",
                            "CdnEvent.step": "@nav[webpm-client]/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.BackendEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 537,
                        "endLine": 538,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.BackendEvent.text",
                            "CdnEvent.text": "@nav[webpm-client]/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class DownloadBackendEvent extends BackendEvent",
                "implementation": "export class DownloadBackendEvent extends BackendEvent {\n    public readonly event: 'started' | 'succeeded' | 'failed'\n\n    constructor(params: {\n        name: string\n        version: string\n        event: 'started' | 'succeeded' | 'failed'\n    }) {\n        super(\n            'DownloadBackendEvent',\n            params.name,\n            params.version,\n            'downloading...',\n            params.event,\n        )\n    }\n}",
                "startLine": 570,
                "endLine": 587,
                "references": {
                    "DownloadBackendEvent": "@nav[webpm-client]/MainModule.DownloadBackendEvent",
                    "BackendEvent.constructor": "@nav[webpm-client]/MainModule.BackendEvent.constructor",
                    "BackendEvent.event": "@nav[webpm-client]/MainModule.BackendEvent.event",
                    "BackendEvent.id": "@nav[webpm-client]/MainModule.BackendEvent.id",
                    "BackendEvent.name": "@nav[webpm-client]/MainModule.BackendEvent.name",
                    "BackendEvent.status": "@nav[webpm-client]/MainModule.BackendEvent.status",
                    "BackendEvent.step": "@nav[webpm-client]/MainModule.BackendEvent.step",
                    "BackendEvent.text": "@nav[webpm-client]/MainModule.BackendEvent.text",
                    "BackendEvent.title": "@nav[webpm-client]/MainModule.BackendEvent.title",
                    "BackendEvent.version": "@nav[webpm-client]/MainModule.BackendEvent.version",
                    "BackendEvent": "@nav[webpm-client]/MainModule.BackendEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "FetchedPyRuntimeEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when Pyodide runtime's installation failed.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "FetchedPyRuntimeEvent",
            "navPath": "@nav[webpm-client]/MainModule.FetchedPyRuntimeEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FetchedPyRuntimeEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.FetchedPyRuntimeEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 672,
                        "endLine": 673,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.FetchedPyRuntimeEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FetchedPyRuntimeEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.FetchedPyRuntimeEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Succeeded'",
                        "implementation": "",
                        "startLine": 674,
                        "endLine": 675,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.FetchedPyRuntimeEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FetchedPyRuntimeEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.FetchedPyRuntimeEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'FetchedPyRuntimeEvent'",
                        "implementation": "",
                        "startLine": 671,
                        "endLine": 672,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.FetchedPyRuntimeEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FetchedPyRuntimeEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.FetchedPyRuntimeEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 673,
                        "endLine": 674,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.FetchedPyRuntimeEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class FetchedPyRuntimeEvent implements CdnPyEvent",
                "implementation": "export class FetchedPyRuntimeEvent implements CdnPyEvent {\n    public readonly step = 'FetchedPyRuntimeEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Succeeded'\n    constructor(\n        public readonly pyodideVersion: string,\n        public readonly url: string,\n    ) {\n        this.id = `fetch-pyodide-${pyodideVersion}`\n        this.text = `Fetch pyodide runtime`\n    }\n}",
                "startLine": 670,
                "endLine": 683,
                "references": {
                    "FetchedPyRuntimeEvent": "@nav[webpm-client]/MainModule.FetchedPyRuntimeEvent",
                    "CdnPyEvent": "@nav[webpm-client]/MainModule.CdnPyEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "FetchErrors",
            "documentation": {
                "sections": [
                    {
                        "content": "Error happening while fetching a source file.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "FetchErrors",
            "navPath": "@nav[webpm-client]/MainModule.FetchErrors",
            "attributes": [
                {
                    "name": "stackTraceLimit",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The  `Error.stackTraceLimit`  property specifies the number of stack frames\ncollected by a stack trace (whether generated by  `new Error().stack`  or\n `Error.captureStackTrace(obj)` ).\n\nThe default value is  `10`  but may be set to any valid JavaScript number. Changes\nwill affect any stack trace captured _after_ the value has been changed.\n\nIf set to a non-number value, or set to a negative number, stack traces will\nnot capture any frames.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnError.stackTraceLimit",
                    "navPath": "@nav[webpm-client]/MainModule.CdnError.stackTraceLimit",
                    "code": {
                        "filePath": "",
                        "declaration": "",
                        "implementation": "",
                        "startLine": 1,
                        "endLine": 2,
                        "references": {}
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/errors.models.ts",
                "declaration": "export class FetchErrors extends CdnError",
                "implementation": "export class FetchErrors extends CdnError {\n    static exceptionType = 'FetchErrors'\n\n    constructor(public readonly detail: { errors }) {\n        super()\n    }\n\n    static isInstance(resp: CdnError): resp is FetchErrors {\n        return (\n            'exceptionType' in resp &&\n            resp.exceptionType === FetchErrors.exceptionType\n        )\n    }\n}",
                "startLine": 78,
                "endLine": 92,
                "references": {
                    "FetchErrors": "@nav[webpm-client]/MainModule.FetchErrors",
                    "CdnError.constructor": "@nav[webpm-client]/MainModule.CdnError.constructor",
                    "CdnError.message": "@nav[webpm-client]/MainModule.CdnError.message",
                    "CdnError.name": "@nav[webpm-client]/MainModule.CdnError.name",
                    "CdnError.stack": "@nav[webpm-client]/MainModule.CdnError.stack",
                    "CdnError.exceptionType": "@nav[webpm-client]/MainModule.CdnError.exceptionType",
                    "CdnError.stackTraceLimit": "@nav[webpm-client]/MainModule.CdnError.stackTraceLimit",
                    "CdnError.captureStackTrace": "@nav[webpm-client]/MainModule.CdnError.captureStackTrace",
                    "CdnError": "@nav[webpm-client]/MainModule.CdnError",
                    "CdnError.prepareStackTrace": "@nav[webpm-client]/MainModule.CdnError.prepareStackTrace"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "FetchPyRuntimeEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when starting to fetch Pyodide runtime.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "FetchPyRuntimeEvent",
            "navPath": "@nav[webpm-client]/MainModule.FetchPyRuntimeEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FetchPyRuntimeEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.FetchPyRuntimeEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 656,
                        "endLine": 657,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.FetchPyRuntimeEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FetchPyRuntimeEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.FetchPyRuntimeEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 658,
                        "endLine": 659,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.FetchPyRuntimeEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FetchPyRuntimeEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.FetchPyRuntimeEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'FetchPyRuntimeEvent'",
                        "implementation": "",
                        "startLine": 655,
                        "endLine": 656,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.FetchPyRuntimeEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FetchPyRuntimeEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.FetchPyRuntimeEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 657,
                        "endLine": 658,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.FetchPyRuntimeEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class FetchPyRuntimeEvent implements CdnPyEvent",
                "implementation": "export class FetchPyRuntimeEvent implements CdnPyEvent {\n    public readonly step = 'FetchPyRuntimeEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Pending'\n    constructor(\n        public readonly pyodideVersion: string,\n        public readonly url: string,\n    ) {\n        this.id = `fetch-pyodide-${pyodideVersion}`\n        this.text = `Fetch pyodide runtime`\n    }\n}",
                "startLine": 654,
                "endLine": 667,
                "references": {
                    "FetchPyRuntimeEvent": "@nav[webpm-client]/MainModule.FetchPyRuntimeEvent",
                    "CdnPyEvent": "@nav[webpm-client]/MainModule.CdnPyEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "InstallBackendEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Events emitted when a backend is installed.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "InstallBackendEvent",
            "navPath": "@nav[webpm-client]/MainModule.InstallBackendEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.BackendEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 536,
                        "endLine": 537,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.BackendEvent.id",
                            "CdnEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.BackendEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status: 'Pending' | 'Failed'",
                        "implementation": "",
                        "startLine": 538,
                        "endLine": 539,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.BackendEvent.status",
                            "CdnEvent.status": "@nav[webpm-client]/MainModule.CdnEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.BackendEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step:\n        | 'DownloadBackendEvent'\n        | 'InstallBackendEvent'\n        | 'StartBackendEvent'\n        | 'BackendErrorEvent'",
                        "implementation": "",
                        "startLine": 539,
                        "endLine": 540,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.BackendEvent.step",
                            "CdnEvent.step": "@nav[webpm-client]/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.BackendEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 537,
                        "endLine": 538,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.BackendEvent.text",
                            "CdnEvent.text": "@nav[webpm-client]/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class InstallBackendEvent extends BackendEvent",
                "implementation": "export class InstallBackendEvent extends BackendEvent {\n    public readonly event: 'started' | 'succeeded' | 'failed'\n    constructor(params: {\n        name: string\n        version: string\n        event: 'started' | 'succeeded' | 'failed'\n    }) {\n        super(\n            'InstallBackendEvent',\n            params.name,\n            params.version,\n            'installing...',\n            params.event,\n        )\n    }\n}",
                "startLine": 590,
                "endLine": 606,
                "references": {
                    "InstallBackendEvent": "@nav[webpm-client]/MainModule.InstallBackendEvent",
                    "BackendEvent.constructor": "@nav[webpm-client]/MainModule.BackendEvent.constructor",
                    "BackendEvent.event": "@nav[webpm-client]/MainModule.BackendEvent.event",
                    "BackendEvent.id": "@nav[webpm-client]/MainModule.BackendEvent.id",
                    "BackendEvent.name": "@nav[webpm-client]/MainModule.BackendEvent.name",
                    "BackendEvent.status": "@nav[webpm-client]/MainModule.BackendEvent.status",
                    "BackendEvent.step": "@nav[webpm-client]/MainModule.BackendEvent.step",
                    "BackendEvent.text": "@nav[webpm-client]/MainModule.BackendEvent.text",
                    "BackendEvent.title": "@nav[webpm-client]/MainModule.BackendEvent.title",
                    "BackendEvent.version": "@nav[webpm-client]/MainModule.BackendEvent.version",
                    "BackendEvent": "@nav[webpm-client]/MainModule.BackendEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "InstallDoneEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when an installation is done ( <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.install\" semantic=\"function\">install</mkapi-api-link> ).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "InstallDoneEvent",
            "navPath": "@nav[webpm-client]/MainModule.InstallDoneEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallDoneEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.InstallDoneEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id = 'InstallDoneEvent'",
                        "implementation": "",
                        "startLine": 516,
                        "endLine": 517,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.InstallDoneEvent.id",
                            "CdnEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallDoneEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.InstallDoneEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Succeeded'",
                        "implementation": "",
                        "startLine": 519,
                        "endLine": 520,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.InstallDoneEvent.status",
                            "CdnEvent.status": "@nav[webpm-client]/MainModule.CdnEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallDoneEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.InstallDoneEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'InstallDoneEvent'",
                        "implementation": "",
                        "startLine": 517,
                        "endLine": 518,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.InstallDoneEvent.step",
                            "CdnEvent.step": "@nav[webpm-client]/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallDoneEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.InstallDoneEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text = 'Installation successful'",
                        "implementation": "",
                        "startLine": 518,
                        "endLine": 519,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.InstallDoneEvent.text",
                            "CdnEvent.text": "@nav[webpm-client]/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class InstallDoneEvent implements CdnEvent",
                "implementation": "export class InstallDoneEvent implements CdnEvent {\n    public readonly id = 'InstallDoneEvent'\n    public readonly step = 'InstallDoneEvent'\n    public readonly text = 'Installation successful'\n    public readonly status = 'Succeeded'\n}",
                "startLine": 515,
                "endLine": 521,
                "references": {
                    "InstallDoneEvent": "@nav[webpm-client]/MainModule.InstallDoneEvent",
                    "CdnEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id",
                    "CdnEvent.status": "@nav[webpm-client]/MainModule.CdnEvent.status",
                    "CdnEvent.step": "@nav[webpm-client]/MainModule.CdnEvent.step",
                    "CdnEvent.text": "@nav[webpm-client]/MainModule.CdnEvent.text",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "InstallErrorEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when an installation failed ( <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.install\" semantic=\"function\">install</mkapi-api-link> ).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "InstallErrorEvent",
            "navPath": "@nav[webpm-client]/MainModule.InstallErrorEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallErrorEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.InstallErrorEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id = 'InstallErrorEvent'",
                        "implementation": "",
                        "startLine": 526,
                        "endLine": 527,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.InstallErrorEvent.id",
                            "CdnEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallErrorEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.InstallErrorEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Failed'",
                        "implementation": "",
                        "startLine": 529,
                        "endLine": 530,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.InstallErrorEvent.status",
                            "CdnEvent.status": "@nav[webpm-client]/MainModule.CdnEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallErrorEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.InstallErrorEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'InstallErrorEvent'",
                        "implementation": "",
                        "startLine": 527,
                        "endLine": 528,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.InstallErrorEvent.step",
                            "CdnEvent.step": "@nav[webpm-client]/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallErrorEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.InstallErrorEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text = 'Installation error'",
                        "implementation": "",
                        "startLine": 528,
                        "endLine": 529,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.InstallErrorEvent.text",
                            "CdnEvent.text": "@nav[webpm-client]/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class InstallErrorEvent implements CdnEvent",
                "implementation": "export class InstallErrorEvent implements CdnEvent {\n    public readonly id = 'InstallErrorEvent'\n    public readonly step = 'InstallErrorEvent'\n    public readonly text = 'Installation error'\n    public readonly status = 'Failed'\n}",
                "startLine": 525,
                "endLine": 531,
                "references": {
                    "InstallErrorEvent": "@nav[webpm-client]/MainModule.InstallErrorEvent",
                    "CdnEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id",
                    "CdnEvent.status": "@nav[webpm-client]/MainModule.CdnEvent.status",
                    "CdnEvent.step": "@nav[webpm-client]/MainModule.CdnEvent.step",
                    "CdnEvent.text": "@nav[webpm-client]/MainModule.CdnEvent.text",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "InstallPyModuleEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when starting to install a module.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "InstallPyModuleEvent",
            "navPath": "@nav[webpm-client]/MainModule.InstallPyModuleEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallPyModuleEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.InstallPyModuleEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 730,
                        "endLine": 731,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.InstallPyModuleEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallPyModuleEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.InstallPyModuleEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 732,
                        "endLine": 733,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.InstallPyModuleEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallPyModuleEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.InstallPyModuleEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'InstallPyModuleEvent'",
                        "implementation": "",
                        "startLine": 729,
                        "endLine": 730,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.InstallPyModuleEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallPyModuleEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.InstallPyModuleEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 731,
                        "endLine": 732,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.InstallPyModuleEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class InstallPyModuleEvent implements CdnPyEvent",
                "implementation": "export class InstallPyModuleEvent implements CdnPyEvent {\n    public readonly step = 'InstallPyModuleEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Pending'\n    constructor(public readonly name: string) {\n        this.id = `install-pyodide-module-${name}`\n        this.text = `Installing ${this.name}`\n    }\n}",
                "startLine": 728,
                "endLine": 738,
                "references": {
                    "InstallPyModuleEvent": "@nav[webpm-client]/MainModule.InstallPyModuleEvent",
                    "CdnPyEvent": "@nav[webpm-client]/MainModule.CdnPyEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LoadingGraphError",
            "documentation": {
                "sections": [
                    {
                        "content": "Base class of errors related to loading graph resolution. See also  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.CdnLoadingGraphErrorEvent\" semantic=\"class\">CdnLoadingGraphErrorEvent</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LoadingGraphError",
            "navPath": "@nav[webpm-client]/MainModule.LoadingGraphError",
            "attributes": [
                {
                    "name": "stackTraceLimit",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The  `Error.stackTraceLimit`  property specifies the number of stack frames\ncollected by a stack trace (whether generated by  `new Error().stack`  or\n `Error.captureStackTrace(obj)` ).\n\nThe default value is  `10`  but may be set to any valid JavaScript number. Changes\nwill affect any stack trace captured _after_ the value has been changed.\n\nIf set to a non-number value, or set to a negative number, stack traces will\nnot capture any frames.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnError.stackTraceLimit",
                    "navPath": "@nav[webpm-client]/MainModule.CdnError.stackTraceLimit",
                    "code": {
                        "filePath": "",
                        "declaration": "",
                        "implementation": "",
                        "startLine": 1,
                        "endLine": 2,
                        "references": {}
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/errors.models.ts",
                "declaration": "export class LoadingGraphError extends CdnError",
                "implementation": "export class LoadingGraphError extends CdnError {\n    constructor() {\n        super('Failed to retrieve the loading graph') // (1)\n        this.name = 'LoadingGraphError' // (2)\n    }\n}",
                "startLine": 26,
                "endLine": 32,
                "references": {
                    "LoadingGraphError": "@nav[webpm-client]/MainModule.LoadingGraphError",
                    "CdnError.constructor": "@nav[webpm-client]/MainModule.CdnError.constructor",
                    "CdnError.message": "@nav[webpm-client]/MainModule.CdnError.message",
                    "CdnError.name": "@nav[webpm-client]/MainModule.CdnError.name",
                    "CdnError.stack": "@nav[webpm-client]/MainModule.CdnError.stack",
                    "CdnError.exceptionType": "@nav[webpm-client]/MainModule.CdnError.exceptionType",
                    "CdnError.stackTraceLimit": "@nav[webpm-client]/MainModule.CdnError.stackTraceLimit",
                    "CdnError.captureStackTrace": "@nav[webpm-client]/MainModule.CdnError.captureStackTrace",
                    "CdnError.prepareStackTrace": "@nav[webpm-client]/MainModule.CdnError.prepareStackTrace",
                    "CdnError": "@nav[webpm-client]/MainModule.CdnError",
                    "DependenciesError": "@nav[webpm-client]/MainModule.DependenciesError",
                    "CircularDependencies": "@nav[webpm-client]/MainModule.CircularDependencies"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LoadingScreen",
            "documentation": {
                "sections": [
                    {
                        "content": "Component displaying a loading screen with logo, app name & description.\nProgresses are reported and an additional 'info' button can be toggled to display the installation logs.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LoadingScreen",
            "navPath": "@nav[webpm-client]/MainModule.LoadingScreen",
            "attributes": [
                {
                    "name": "options",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The actual display options used by the class.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingScreen.options",
                    "navPath": "@nav[webpm-client]/MainModule.LoadingScreen.options",
                    "code": {
                        "filePath": "src/lib/loading-screen.view.ts",
                        "declaration": "public readonly options: Required<DisplayOptions>",
                        "implementation": "",
                        "startLine": 91,
                        "endLine": 92,
                        "references": {
                            "options": "@nav[webpm-client]/MainModule.LoadingScreen.options",
                            "DisplayOptions": "@nav[webpm-client]/MainModule.DisplayOptions"
                        }
                    }
                },
                {
                    "name": "wrapperDiv",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The HTMLDivElement encapsulating the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingScreen.wrapperDiv",
                    "navPath": "@nav[webpm-client]/MainModule.LoadingScreen.wrapperDiv",
                    "code": {
                        "filePath": "src/lib/loading-screen.view.ts",
                        "declaration": "public readonly wrapperDiv: HTMLDivElement",
                        "implementation": "",
                        "startLine": 96,
                        "endLine": 97,
                        "references": {
                            "wrapperDiv": "@nav[webpm-client]/MainModule.LoadingScreen.wrapperDiv"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "done",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Remove the loading screen (see  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.DisplayOptions.fadingTimeout\" semantic=\"attribute\">DisplayOptions.fadingTimeout</mkapi-api-link> ).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingScreen.done",
                    "navPath": "@nav[webpm-client]/MainModule.LoadingScreen.done",
                    "code": {
                        "filePath": "src/lib/loading-screen.view.ts",
                        "declaration": "done()",
                        "implementation": "done() {\n    const elapsed = Date.now() - this.t0\n    setTimeout(() => {\n        this.wrapperDiv.style.setProperty(\n            'transition',\n            `opacity ${String(this.options.fadingTimeout)}ms`,\n        )\n        this.wrapperDiv.style.setProperty('opacity', '0')\n        setTimeout(() => {\n            this.wrapperDiv.remove()\n        }, 1000)\n    }, this.options.minimumDisplayTime - elapsed)\n}",
                        "startLine": 266,
                        "endLine": 279,
                        "references": {
                            "done": "@nav[webpm-client]/MainModule.LoadingScreen.done"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "next",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Actualize the view given a new  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.CdnEvent\" semantic=\"interface\">CdnEvent</mkapi-api-link>  (provided that  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.LoadingScreen.render\" semantic=\"method\">LoadingScreen.render</mkapi-api-link> \nhas been called before).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **event**: event to account for",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingScreen.next",
                    "navPath": "@nav[webpm-client]/MainModule.LoadingScreen.next",
                    "code": {
                        "filePath": "src/lib/loading-screen.view.ts",
                        "declaration": "next(event: CdnEvent)",
                        "implementation": "next(event: CdnEvent) {\n    if (!isCdnEvent(event)) {\n        return\n    }\n    if (!this.detailsView) {\n        this.events.push(event)\n    } else {\n        this.detailsView.onEvent(event)\n    }\n    if (event.step === 'CdnLoadingGraphResolvedEvent') {\n        this.loadingGraph = (event as CdnLoadingGraphResolvedEvent).resp\n    }\n    if (event.step === 'StartInstallEvent') {\n        this.startEvent = event as StartInstallEvent\n    }\n    if (isErrorEvent(event)) {\n        displayError(this.contentDiv, event)\n    }\n    if (\n        [\n            'SourceParsedEvent',\n            'PyModuleLoadedEvent',\n            'StartBackendEvent',\n        ].includes(event.step)\n    ) {\n        const total =\n            this.loadingGraph.lock.length +\n            this.startEvent.pyodide.modules.length\n\n        this.installedCount++\n        const progress = Math.floor((100 * this.installedCount) / total)\n        this.progressBarDiv.style.width = `${String(progress)}%`\n    }\n}",
                        "startLine": 189,
                        "endLine": 223,
                        "references": {
                            "next": "@nav[webpm-client]/MainModule.LoadingScreen.next",
                            "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "render",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Render the view.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingScreen.render",
                    "navPath": "@nav[webpm-client]/MainModule.LoadingScreen.render",
                    "code": {
                        "filePath": "src/lib/loading-screen.view.ts",
                        "declaration": "render()",
                        "implementation": "render() {\n    if (this.t0) {\n        return\n    }\n    this.t0 = Date.now()\n    this.options.container.appendChild(this.wrapperDiv)\n\n    this.contentDiv = this.wrapperDiv.querySelector(\n        '.screen-messages-container',\n    ) as unknown as HTMLDivElement\n    this.progressBarDiv = document.getElementById(\n        'webpm-client-pbar',\n    ) as HTMLDivElement\n\n    this.detailsDiv = document.getElementById(\n        'webpm-client-details',\n    ) as HTMLDivElement\n\n    const button = document.getElementById(\n        'webpm-client-details-btn',\n    ) as HTMLButtonElement\n\n    button.onclick = () => {\n        void installViewsModule().then((mdle) => {\n            const detailsView = new mdle.InstallView({\n                expandedMode: 'expanded',\n            })\n            this.detailsView = detailsView\n            this.events.forEach((ev) => {\n                detailsView.onEvent(ev)\n            })\n            this.detailsDiv.append(detailsView.toHTML())\n        })\n    }\n}",
                        "startLine": 227,
                        "endLine": 262,
                        "references": {
                            "render": "@nav[webpm-client]/MainModule.LoadingScreen.render"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/loading-screen.view.ts",
                "declaration": "export class LoadingScreen",
                "implementation": "export class LoadingScreen {\n    /**\n     * The actual display options used by the class.\n     */\n    public readonly options: Required<DisplayOptions>\n\n    /**\n     * The HTMLDivElement encapsulating the view.\n     */\n    public readonly wrapperDiv: HTMLDivElement\n\n    private contentDiv: HTMLDivElement\n    private progressBarDiv: HTMLDivElement\n    private detailsDiv: HTMLDivElement\n\n    private installedCount = 1\n    private events: CdnEvent[] = []\n    private startEvent: StartInstallEvent\n    private loadingGraph: LoadingGraph\n    private detailsView?: DetailsView = undefined\n    private t0: number\n\n    /**\n     * @param options see {@link DisplayOptions}.\n     */\n    constructor(options: DisplayOptions) {\n        const defaultDisplayOptions: Omit<\n            Required<DisplayOptions>,\n            'logo' | 'name' | 'description'\n        > = {\n            id: 'loading-screen',\n            fadingTimeout: 500,\n            container: document.body,\n            minimumDisplayTime: 1000,\n            wrapperStyle: {\n                position: 'absolute',\n                top: '0',\n                left: '0',\n                width: '100vw',\n                height: '100vh',\n                padding: 'inherit',\n                'font-weight': 'bolder',\n                'z-index': '1000',\n            },\n            autoRender: true,\n        }\n\n        this.options = {\n            ...defaultDisplayOptions,\n            ...options,\n        }\n        const wrapperStyle = {\n            ...this.options.wrapperStyle,\n            ...(options.wrapperStyle ?? {}),\n        }\n        this.wrapperDiv = document.createElement('div')\n        Object.entries(wrapperStyle).forEach(([k, v]) => {\n            this.wrapperDiv.style.setProperty(k, v)\n        })\n        this.wrapperDiv.innerHTML = `\n        <div id='${this.options.id}' style='display: flex;justify-content: space-around; background-color: #0f172a;\n        width:100%; height:100%; opacity:1;\n        transition: opacity 1s;'>\n            <div style='margin-top: auto;margin-bottom: auto; padding:40px; border-radius: 25px;min-width: 50%; max-height:75%;max-width:75%; overflow: auto;\n            display: flex;flex-direction: column'\n            >\n                <div  style='display: flex;justify-content: space-around;' >\n                    <img src='${this.options.logo}' style='width: clamp(80px, 20vw, 140px)'></img>\n                </div> \n                <div style='margin-left: auto;margin-right: auto; text-align: center; margin-top: 1rem;'>\n                \n                    <h2 style='color:#f4f4f5'>\n                    ${this.options.name}\n                    </h2>\n                    \n                    <h3 style='color:#94a3b8'>\n                    ${this.options.description}\n                    </h3>\n                </div>\n                <div style='width: 100%; display: flex;'>\n                    <div id=\"webpm-client-pbar\" style='margin-top:5px;margin-bottom:5px; width: 0%; display: flex; background-color:green'></div>\n                    <div style='flex-grow: 1; margin-top:5px;margin-bottom:5px; min-width:0px, height: 100%; background-color:gray'></div>\n                    <div id=\"webpm-client-details-btn\" style=\"margin-left:5px;font-size:smaller;cursor:pointer\">ℹ️</div>\n                </div>\n                <div id=\"webpm-client-details\">Details</div>\n                <div  class='screen-messages-container' style='color: green; font-family: monospace;font-size:small; margin-left: auto;margin-right: auto; '>\n    \n                </div>\n            </div>\n        </div>\n        `\n        if (this.options.autoRender) {\n            this.render()\n        }\n    }\n\n    /**\n     * Actualize the view given a new {@link CdnEvent} (provided that {@link LoadingScreen.render}\n     * has been called before).\n     *\n     * @param event event to account for\n     */\n    next(event: CdnEvent) {\n        if (!isCdnEvent(event)) {\n            return\n        }\n        if (!this.detailsView) {\n            this.events.push(event)\n        } else {\n            this.detailsView.onEvent(event)\n        }\n        if (event.step === 'CdnLoadingGraphResolvedEvent') {\n            this.loadingGraph = (event as CdnLoadingGraphResolvedEvent).resp\n        }\n        if (event.step === 'StartInstallEvent') {\n            this.startEvent = event as StartInstallEvent\n        }\n        if (isErrorEvent(event)) {\n            displayError(this.contentDiv, event)\n        }\n        if (\n            [\n                'SourceParsedEvent',\n                'PyModuleLoadedEvent',\n                'StartBackendEvent',\n            ].includes(event.step)\n        ) {\n            const total =\n                this.loadingGraph.lock.length +\n                this.startEvent.pyodide.modules.length\n\n            this.installedCount++\n            const progress = Math.floor((100 * this.installedCount) / total)\n            this.progressBarDiv.style.width = `${String(progress)}%`\n        }\n    }\n\n    /**\n     * Render the view.\n     */\n    render() {\n        if (this.t0) {\n            return\n        }\n        this.t0 = Date.now()\n        this.options.container.appendChild(this.wrapperDiv)\n\n        this.contentDiv = this.wrapperDiv.querySelector(\n            '.screen-messages-container',\n        ) as unknown as HTMLDivElement\n        this.progressBarDiv = document.getElementById(\n            'webpm-client-pbar',\n        ) as HTMLDivElement\n\n        this.detailsDiv = document.getElementById(\n            'webpm-client-details',\n        ) as HTMLDivElement\n\n        const button = document.getElementById(\n            'webpm-client-details-btn',\n        ) as HTMLButtonElement\n\n        button.onclick = () => {\n            void installViewsModule().then((mdle) => {\n                const detailsView = new mdle.InstallView({\n                    expandedMode: 'expanded',\n                })\n                this.detailsView = detailsView\n                this.events.forEach((ev) => {\n                    detailsView.onEvent(ev)\n                })\n                this.detailsDiv.append(detailsView.toHTML())\n            })\n        }\n    }\n\n    /**\n     * Remove the loading screen (see {@link DisplayOptions.fadingTimeout}).\n     */\n    done() {\n        const elapsed = Date.now() - this.t0\n        setTimeout(() => {\n            this.wrapperDiv.style.setProperty(\n                'transition',\n                `opacity ${String(this.options.fadingTimeout)}ms`,\n            )\n            this.wrapperDiv.style.setProperty('opacity', '0')\n            setTimeout(() => {\n                this.wrapperDiv.remove()\n            }, 1000)\n        }, this.options.minimumDisplayTime - elapsed)\n    }\n}",
                "startLine": 87,
                "endLine": 280,
                "references": {
                    "LoadingScreen": "@nav[webpm-client]/MainModule.LoadingScreen",
                    "DisplayOptions": "@nav[webpm-client]/MainModule.DisplayOptions",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LocalYouwolRequired",
            "documentation": {
                "sections": [
                    {
                        "content": "Error related to the usage of features requiring the local youwol server while it is not detected.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LocalYouwolRequired",
            "navPath": "@nav[webpm-client]/MainModule.LocalYouwolRequired",
            "attributes": [
                {
                    "name": "stackTraceLimit",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The  `Error.stackTraceLimit`  property specifies the number of stack frames\ncollected by a stack trace (whether generated by  `new Error().stack`  or\n `Error.captureStackTrace(obj)` ).\n\nThe default value is  `10`  but may be set to any valid JavaScript number. Changes\nwill affect any stack trace captured _after_ the value has been changed.\n\nIf set to a non-number value, or set to a negative number, stack traces will\nnot capture any frames.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnError.stackTraceLimit",
                    "navPath": "@nav[webpm-client]/MainModule.CdnError.stackTraceLimit",
                    "code": {
                        "filePath": "",
                        "declaration": "",
                        "implementation": "",
                        "startLine": 1,
                        "endLine": 2,
                        "references": {}
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/errors.models.ts",
                "declaration": "export class LocalYouwolRequired extends CdnError",
                "implementation": "export class LocalYouwolRequired extends CdnError {\n    constructor(public readonly detail: string) {\n        super()\n    }\n}",
                "startLine": 15,
                "endLine": 20,
                "references": {
                    "LocalYouwolRequired": "@nav[webpm-client]/MainModule.LocalYouwolRequired",
                    "CdnError.constructor": "@nav[webpm-client]/MainModule.CdnError.constructor",
                    "CdnError.message": "@nav[webpm-client]/MainModule.CdnError.message",
                    "CdnError.name": "@nav[webpm-client]/MainModule.CdnError.name",
                    "CdnError.stack": "@nav[webpm-client]/MainModule.CdnError.stack",
                    "CdnError.exceptionType": "@nav[webpm-client]/MainModule.CdnError.exceptionType",
                    "CdnError.stackTraceLimit": "@nav[webpm-client]/MainModule.CdnError.stackTraceLimit",
                    "CdnError.captureStackTrace": "@nav[webpm-client]/MainModule.CdnError.captureStackTrace",
                    "CdnError.prepareStackTrace": "@nav[webpm-client]/MainModule.CdnError.prepareStackTrace",
                    "CdnError": "@nav[webpm-client]/MainModule.CdnError"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ParseErrorEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when an  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.SourceParsingFailed\" semantic=\"class\">SourceParsingFailed</mkapi-api-link>  error occurred.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ParseErrorEvent",
            "navPath": "@nav[webpm-client]/MainModule.ParseErrorEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ParseErrorEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.ParseErrorEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 462,
                        "endLine": 463,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.ParseErrorEvent.id",
                            "CdnFetchEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ParseErrorEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.ParseErrorEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Failed'",
                        "implementation": "",
                        "startLine": 464,
                        "endLine": 465,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.ParseErrorEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ParseErrorEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.ParseErrorEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'ParseErrorEvent'",
                        "implementation": "",
                        "startLine": 461,
                        "endLine": 462,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.ParseErrorEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ParseErrorEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.ParseErrorEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 463,
                        "endLine": 464,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.ParseErrorEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class ParseErrorEvent implements CdnFetchEvent",
                "implementation": "export class ParseErrorEvent implements CdnFetchEvent {\n    public readonly step = 'ParseErrorEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Failed'\n    constructor(\n        public readonly targetName: string,\n        public readonly assetId: string,\n        public readonly url: string,\n        public readonly version: string,\n    ) {\n        this.id = targetName\n        this.text = `${targetName}: parsing the module/script failed`\n    }\n}",
                "startLine": 460,
                "endLine": 475,
                "references": {
                    "ParseErrorEvent": "@nav[webpm-client]/MainModule.ParseErrorEvent",
                    "CdnFetchEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id",
                    "CdnFetchEvent": "@nav[webpm-client]/MainModule.CdnFetchEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyEnvironmentErrorEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when installation of Pyodide environment failed.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyEnvironmentErrorEvent",
            "navPath": "@nav[webpm-client]/MainModule.PyEnvironmentErrorEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyEnvironmentErrorEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.PyEnvironmentErrorEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 786,
                        "endLine": 787,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.PyEnvironmentErrorEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyEnvironmentErrorEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.PyEnvironmentErrorEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Failed'",
                        "implementation": "",
                        "startLine": 788,
                        "endLine": 789,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.PyEnvironmentErrorEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyEnvironmentErrorEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.PyEnvironmentErrorEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'PyEnvironmentErrorEvent'",
                        "implementation": "",
                        "startLine": 785,
                        "endLine": 786,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.PyEnvironmentErrorEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyEnvironmentErrorEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.PyEnvironmentErrorEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 787,
                        "endLine": 788,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.PyEnvironmentErrorEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class PyEnvironmentErrorEvent implements CdnPyEvent",
                "implementation": "export class PyEnvironmentErrorEvent implements CdnPyEvent {\n    public readonly step = 'PyEnvironmentErrorEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Failed'\n    constructor(public readonly detail: string) {\n        this.id = `pyodide-environment-error`\n        this.text = detail\n    }\n}",
                "startLine": 784,
                "endLine": 794,
                "references": {
                    "PyEnvironmentErrorEvent": "@nav[webpm-client]/MainModule.PyEnvironmentErrorEvent",
                    "CdnPyEvent": "@nav[webpm-client]/MainModule.CdnPyEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyEnvironmentReadyEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when the Pyodide environment is ready.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyEnvironmentReadyEvent",
            "navPath": "@nav[webpm-client]/MainModule.PyEnvironmentReadyEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyEnvironmentReadyEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.PyEnvironmentReadyEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 772,
                        "endLine": 773,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.PyEnvironmentReadyEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyEnvironmentReadyEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.PyEnvironmentReadyEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 774,
                        "endLine": 775,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.PyEnvironmentReadyEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyEnvironmentReadyEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.PyEnvironmentReadyEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'PyEnvironmentReadyEvent'",
                        "implementation": "",
                        "startLine": 771,
                        "endLine": 772,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.PyEnvironmentReadyEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyEnvironmentReadyEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.PyEnvironmentReadyEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 773,
                        "endLine": 774,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.PyEnvironmentReadyEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class PyEnvironmentReadyEvent implements CdnPyEvent",
                "implementation": "export class PyEnvironmentReadyEvent implements CdnPyEvent {\n    public readonly step = 'PyEnvironmentReadyEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Pending'\n    constructor() {\n        this.id = `pyodide-environment-ready`\n        this.text = `Environment installed`\n    }\n}",
                "startLine": 770,
                "endLine": 780,
                "references": {
                    "PyEnvironmentReadyEvent": "@nav[webpm-client]/MainModule.PyEnvironmentReadyEvent",
                    "CdnPyEvent": "@nav[webpm-client]/MainModule.CdnPyEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyModuleErrorEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when loading a Pyodide module failed.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyModuleErrorEvent",
            "navPath": "@nav[webpm-client]/MainModule.PyModuleErrorEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyModuleErrorEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.PyModuleErrorEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 758,
                        "endLine": 759,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.PyModuleErrorEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyModuleErrorEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.PyModuleErrorEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Failed'",
                        "implementation": "",
                        "startLine": 760,
                        "endLine": 761,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.PyModuleErrorEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyModuleErrorEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.PyModuleErrorEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'PyModuleErrorEvent'",
                        "implementation": "",
                        "startLine": 757,
                        "endLine": 758,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.PyModuleErrorEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyModuleErrorEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.PyModuleErrorEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 759,
                        "endLine": 760,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.PyModuleErrorEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class PyModuleErrorEvent implements CdnPyEvent",
                "implementation": "export class PyModuleErrorEvent implements CdnPyEvent {\n    public readonly step = 'PyModuleErrorEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Failed'\n    constructor(public readonly name: string) {\n        this.id = `error-pyodide-module-${name}`\n        this.text = `Error loading ${this.name}`\n    }\n}",
                "startLine": 756,
                "endLine": 766,
                "references": {
                    "PyModuleErrorEvent": "@nav[webpm-client]/MainModule.PyModuleErrorEvent",
                    "CdnPyEvent": "@nav[webpm-client]/MainModule.CdnPyEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyModuleLoadedEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when a Pyodide module has been loaded.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyModuleLoadedEvent",
            "navPath": "@nav[webpm-client]/MainModule.PyModuleLoadedEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyModuleLoadedEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.PyModuleLoadedEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 744,
                        "endLine": 745,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.PyModuleLoadedEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyModuleLoadedEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.PyModuleLoadedEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 746,
                        "endLine": 747,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.PyModuleLoadedEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyModuleLoadedEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.PyModuleLoadedEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'PyModuleLoadedEvent'",
                        "implementation": "",
                        "startLine": 743,
                        "endLine": 744,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.PyModuleLoadedEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyModuleLoadedEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.PyModuleLoadedEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 745,
                        "endLine": 746,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.PyModuleLoadedEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class PyModuleLoadedEvent implements CdnPyEvent",
                "implementation": "export class PyModuleLoadedEvent implements CdnPyEvent {\n    public readonly step = 'PyModuleLoadedEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Pending'\n    constructor(public readonly name: string) {\n        this.id = `install-pyodide-module-${name}`\n        this.text = `Installing ${this.name}`\n    }\n}",
                "startLine": 742,
                "endLine": 752,
                "references": {
                    "PyModuleLoadedEvent": "@nav[webpm-client]/MainModule.PyModuleLoadedEvent",
                    "CdnPyEvent": "@nav[webpm-client]/MainModule.CdnPyEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyRuntimeReadyEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when the Pyodide runtime is ready.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyRuntimeReadyEvent",
            "navPath": "@nav[webpm-client]/MainModule.PyRuntimeReadyEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyRuntimeReadyEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.PyRuntimeReadyEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 702,
                        "endLine": 703,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.PyRuntimeReadyEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyRuntimeReadyEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.PyRuntimeReadyEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Succeeded'",
                        "implementation": "",
                        "startLine": 704,
                        "endLine": 705,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.PyRuntimeReadyEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyRuntimeReadyEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.PyRuntimeReadyEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'PyRuntimeReadyEvent'",
                        "implementation": "",
                        "startLine": 701,
                        "endLine": 702,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.PyRuntimeReadyEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyRuntimeReadyEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.PyRuntimeReadyEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 703,
                        "endLine": 704,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.PyRuntimeReadyEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class PyRuntimeReadyEvent implements CdnPyEvent",
                "implementation": "export class PyRuntimeReadyEvent implements CdnPyEvent {\n    public readonly step = 'PyRuntimeReadyEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Succeeded'\n    constructor(public readonly pyodideVersion: string) {\n        this.id = `ready-pyodide-${pyodideVersion}`\n        this.text = `Pyodide runtime ready`\n    }\n}",
                "startLine": 700,
                "endLine": 710,
                "references": {
                    "PyRuntimeReadyEvent": "@nav[webpm-client]/MainModule.PyRuntimeReadyEvent",
                    "CdnPyEvent": "@nav[webpm-client]/MainModule.CdnPyEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "SourceLoadedEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when a script's content transfer over HTTP network has completed.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "SourceLoadedEvent",
            "navPath": "@nav[webpm-client]/MainModule.SourceLoadedEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceLoadedEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.SourceLoadedEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 347,
                        "endLine": 348,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.SourceLoadedEvent.id",
                            "CdnFetchEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceLoadedEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.SourceLoadedEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 349,
                        "endLine": 350,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.SourceLoadedEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceLoadedEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.SourceLoadedEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'SourceLoadedEvent'",
                        "implementation": "",
                        "startLine": 346,
                        "endLine": 347,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.SourceLoadedEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceLoadedEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.SourceLoadedEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 348,
                        "endLine": 349,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.SourceLoadedEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class SourceLoadedEvent implements CdnFetchEvent",
                "implementation": "export class SourceLoadedEvent implements CdnFetchEvent {\n    public readonly step = 'SourceLoadedEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Pending'\n    constructor(\n        public readonly targetName: string,\n        public readonly assetId: string,\n        public readonly url: string,\n        public readonly version: string,\n        public readonly progress?: ProgressEvent<XMLHttpRequestEventTarget>,\n    ) {\n        this.id = targetName\n        this.text = `${targetName}: source fetched`\n    }\n}",
                "startLine": 345,
                "endLine": 361,
                "references": {
                    "SourceLoadedEvent": "@nav[webpm-client]/MainModule.SourceLoadedEvent",
                    "CdnFetchEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id",
                    "CdnFetchEvent": "@nav[webpm-client]/MainModule.CdnFetchEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "SourceLoadingEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when a script's content is transferring over HTTP network.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "SourceLoadingEvent",
            "navPath": "@nav[webpm-client]/MainModule.SourceLoadingEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceLoadingEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.SourceLoadingEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 327,
                        "endLine": 328,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.SourceLoadingEvent.id",
                            "CdnFetchEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceLoadingEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.SourceLoadingEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 329,
                        "endLine": 330,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.SourceLoadingEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceLoadingEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.SourceLoadingEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'SourceLoadingEvent'",
                        "implementation": "",
                        "startLine": 326,
                        "endLine": 327,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.SourceLoadingEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceLoadingEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.SourceLoadingEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 328,
                        "endLine": 329,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.SourceLoadingEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class SourceLoadingEvent implements CdnFetchEvent",
                "implementation": "export class SourceLoadingEvent implements CdnFetchEvent {\n    public readonly step = 'SourceLoadingEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Pending'\n    constructor(\n        public readonly targetName: string,\n        public readonly assetId: string,\n        public readonly url: string,\n        public readonly version: string,\n        public readonly progress: ProgressEvent<XMLHttpRequestEventTarget>,\n    ) {\n        this.id = targetName\n        this.text = `${targetName}: fetching over HTTP`\n    }\n}",
                "startLine": 325,
                "endLine": 341,
                "references": {
                    "SourceLoadingEvent": "@nav[webpm-client]/MainModule.SourceLoadingEvent",
                    "CdnFetchEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id",
                    "CdnFetchEvent": "@nav[webpm-client]/MainModule.CdnFetchEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "SourceParsedEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when a script's content has been parsed (installed).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "SourceParsedEvent",
            "navPath": "@nav[webpm-client]/MainModule.SourceParsedEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceParsedEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.SourceParsedEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 367,
                        "endLine": 368,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.SourceParsedEvent.id",
                            "CdnFetchEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceParsedEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.SourceParsedEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Succeeded'",
                        "implementation": "",
                        "startLine": 369,
                        "endLine": 370,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.SourceParsedEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceParsedEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.SourceParsedEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'SourceParsedEvent'",
                        "implementation": "",
                        "startLine": 366,
                        "endLine": 367,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.SourceParsedEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceParsedEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.SourceParsedEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 368,
                        "endLine": 369,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.SourceParsedEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class SourceParsedEvent implements CdnFetchEvent",
                "implementation": "export class SourceParsedEvent implements CdnFetchEvent {\n    public readonly step = 'SourceParsedEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Succeeded'\n    constructor(\n        public readonly targetName: string,\n        public readonly assetId: string,\n        public readonly url: string,\n        public readonly version: string,\n    ) {\n        this.id = targetName\n        this.text = `${targetName}: module/script imported`\n    }\n}",
                "startLine": 365,
                "endLine": 380,
                "references": {
                    "SourceParsedEvent": "@nav[webpm-client]/MainModule.SourceParsedEvent",
                    "CdnFetchEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id",
                    "CdnFetchEvent": "@nav[webpm-client]/MainModule.CdnFetchEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "SourceParsingFailed",
            "documentation": {
                "sections": [
                    {
                        "content": "Error occurring while parsing a source content of a script. See also  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.ParseErrorEvent\" semantic=\"class\">ParseErrorEvent</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "SourceParsingFailed",
            "navPath": "@nav[webpm-client]/MainModule.SourceParsingFailed",
            "attributes": [
                {
                    "name": "stackTraceLimit",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The  `Error.stackTraceLimit`  property specifies the number of stack frames\ncollected by a stack trace (whether generated by  `new Error().stack`  or\n `Error.captureStackTrace(obj)` ).\n\nThe default value is  `10`  but may be set to any valid JavaScript number. Changes\nwill affect any stack trace captured _after_ the value has been changed.\n\nIf set to a non-number value, or set to a negative number, stack traces will\nnot capture any frames.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnError.stackTraceLimit",
                    "navPath": "@nav[webpm-client]/MainModule.CdnError.stackTraceLimit",
                    "code": {
                        "filePath": "",
                        "declaration": "",
                        "implementation": "",
                        "startLine": 1,
                        "endLine": 2,
                        "references": {}
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/errors.models.ts",
                "declaration": "export class SourceParsingFailed extends CdnError",
                "implementation": "export class SourceParsingFailed extends CdnError {\n    static exceptionType = 'SourceParsingFailed'\n\n    constructor(public readonly detail: { assetId; name; url; message }) {\n        super()\n    }\n\n    static isInstance(resp: CdnError): resp is SourceParsingFailed {\n        return (\n            'exceptionType' in resp &&\n            resp.exceptionType === SourceParsingFailed.exceptionType\n        )\n    }\n}",
                "startLine": 98,
                "endLine": 112,
                "references": {
                    "SourceParsingFailed": "@nav[webpm-client]/MainModule.SourceParsingFailed",
                    "CdnError.constructor": "@nav[webpm-client]/MainModule.CdnError.constructor",
                    "CdnError.message": "@nav[webpm-client]/MainModule.CdnError.message",
                    "CdnError.name": "@nav[webpm-client]/MainModule.CdnError.name",
                    "CdnError.stack": "@nav[webpm-client]/MainModule.CdnError.stack",
                    "CdnError.exceptionType": "@nav[webpm-client]/MainModule.CdnError.exceptionType",
                    "CdnError.stackTraceLimit": "@nav[webpm-client]/MainModule.CdnError.stackTraceLimit",
                    "CdnError.captureStackTrace": "@nav[webpm-client]/MainModule.CdnError.captureStackTrace",
                    "CdnError": "@nav[webpm-client]/MainModule.CdnError",
                    "CdnError.prepareStackTrace": "@nav[webpm-client]/MainModule.CdnError.prepareStackTrace"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "StartBackendEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Events emitted when a backend is started.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "StartBackendEvent",
            "navPath": "@nav[webpm-client]/MainModule.StartBackendEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.BackendEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 536,
                        "endLine": 537,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.BackendEvent.id",
                            "CdnEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.BackendEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status: 'Pending' | 'Failed'",
                        "implementation": "",
                        "startLine": 538,
                        "endLine": 539,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.BackendEvent.status",
                            "CdnEvent.status": "@nav[webpm-client]/MainModule.CdnEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.BackendEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step:\n        | 'DownloadBackendEvent'\n        | 'InstallBackendEvent'\n        | 'StartBackendEvent'\n        | 'BackendErrorEvent'",
                        "implementation": "",
                        "startLine": 539,
                        "endLine": 540,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.BackendEvent.step",
                            "CdnEvent.step": "@nav[webpm-client]/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.BackendEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 537,
                        "endLine": 538,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.BackendEvent.text",
                            "CdnEvent.text": "@nav[webpm-client]/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class StartBackendEvent extends BackendEvent",
                "implementation": "export class StartBackendEvent extends BackendEvent {\n    public readonly event: 'starting' | 'listening' | 'failed'\n    constructor(params: {\n        name: string\n        version: string\n        event: 'starting' | 'listening' | 'failed'\n    }) {\n        super(\n            'StartBackendEvent',\n            params.name,\n            params.version,\n            'starting...',\n            params.event,\n        )\n    }\n}",
                "startLine": 609,
                "endLine": 625,
                "references": {
                    "StartBackendEvent": "@nav[webpm-client]/MainModule.StartBackendEvent",
                    "BackendEvent.constructor": "@nav[webpm-client]/MainModule.BackendEvent.constructor",
                    "BackendEvent.event": "@nav[webpm-client]/MainModule.BackendEvent.event",
                    "BackendEvent.id": "@nav[webpm-client]/MainModule.BackendEvent.id",
                    "BackendEvent.name": "@nav[webpm-client]/MainModule.BackendEvent.name",
                    "BackendEvent.status": "@nav[webpm-client]/MainModule.BackendEvent.status",
                    "BackendEvent.step": "@nav[webpm-client]/MainModule.BackendEvent.step",
                    "BackendEvent.text": "@nav[webpm-client]/MainModule.BackendEvent.text",
                    "BackendEvent.title": "@nav[webpm-client]/MainModule.BackendEvent.title",
                    "BackendEvent.version": "@nav[webpm-client]/MainModule.BackendEvent.version",
                    "BackendEvent": "@nav[webpm-client]/MainModule.BackendEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "StartEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when starting to fetch a script.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "StartEvent",
            "navPath": "@nav[webpm-client]/MainModule.StartEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.StartEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 308,
                        "endLine": 309,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.StartEvent.id",
                            "CdnFetchEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.StartEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 310,
                        "endLine": 311,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.StartEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.StartEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'StartEvent'",
                        "implementation": "",
                        "startLine": 307,
                        "endLine": 308,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.StartEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.StartEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 309,
                        "endLine": 310,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.StartEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class StartEvent implements CdnFetchEvent",
                "implementation": "export class StartEvent implements CdnFetchEvent {\n    public readonly step = 'StartEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Pending'\n    constructor(\n        public readonly targetName: string,\n        public readonly assetId: string,\n        public readonly url: string,\n        public readonly version: string,\n    ) {\n        this.id = targetName\n        this.text = `${targetName}: start importing`\n    }\n}",
                "startLine": 306,
                "endLine": 321,
                "references": {
                    "StartEvent": "@nav[webpm-client]/MainModule.StartEvent",
                    "CdnFetchEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id",
                    "CdnFetchEvent": "@nav[webpm-client]/MainModule.CdnFetchEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "StartInstallEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when starting to install.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "StartInstallEvent",
            "navPath": "@nav[webpm-client]/MainModule.StartInstallEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartInstallEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.StartInstallEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id = 'StartInstallEvent'",
                        "implementation": "",
                        "startLine": 293,
                        "endLine": 294,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.StartInstallEvent.id",
                            "CdnEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartInstallEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.StartInstallEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'None'",
                        "implementation": "",
                        "startLine": 295,
                        "endLine": 296,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.StartInstallEvent.status",
                            "CdnEvent.status": "@nav[webpm-client]/MainModule.CdnEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartInstallEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.StartInstallEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'StartInstallEvent'",
                        "implementation": "",
                        "startLine": 292,
                        "endLine": 293,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.StartInstallEvent.step",
                            "CdnEvent.step": "@nav[webpm-client]/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartInstallEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.StartInstallEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text = 'Start install'",
                        "implementation": "",
                        "startLine": 294,
                        "endLine": 295,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.StartInstallEvent.text",
                            "CdnEvent.text": "@nav[webpm-client]/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class StartInstallEvent implements CdnEvent",
                "implementation": "export class StartInstallEvent implements CdnEvent {\n    public readonly step = 'StartInstallEvent'\n    public readonly id = 'StartInstallEvent'\n    public readonly text = 'Start install'\n    public readonly status = 'None'\n    constructor(\n        public readonly esm: EsmInputs,\n        public readonly pyodide: PyodideInputs,\n        public readonly backends: BackendInputs,\n        public readonly css: CssInput[],\n    ) {}\n}",
                "startLine": 291,
                "endLine": 303,
                "references": {
                    "StartInstallEvent": "@nav[webpm-client]/MainModule.StartInstallEvent",
                    "EsmInputs": "@nav[webpm-client]/MainModule.EsmInputs",
                    "PyodideInputs": "@nav[webpm-client]/MainModule.PyodideInputs",
                    "BackendInputs": "@nav[webpm-client]/MainModule.BackendInputs",
                    "CssInput": "@nav[webpm-client]/MainModule.CssInput",
                    "CdnEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id",
                    "CdnEvent.status": "@nav[webpm-client]/MainModule.CdnEvent.status",
                    "CdnEvent.step": "@nav[webpm-client]/MainModule.CdnEvent.step",
                    "CdnEvent.text": "@nav[webpm-client]/MainModule.CdnEvent.text",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "StartPyEnvironmentInstallEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when starting to install Pyodide environment.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "StartPyEnvironmentInstallEvent",
            "navPath": "@nav[webpm-client]/MainModule.StartPyEnvironmentInstallEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartPyEnvironmentInstallEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.StartPyEnvironmentInstallEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 716,
                        "endLine": 717,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.StartPyEnvironmentInstallEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartPyEnvironmentInstallEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.StartPyEnvironmentInstallEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 718,
                        "endLine": 719,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.StartPyEnvironmentInstallEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartPyEnvironmentInstallEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.StartPyEnvironmentInstallEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'StartPyEnvironmentInstallEvent'",
                        "implementation": "",
                        "startLine": 715,
                        "endLine": 716,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.StartPyEnvironmentInstallEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartPyEnvironmentInstallEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.StartPyEnvironmentInstallEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 717,
                        "endLine": 718,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.StartPyEnvironmentInstallEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class StartPyEnvironmentInstallEvent implements CdnPyEvent",
                "implementation": "export class StartPyEnvironmentInstallEvent implements CdnPyEvent {\n    public readonly step = 'StartPyEnvironmentInstallEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Pending'\n    constructor() {\n        this.id = `install-pyodide-dependencies`\n        this.text = `Install dependencies`\n    }\n}",
                "startLine": 714,
                "endLine": 724,
                "references": {
                    "StartPyEnvironmentInstallEvent": "@nav[webpm-client]/MainModule.StartPyEnvironmentInstallEvent",
                    "CdnPyEvent": "@nav[webpm-client]/MainModule.CdnPyEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "StartPyRuntimeEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when starting to install Pyodide runtime.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "StartPyRuntimeEvent",
            "navPath": "@nav[webpm-client]/MainModule.StartPyRuntimeEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartPyRuntimeEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.StartPyRuntimeEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 688,
                        "endLine": 689,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.StartPyRuntimeEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartPyRuntimeEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.StartPyRuntimeEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 690,
                        "endLine": 691,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.StartPyRuntimeEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartPyRuntimeEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.StartPyRuntimeEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'StartPyRuntimeEvent'",
                        "implementation": "",
                        "startLine": 687,
                        "endLine": 688,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.StartPyRuntimeEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartPyRuntimeEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.StartPyRuntimeEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 689,
                        "endLine": 690,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.StartPyRuntimeEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class StartPyRuntimeEvent implements CdnPyEvent",
                "implementation": "export class StartPyRuntimeEvent implements CdnPyEvent {\n    public readonly step = 'StartPyRuntimeEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Pending'\n    constructor(public readonly pyodideVersion: string) {\n        this.id = `start-pyodide-${pyodideVersion}`\n        this.text = `Start pyodide runtime`\n    }\n}",
                "startLine": 686,
                "endLine": 696,
                "references": {
                    "StartPyRuntimeEvent": "@nav[webpm-client]/MainModule.StartPyRuntimeEvent",
                    "CdnPyEvent": "@nav[webpm-client]/MainModule.CdnPyEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "StateImplementation",
            "documentation": {
                "sections": [
                    {
                        "content": "Singleton object that gathers history of fetched modules, scripts & CSS.\nIt also acts as a cache store.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "StateImplementation",
            "navPath": "@nav[webpm-client]/MainModule.StateImplementation",
            "attributes": [
                {
                    "name": "esModules",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "ES modules installed.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StateImplementation.esModules",
                    "navPath": "@nav[webpm-client]/MainModule.StateImplementation.esModules",
                    "code": {
                        "filePath": "src/lib/state.ts",
                        "declaration": "static esModules = new Map<\n        LibraryName,\n        {\n            version: Version\n            versionNumber: number\n            exportPath: string[]\n            apiKey: string\n        }[]\n    >([\n        [\n            pkgJson.name,\n            [\n                {\n                    version: pkgJson.version,\n                    apiKey: pkgJson.webpack.apiVersion,\n                    exportPath: [pkgJson.name],\n                    versionNumber: 0,\n                },\n            ],\n        ],\n    ])",
                        "implementation": "",
                        "startLine": 65,
                        "endLine": 66,
                        "references": {
                            "esModules": "@nav[webpm-client]/MainModule.StateImplementation.esModules"
                        }
                    }
                },
                {
                    "name": "importedLoadingGraphs",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Installed loading graph: mapping between a loading graph's body uid and window state",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StateImplementation.importedLoadingGraphs",
                    "navPath": "@nav[webpm-client]/MainModule.StateImplementation.importedLoadingGraphs",
                    "code": {
                        "filePath": "src/lib/state.ts",
                        "declaration": "static importedLoadingGraphs = new Map<string, Promise<Window>>()",
                        "implementation": "",
                        "startLine": 103,
                        "endLine": 104,
                        "references": {
                            "importedLoadingGraphs": "@nav[webpm-client]/MainModule.StateImplementation.importedLoadingGraphs"
                        }
                    }
                },
                {
                    "name": "locks",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Union of all elements retrieved from  `locks`  attribute of installed loading graph.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StateImplementation.locks",
                    "navPath": "@nav[webpm-client]/MainModule.StateImplementation.locks",
                    "code": {
                        "filePath": "src/lib/state.ts",
                        "declaration": "static locks: Library[] = []",
                        "implementation": "",
                        "startLine": 61,
                        "endLine": 62,
                        "references": {
                            "locks": "@nav[webpm-client]/MainModule.StateImplementation.locks",
                            "Library": "@nav[webpm-client]/MainModule.Library"
                        }
                    }
                },
                {
                    "name": "pyModules",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Pyodide modules installed.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StateImplementation.pyModules",
                    "navPath": "@nav[webpm-client]/MainModule.StateImplementation.pyModules",
                    "code": {
                        "filePath": "src/lib/state.ts",
                        "declaration": "static pyModules: string[] = []",
                        "implementation": "",
                        "startLine": 89,
                        "endLine": 90,
                        "references": {
                            "pyModules": "@nav[webpm-client]/MainModule.StateImplementation.pyModules"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "isCompatibleEsmInstalled",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Return whether a library at given version is already installed with a compatible version.\nCompatible version means a greater version with same API key.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **name**: library name\n*  **version**: version",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StateImplementation.isCompatibleEsmInstalled",
                    "navPath": "@nav[webpm-client]/MainModule.StateImplementation.isCompatibleEsmInstalled",
                    "code": {
                        "filePath": "src/lib/state.ts",
                        "declaration": "static isCompatibleEsmInstalled(\n    name: string,\n    version: string,\n    apiKey: string,\n): boolean",
                        "implementation": "static isCompatibleEsmInstalled(\n    name: string,\n    version: string,\n    apiKey: string,\n): boolean {\n    if (name === pkgJson.name) {\n        const symbol = `${pkgJson.name}_APIv${pkgJson.webpack.apiVersion}`\n        const alreadyHere = (window as unknown as never)[symbol] as\n            | { version: string }\n            | undefined\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const compatibleInstalled: boolean | undefined =\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n            alreadyHere && gte(alreadyHere.version, version)\n        return compatibleInstalled ?? false\n    }\n    const module = StateImplementation.esModules.get(name)\n    if (!module) {\n        return false\n    }\n    const versions = module.map((item) => item.version)\n    if (versions.includes(version)) {\n        return true\n    }\n\n    const compatibleVersion = module\n        .filter((v) => v.apiKey === apiKey)\n        .find((installedVersion) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n            return gt(installedVersion.version, version)\n        })\n\n    if (compatibleVersion) {\n        console.log(\n            `${name}: a greater compatible version is already installed (${compatibleVersion.version}), skip install`,\n            {\n                libName: name,\n                queriedVersion: version,\n                compatibleVersion,\n            },\n        )\n    }\n    return compatibleVersion !== undefined\n}",
                        "startLine": 164,
                        "endLine": 208,
                        "references": {
                            "isCompatibleEsmInstalled": "@nav[webpm-client]/MainModule.StateImplementation.isCompatibleEsmInstalled"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "isEsmSatisfied",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Return whether an ESM already installed match a given semver query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **name**: Module's name.\n*  **semver**: Semantic versioning query.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StateImplementation.isEsmSatisfied",
                    "navPath": "@nav[webpm-client]/MainModule.StateImplementation.isEsmSatisfied",
                    "code": {
                        "filePath": "src/lib/state.ts",
                        "declaration": "static isEsmSatisfied(name: string, semver: string)",
                        "implementation": "static isEsmSatisfied(name: string, semver: string) {\n    const versions = StateImplementation.esModules.get(name)\n    if (!versions) {\n        return false\n    }\n    return versions.find((v) =>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n        satisfies(\n            v.version.replace('-wip', ''),\n            semver.replace('-wip', ''),\n        ),\n    )\n}",
                        "startLine": 144,
                        "endLine": 157,
                        "references": {
                            "isEsmSatisfied": "@nav[webpm-client]/MainModule.StateImplementation.isEsmSatisfied"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/state.ts",
                "declaration": "export class StateImplementation",
                "implementation": "export class StateImplementation {\n    /**\n     * Union of all elements retrieved from `locks` attribute of installed loading graph.\n     */\n    static locks: Library[] = []\n    /**\n     * ES modules installed.\n     */\n    static esModules = new Map<\n        LibraryName,\n        {\n            version: Version\n            versionNumber: number\n            exportPath: string[]\n            apiKey: string\n        }[]\n    >([\n        [\n            pkgJson.name,\n            [\n                {\n                    version: pkgJson.version,\n                    apiKey: pkgJson.webpack.apiVersion,\n                    exportPath: [pkgJson.name],\n                    versionNumber: 0,\n                },\n            ],\n        ],\n    ])\n    /**\n     * Pyodide modules installed.\n     */\n    static pyModules: string[] = []\n\n    /**\n     * Fetched loading graph: mapping between a loading graph's body uid and corresponding computed loading graph.\n     * @hidden\n     */\n    static fetchedLoadingGraph = new Map<\n        string,\n        Promise<LoadingGraph | CdnError>\n    >()\n\n    /**\n     * Installed loading graph: mapping between a loading graph's body uid and window state\n     */\n    static importedLoadingGraphs = new Map<string, Promise<Window>>()\n\n    /**\n     * Fetched scripts: mapping between a script's uid and their source as {@link FetchedScript}.\n     * @hidden\n     */\n    static fetchedScripts = new Map<string, Promise<FetchedScript>>()\n\n    /**\n     * Installed scripts: list of scripts' URL installed.\n     * @hidden\n     */\n    static installedScripts: string[] = []\n\n    static webSocketsStore: Record<\n        string,\n        Promise<Observable<ContextMessage>>\n    > = {}\n\n    static getWebSocket(wsUrl: string): Promise<Observable<ContextMessage>> {\n        if (wsUrl in StateImplementation.webSocketsStore) {\n            return StateImplementation.webSocketsStore[wsUrl]\n        }\n        StateImplementation.webSocketsStore[wsUrl] =\n            installBackendClientDeps().then(\n                ({ http }: { http: typeof HttpClients }) => {\n                    return new http.WebSocketClient<ContextMessage>(\n                        wsUrl,\n                    ).connectWs()\n                },\n            )\n        return StateImplementation.webSocketsStore[wsUrl]\n    }\n\n    /**\n     * Return whether an ESM already installed match a given semver query.\n     *\n     * @param name Module's name.\n     * @param semver Semantic versioning query.\n     */\n\n    static isEsmSatisfied(name: string, semver: string) {\n        const versions = StateImplementation.esModules.get(name)\n        if (!versions) {\n            return false\n        }\n        return versions.find((v) =>\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n            satisfies(\n                v.version.replace('-wip', ''),\n                semver.replace('-wip', ''),\n            ),\n        )\n    }\n    /**\n     * Return whether a library at given version is already installed with a compatible version.\n     * Compatible version means a greater version with same API key.\n     *\n     * @param name library name\n     * @param version version\n     */\n    static isCompatibleEsmInstalled(\n        name: string,\n        version: string,\n        apiKey: string,\n    ): boolean {\n        if (name === pkgJson.name) {\n            const symbol = `${pkgJson.name}_APIv${pkgJson.webpack.apiVersion}`\n            const alreadyHere = (window as unknown as never)[symbol] as\n                | { version: string }\n                | undefined\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const compatibleInstalled: boolean | undefined =\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                alreadyHere && gte(alreadyHere.version, version)\n            return compatibleInstalled ?? false\n        }\n        const module = StateImplementation.esModules.get(name)\n        if (!module) {\n            return false\n        }\n        const versions = module.map((item) => item.version)\n        if (versions.includes(version)) {\n            return true\n        }\n\n        const compatibleVersion = module\n            .filter((v) => v.apiKey === apiKey)\n            .find((installedVersion) => {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                return gt(installedVersion.version, version)\n            })\n\n        if (compatibleVersion) {\n            console.log(\n                `${name}: a greater compatible version is already installed (${compatibleVersion.version}), skip install`,\n                {\n                    libName: name,\n                    queriedVersion: version,\n                    compatibleVersion,\n                },\n            )\n        }\n        return compatibleVersion !== undefined\n    }\n\n    /**\n     * @param aliases\n     * @param executingWindow\n     * @hidden\n     */\n    static extractAliases(\n        aliases: Record<string, string | ((Window) => unknown)>,\n        unwrapDefault: boolean,\n        executingWindow: WindowOrWorkerGlobalScope,\n    ) {\n        type Module = Record<string, unknown>\n        type MaybeModule = Module | undefined\n        return Object.entries(aliases).reduce((acc, [alias, original]) => {\n            let pointed: MaybeModule = undefined\n            if (typeof original == 'string') {\n                const name = original.split('#')[0]\n                const semver = original\n                    .split('#')[1]\n                    .replace('-wip', '')\n                    .replace('latest', 'x')\n                const versions = StateImplementation.esModules.get(name)\n                if (!versions) {\n                    console.warn(\n                        `Can not create alias: target module '${name}' is not installed`,\n                    )\n                    return acc\n                }\n                const version = versions.find((v) =>\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                    satisfies(v.version.replace('-wip', ''), semver),\n                )\n                if (!version) {\n                    console.warn(\n                        `Can not create alias: no versions of '${name}' match the target semver ${semver}`,\n                        { versions },\n                    )\n                    return acc\n                }\n\n                const path = version.exportPath\n                pointed = path.reduce((acc: MaybeModule, e: string) => {\n                    if (!acc) {\n                        return undefined\n                    }\n                    if (unwrapDefault) {\n                        return unwrapPreserveDefault(acc[e])\n                    }\n                    return acc[e]\n                }, executingWindow) as MaybeModule\n            } else {\n                pointed = original(executingWindow) as MaybeModule\n            }\n            if (!pointed) {\n                console.warn('can not create alias', { alias, original })\n                return acc\n            }\n            return { ...acc, [alias]: pointed }\n        }, {})\n    }\n\n    /**\n     * Update the various properties after new modules have been imported.\n     *\n     * @param modules modules installed\n     * @param executingWindow the executing window (where to expose the latest version if change need be).\n     * @hidden\n     */\n    static registerEsmModules(\n        modules: {\n            name: string\n            version: string\n            exportPath: string[]\n            aliases?: string[]\n            apiKey: string\n            versionNumber: number\n        }[],\n        executingWindow: WindowOrWorkerGlobalScope,\n    ) {\n        type Module = Record<string, unknown>\n        type MaybeModule = Module | undefined\n        modules.forEach(\n            ({ name, version, exportPath, apiKey, versionNumber, aliases }) => {\n                const existingVersions =\n                    StateImplementation.esModules.get(name) ?? []\n                const item = {\n                    version,\n                    exportPath,\n                    aliases,\n                    apiKey,\n                    versionNumber,\n                }\n                const versions = [...existingVersions, item].sort(\n                    (a, b) => b.versionNumber - a.versionNumber,\n                )\n                StateImplementation.esModules.set(name, versions)\n                const exported = exportPath.reduce(\n                    (acc: MaybeModule, e: string) => (acc ? acc[e] : undefined),\n                    executingWindow,\n                ) as MaybeModule\n                if (!exported) {\n                    console.error(\n                        `Can not find exported symbol of '${name}#${version}' at export: ${String(exportPath)}`,\n                    )\n                    return\n                }\n                if (!aliases) {\n                    return\n                }\n                aliases.forEach((alias) => {\n                    if (alias.includes(':')) {\n                        const baseName = alias.split(':')[0]\n                        const property = alias.split(':')[1]\n                        executingWindow[baseName] = exported[property]\n                        return\n                    }\n                    executingWindow[alias] = exported\n                })\n            },\n        )\n    }\n    /**\n     * Register imported python modules.\n     *\n     * @param pyModules Name of the python modules.\n     * @hidden\n     */\n    static registerImportedPyModules(pyModules: string[]) {\n        StateImplementation.pyModules = [\n            ...StateImplementation.pyModules,\n            ...pyModules,\n        ]\n    }\n}",
                "startLine": 57,
                "endLine": 342,
                "references": {
                    "StateImplementation": "@nav[webpm-client]/MainModule.StateImplementation",
                    "Library": "@nav[webpm-client]/MainModule.Library",
                    "Observable": "https://rxjs.dev/guide/observable"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Unauthorized",
            "documentation": {
                "sections": [
                    {
                        "content": "Error related to 401 response. See also  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.UnauthorizedEvent\" semantic=\"class\">UnauthorizedEvent</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Unauthorized",
            "navPath": "@nav[webpm-client]/MainModule.Unauthorized",
            "attributes": [
                {
                    "name": "stackTraceLimit",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The  `Error.stackTraceLimit`  property specifies the number of stack frames\ncollected by a stack trace (whether generated by  `new Error().stack`  or\n `Error.captureStackTrace(obj)` ).\n\nThe default value is  `10`  but may be set to any valid JavaScript number. Changes\nwill affect any stack trace captured _after_ the value has been changed.\n\nIf set to a non-number value, or set to a negative number, stack traces will\nnot capture any frames.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnError.stackTraceLimit",
                    "navPath": "@nav[webpm-client]/MainModule.CdnError.stackTraceLimit",
                    "code": {
                        "filePath": "",
                        "declaration": "",
                        "implementation": "",
                        "startLine": 1,
                        "endLine": 2,
                        "references": {}
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/errors.models.ts",
                "declaration": "export class Unauthorized extends CdnError",
                "implementation": "export class Unauthorized extends CdnError {\n    static exceptionType = 'Unauthorized'\n\n    constructor(public readonly detail: { assetId; name; url }) {\n        super()\n    }\n\n    static isInstance(resp: CdnError): resp is Unauthorized {\n        return (\n            'exceptionType' in resp &&\n            resp.exceptionType === Unauthorized.exceptionType\n        )\n    }\n}",
                "startLine": 38,
                "endLine": 52,
                "references": {
                    "Unauthorized": "@nav[webpm-client]/MainModule.Unauthorized",
                    "CdnError.constructor": "@nav[webpm-client]/MainModule.CdnError.constructor",
                    "CdnError.message": "@nav[webpm-client]/MainModule.CdnError.message",
                    "CdnError.name": "@nav[webpm-client]/MainModule.CdnError.name",
                    "CdnError.stack": "@nav[webpm-client]/MainModule.CdnError.stack",
                    "CdnError.exceptionType": "@nav[webpm-client]/MainModule.CdnError.exceptionType",
                    "CdnError.stackTraceLimit": "@nav[webpm-client]/MainModule.CdnError.stackTraceLimit",
                    "CdnError.captureStackTrace": "@nav[webpm-client]/MainModule.CdnError.captureStackTrace",
                    "CdnError": "@nav[webpm-client]/MainModule.CdnError",
                    "CdnError.prepareStackTrace": "@nav[webpm-client]/MainModule.CdnError.prepareStackTrace"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "UnauthorizedEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when an  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.Unauthorized\" semantic=\"class\">Unauthorized</mkapi-api-link>  error occurred.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "UnauthorizedEvent",
            "navPath": "@nav[webpm-client]/MainModule.UnauthorizedEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "UnauthorizedEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.UnauthorizedEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 424,
                        "endLine": 425,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.UnauthorizedEvent.id",
                            "CdnFetchEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "UnauthorizedEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.UnauthorizedEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Failed'",
                        "implementation": "",
                        "startLine": 426,
                        "endLine": 427,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.UnauthorizedEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "UnauthorizedEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.UnauthorizedEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'UnauthorizedEvent'",
                        "implementation": "",
                        "startLine": 423,
                        "endLine": 424,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.UnauthorizedEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "UnauthorizedEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.UnauthorizedEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 425,
                        "endLine": 426,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.UnauthorizedEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class UnauthorizedEvent implements CdnFetchEvent",
                "implementation": "export class UnauthorizedEvent implements CdnFetchEvent {\n    public readonly step = 'UnauthorizedEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Failed'\n    constructor(\n        public readonly targetName: string,\n        public readonly assetId: string,\n        public readonly url: string,\n        public readonly version: string,\n    ) {\n        this.id = targetName\n        this.text = `${targetName}: unauthorized to access the resource`\n    }\n}",
                "startLine": 422,
                "endLine": 437,
                "references": {
                    "UnauthorizedEvent": "@nav[webpm-client]/MainModule.UnauthorizedEvent",
                    "CdnFetchEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id",
                    "CdnFetchEvent": "@nav[webpm-client]/MainModule.CdnFetchEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "UrlNotFound",
            "documentation": {
                "sections": [
                    {
                        "content": "Error related to 404 response. See also  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.UrlNotFoundEvent\" semantic=\"class\">UrlNotFoundEvent</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "UrlNotFound",
            "navPath": "@nav[webpm-client]/MainModule.UrlNotFound",
            "attributes": [
                {
                    "name": "stackTraceLimit",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The  `Error.stackTraceLimit`  property specifies the number of stack frames\ncollected by a stack trace (whether generated by  `new Error().stack`  or\n `Error.captureStackTrace(obj)` ).\n\nThe default value is  `10`  but may be set to any valid JavaScript number. Changes\nwill affect any stack trace captured _after_ the value has been changed.\n\nIf set to a non-number value, or set to a negative number, stack traces will\nnot capture any frames.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnError.stackTraceLimit",
                    "navPath": "@nav[webpm-client]/MainModule.CdnError.stackTraceLimit",
                    "code": {
                        "filePath": "",
                        "declaration": "",
                        "implementation": "",
                        "startLine": 1,
                        "endLine": 2,
                        "references": {}
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/errors.models.ts",
                "declaration": "export class UrlNotFound extends CdnError",
                "implementation": "export class UrlNotFound extends CdnError {\n    static exceptionType = 'UrlNotFound'\n\n    constructor(public readonly detail: { assetId; name; url }) {\n        super()\n    }\n\n    static isInstance(resp: CdnError): resp is UrlNotFound {\n        return (\n            'exceptionType' in resp &&\n            resp.exceptionType === UrlNotFound.exceptionType\n        )\n    }\n}",
                "startLine": 58,
                "endLine": 72,
                "references": {
                    "UrlNotFound": "@nav[webpm-client]/MainModule.UrlNotFound",
                    "CdnError.constructor": "@nav[webpm-client]/MainModule.CdnError.constructor",
                    "CdnError.message": "@nav[webpm-client]/MainModule.CdnError.message",
                    "CdnError.name": "@nav[webpm-client]/MainModule.CdnError.name",
                    "CdnError.stack": "@nav[webpm-client]/MainModule.CdnError.stack",
                    "CdnError.exceptionType": "@nav[webpm-client]/MainModule.CdnError.exceptionType",
                    "CdnError.stackTraceLimit": "@nav[webpm-client]/MainModule.CdnError.stackTraceLimit",
                    "CdnError.captureStackTrace": "@nav[webpm-client]/MainModule.CdnError.captureStackTrace",
                    "CdnError": "@nav[webpm-client]/MainModule.CdnError",
                    "CdnError.prepareStackTrace": "@nav[webpm-client]/MainModule.CdnError.prepareStackTrace"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "UrlNotFoundEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when an  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.UrlNotFound\" semantic=\"class\">UrlNotFound</mkapi-api-link>  error occurred.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "UrlNotFoundEvent",
            "navPath": "@nav[webpm-client]/MainModule.UrlNotFoundEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "UrlNotFoundEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.UrlNotFoundEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 443,
                        "endLine": 444,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.UrlNotFoundEvent.id",
                            "CdnFetchEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "UrlNotFoundEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.UrlNotFoundEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Failed'",
                        "implementation": "",
                        "startLine": 445,
                        "endLine": 446,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.UrlNotFoundEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "UrlNotFoundEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.UrlNotFoundEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'UrlNotFoundEvent'",
                        "implementation": "",
                        "startLine": 442,
                        "endLine": 443,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.UrlNotFoundEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "UrlNotFoundEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.UrlNotFoundEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 444,
                        "endLine": 445,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.UrlNotFoundEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class UrlNotFoundEvent implements CdnFetchEvent",
                "implementation": "export class UrlNotFoundEvent implements CdnFetchEvent {\n    public readonly step = 'UrlNotFoundEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Failed'\n    constructor(\n        public readonly targetName: string,\n        public readonly assetId: string,\n        public readonly url: string,\n        public readonly version: string,\n    ) {\n        this.id = targetName\n        this.text = `${targetName}: resource not found at ${url}`\n    }\n}",
                "startLine": 441,
                "endLine": 456,
                "references": {
                    "UrlNotFoundEvent": "@nav[webpm-client]/MainModule.UrlNotFoundEvent",
                    "CdnFetchEvent.id": "@nav[webpm-client]/MainModule.CdnEvent.id",
                    "CdnFetchEvent": "@nav[webpm-client]/MainModule.CdnFetchEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "AllEvents",
            "documentation": {
                "sections": [
                    {
                        "content": "Type map for all events.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "AllEvents",
            "navPath": "@nav[webpm-client]/MainModule.AllEvents",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export interface AllEvents",
                "implementation": "export interface AllEvents {\n    CdnMessageEvent: CdnMessageEvent\n    CdnLoadingGraphQueryEvent: CdnLoadingGraphQueryEvent\n    CdnLoadingGraphResolvedEvent: CdnLoadingGraphResolvedEvent\n    CdnLoadingGraphErrorEvent: CdnLoadingGraphErrorEvent\n    InstallDoneEvent: InstallDoneEvent\n    InstallErrorEvent: InstallErrorEvent\n    StartEvent: StartEvent\n    SourceLoadingEvent: SourceLoadingEvent\n    SourceLoadedEvent: SourceLoadedEvent\n    SourceParsedEvent: SourceParsedEvent\n    CssLoadingEvent: CssLoadingEvent\n    CssParsedEvent: CssParsedEvent\n    UnauthorizedEvent: UnauthorizedEvent\n    UrlNotFoundEvent: UrlNotFoundEvent\n    ParseErrorEvent: ParseErrorEvent\n    FetchPyRuntimeEvent: FetchPyRuntimeEvent\n    FetchedPyRuntimeEvent: FetchedPyRuntimeEvent\n    StartPyRuntimeEvent: StartPyRuntimeEvent\n    PyRuntimeReadyEvent: PyRuntimeReadyEvent\n    StartPyEnvironmentInstallEvent: StartPyEnvironmentInstallEvent\n    InstallPyModuleEvent: InstallPyModuleEvent\n    PyModuleLoadedEvent: PyModuleLoadedEvent\n    PyModuleErrorEvent: PyModuleErrorEvent\n    PyEnvironmentReadyEvent: PyEnvironmentReadyEvent\n    PyEnvironmentErrorEvent: PyEnvironmentErrorEvent\n    ConsoleEvent: ConsoleEvent\n    DownloadBackendEvent: DownloadBackendEvent\n    InstallBackendEvent: InstallBackendEvent\n    StartBackendEvent: StartBackendEvent\n    BackendErrorEvent: BackendErrorEvent\n}",
                "startLine": 24,
                "endLine": 56,
                "references": {
                    "AllEvents": "@nav[webpm-client]/MainModule.AllEvents",
                    "BackendErrorEvent": "@nav[webpm-client]/MainModule.BackendErrorEvent",
                    "CdnLoadingGraphErrorEvent": "@nav[webpm-client]/MainModule.CdnLoadingGraphErrorEvent",
                    "CdnLoadingGraphQueryEvent": "@nav[webpm-client]/MainModule.CdnLoadingGraphQueryEvent",
                    "CdnLoadingGraphResolvedEvent": "@nav[webpm-client]/MainModule.CdnLoadingGraphResolvedEvent",
                    "CdnMessageEvent": "@nav[webpm-client]/MainModule.CdnMessageEvent",
                    "ConsoleEvent": "@nav[webpm-client]/MainModule.ConsoleEvent",
                    "CssLoadingEvent": "@nav[webpm-client]/MainModule.CssLoadingEvent",
                    "CssParsedEvent": "@nav[webpm-client]/MainModule.CssParsedEvent",
                    "DownloadBackendEvent": "@nav[webpm-client]/MainModule.DownloadBackendEvent",
                    "FetchedPyRuntimeEvent": "@nav[webpm-client]/MainModule.FetchedPyRuntimeEvent",
                    "FetchPyRuntimeEvent": "@nav[webpm-client]/MainModule.FetchPyRuntimeEvent",
                    "InstallBackendEvent": "@nav[webpm-client]/MainModule.InstallBackendEvent",
                    "InstallDoneEvent": "@nav[webpm-client]/MainModule.InstallDoneEvent",
                    "InstallErrorEvent": "@nav[webpm-client]/MainModule.InstallErrorEvent",
                    "InstallPyModuleEvent": "@nav[webpm-client]/MainModule.InstallPyModuleEvent",
                    "ParseErrorEvent": "@nav[webpm-client]/MainModule.ParseErrorEvent",
                    "PyEnvironmentErrorEvent": "@nav[webpm-client]/MainModule.PyEnvironmentErrorEvent",
                    "PyEnvironmentReadyEvent": "@nav[webpm-client]/MainModule.PyEnvironmentReadyEvent",
                    "PyModuleErrorEvent": "@nav[webpm-client]/MainModule.PyModuleErrorEvent",
                    "PyModuleLoadedEvent": "@nav[webpm-client]/MainModule.PyModuleLoadedEvent",
                    "PyRuntimeReadyEvent": "@nav[webpm-client]/MainModule.PyRuntimeReadyEvent",
                    "SourceLoadedEvent": "@nav[webpm-client]/MainModule.SourceLoadedEvent",
                    "SourceLoadingEvent": "@nav[webpm-client]/MainModule.SourceLoadingEvent",
                    "SourceParsedEvent": "@nav[webpm-client]/MainModule.SourceParsedEvent",
                    "StartBackendEvent": "@nav[webpm-client]/MainModule.StartBackendEvent",
                    "StartEvent": "@nav[webpm-client]/MainModule.StartEvent",
                    "StartPyEnvironmentInstallEvent": "@nav[webpm-client]/MainModule.StartPyEnvironmentInstallEvent",
                    "StartPyRuntimeEvent": "@nav[webpm-client]/MainModule.StartPyRuntimeEvent",
                    "UnauthorizedEvent": "@nav[webpm-client]/MainModule.UnauthorizedEvent",
                    "UrlNotFoundEvent": "@nav[webpm-client]/MainModule.UrlNotFoundEvent"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "BackendClient",
            "documentation": {
                "sections": [
                    {
                        "content": "Backend client.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BackendClient",
            "navPath": "@nav[webpm-client]/MainModule.BackendClient",
            "attributes": [
                {
                    "name": "apiKey",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "API key.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.apiKey",
                    "navPath": "@nav[webpm-client]/MainModule.BackendClient.apiKey",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "apiKey: string",
                        "implementation": "",
                        "startLine": 244,
                        "endLine": 245,
                        "references": {
                            "apiKey": "@nav[webpm-client]/MainModule.BackendClient.apiKey"
                        }
                    }
                },
                {
                    "name": "config",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Configuration.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.config",
                    "navPath": "@nav[webpm-client]/MainModule.BackendClient.config",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "config: {\n        // Build configuration (command line options).\n        build: Record<string, string>\n    }",
                        "implementation": "",
                        "startLine": 254,
                        "endLine": 255,
                        "references": {
                            "config": "@nav[webpm-client]/MainModule.BackendClient.config"
                        }
                    }
                },
                {
                    "name": "exportPath",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The export path pointing to the client.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.exportPath",
                    "navPath": "@nav[webpm-client]/MainModule.BackendClient.exportPath",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "exportPath: string[]",
                        "implementation": "",
                        "startLine": 262,
                        "endLine": 263,
                        "references": {
                            "exportPath": "@nav[webpm-client]/MainModule.BackendClient.exportPath"
                        }
                    }
                },
                {
                    "name": "name",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Backend's name.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.name",
                    "navPath": "@nav[webpm-client]/MainModule.BackendClient.name",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "name: string",
                        "implementation": "",
                        "startLine": 224,
                        "endLine": 225,
                        "references": {
                            "name": "@nav[webpm-client]/MainModule.BackendClient.name"
                        }
                    }
                },
                {
                    "name": "partitionId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Encapsulating partition Id.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.partitionId",
                    "navPath": "@nav[webpm-client]/MainModule.BackendClient.partitionId",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "partitionId: string",
                        "implementation": "",
                        "startLine": 267,
                        "endLine": 268,
                        "references": {
                            "partitionId": "@nav[webpm-client]/MainModule.BackendClient.partitionId"
                        }
                    }
                },
                {
                    "name": "urlBase",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Base URL of the service.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.urlBase",
                    "navPath": "@nav[webpm-client]/MainModule.BackendClient.urlBase",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "urlBase: string",
                        "implementation": "",
                        "startLine": 229,
                        "endLine": 230,
                        "references": {
                            "urlBase": "@nav[webpm-client]/MainModule.BackendClient.urlBase"
                        }
                    }
                },
                {
                    "name": "urlW3Lab",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Relative path of the W3Lab page pointing to the backend.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.urlW3Lab",
                    "navPath": "@nav[webpm-client]/MainModule.BackendClient.urlW3Lab",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "urlW3Lab: string",
                        "implementation": "",
                        "startLine": 249,
                        "endLine": 250,
                        "references": {
                            "urlW3Lab": "@nav[webpm-client]/MainModule.BackendClient.urlW3Lab"
                        }
                    }
                },
                {
                    "name": "version",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Version of the service",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.version",
                    "navPath": "@nav[webpm-client]/MainModule.BackendClient.version",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "version: string",
                        "implementation": "",
                        "startLine": 234,
                        "endLine": 235,
                        "references": {
                            "version": "@nav[webpm-client]/MainModule.BackendClient.version"
                        }
                    }
                },
                {
                    "name": "versionNumber",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Version's number.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.versionNumber",
                    "navPath": "@nav[webpm-client]/MainModule.BackendClient.versionNumber",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "versionNumber: number",
                        "implementation": "",
                        "startLine": 239,
                        "endLine": 240,
                        "references": {
                            "versionNumber": "@nav[webpm-client]/MainModule.BackendClient.versionNumber"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "fetch",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Proxy the standard <a target='_blank' href=\"https://developer.mozilla.org/en-US/docs/Web/API/fetch\"> fetch </a>\nfunction.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **endPoint**: Target end-point.\n*  **fetchOptions**: <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\nFetch options </a>.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.fetch",
                    "navPath": "@nav[webpm-client]/MainModule.BackendClient.fetch",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "fetch(endPoint: string, fetchOptions: RequestInit): Promise<Response>",
                        "implementation": "",
                        "startLine": 277,
                        "endLine": 278,
                        "references": {
                            "fetch": "@nav[webpm-client]/MainModule.BackendClient.fetch"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "fetchJson",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Same as  `fetch`  with an additional call to  `.then((resp) => resp.json())` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **endPoint**: Target end-point.\n*  **fetchOptions**: <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\nFetch options </a>.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.fetchJson",
                    "navPath": "@nav[webpm-client]/MainModule.BackendClient.fetchJson",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "fetchJson(endPoint: string, fetchOptions: RequestInit): Promise<JSON>",
                        "implementation": "",
                        "startLine": 286,
                        "endLine": 287,
                        "references": {
                            "fetchJson": "@nav[webpm-client]/MainModule.BackendClient.fetchJson"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "fetchText",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Same as  `fetch`  with an additional call to  `.then((resp) => resp.text())` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **endPoint**: Target end-point.\n*  **fetchOptions**: <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\nFetch options </a>.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.fetchText",
                    "navPath": "@nav[webpm-client]/MainModule.BackendClient.fetchText",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "fetchText(endPoint: string, fetchOptions: RequestInit): Promise<string>",
                        "implementation": "",
                        "startLine": 295,
                        "endLine": 296,
                        "references": {
                            "fetchText": "@nav[webpm-client]/MainModule.BackendClient.fetchText"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "fromFetch",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Same as  `fetch`  but returning an RxJS Observable.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **endPoint**: Target end-point.\n*  **fetchOptions**: <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\nFetch options </a>.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.fromFetch",
                    "navPath": "@nav[webpm-client]/MainModule.BackendClient.fromFetch",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "fromFetch(\n        endPoint: string,\n        fetchOptions: RequestInit,\n    ): rxjsModuleType.Observable<Response>",
                        "implementation": "",
                        "startLine": 304,
                        "endLine": 305,
                        "references": {
                            "fromFetch": "@nav[webpm-client]/MainModule.BackendClient.fromFetch",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "fromFetchJson",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Same as  `fetchJson`  but returning an RxJS Observable.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **endPoint**: Target end-point.\n*  **fetchOptions**: <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\nFetch options </a>.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.fromFetchJson",
                    "navPath": "@nav[webpm-client]/MainModule.BackendClient.fromFetchJson",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "fromFetchJson(\n        endPoint: string,\n        fetchOptions: RequestInit,\n    ): rxjsModuleType.Observable<JSON>",
                        "implementation": "",
                        "startLine": 316,
                        "endLine": 317,
                        "references": {
                            "fromFetchJson": "@nav[webpm-client]/MainModule.BackendClient.fromFetchJson",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "fromFetchText",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Same as  `fetchText`  but returning an RxJS Observable.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **endPoint**: Target end-point.\n*  **fetchOptions**: <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\nFetch options </a>.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.fromFetchText",
                    "navPath": "@nav[webpm-client]/MainModule.BackendClient.fromFetchText",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "fromFetchText(\n        endPoint: string,\n        fetchOptions: RequestInit,\n    ): rxjsModuleType.Observable<string>",
                        "implementation": "",
                        "startLine": 328,
                        "endLine": 329,
                        "references": {
                            "fromFetchText": "@nav[webpm-client]/MainModule.BackendClient.fromFetchText",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/backends.ts",
                "declaration": "export interface BackendClient",
                "implementation": "export interface BackendClient {\n    /**\n     * Backend's name.\n     */\n    name: string\n\n    /**\n     * Base URL of the service.\n     */\n    urlBase: string\n\n    /**\n     * Version of the service\n     */\n    version: string\n\n    /**\n     * Version's number.\n     */\n    versionNumber: number\n\n    /**\n     * API key.\n     */\n    apiKey: string\n\n    /**\n     * Relative path of the W3Lab page pointing to the backend.\n     */\n    urlW3Lab: string\n\n    /**\n     * Configuration.\n     */\n    config: {\n        // Build configuration (command line options).\n        build: Record<string, string>\n    }\n\n    /**\n     * The export path pointing to the client.\n     */\n    exportPath: string[]\n\n    /**\n     * Encapsulating partition Id.\n     */\n    partitionId: string\n\n    /**\n     * Proxy the standard <a target='_blank' href=\"https://developer.mozilla.org/en-US/docs/Web/API/fetch\"> fetch </a>\n     * function.\n     *\n     * @param endPoint Target end-point.\n     * @param fetchOptions <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\n     * Fetch options </a>.\n     */\n    fetch(endPoint: string, fetchOptions: RequestInit): Promise<Response>\n\n    /**\n     * Same as `fetch` with an additional call to `.then((resp) => resp.json())`.\n     *\n     * @param endPoint Target end-point.\n     * @param fetchOptions <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\n     * Fetch options </a>.\n     */\n    fetchJson(endPoint: string, fetchOptions: RequestInit): Promise<JSON>\n\n    /**\n     * Same as `fetch` with an additional call to `.then((resp) => resp.text())`.\n     *\n     * @param endPoint Target end-point.\n     * @param fetchOptions <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\n     * Fetch options </a>.\n     */\n    fetchText(endPoint: string, fetchOptions: RequestInit): Promise<string>\n\n    /**\n     * Same as `fetch` but returning an RxJS Observable.\n     *\n     * @param endPoint Target end-point.\n     * @param fetchOptions <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\n     * Fetch options </a>.\n     */\n    fromFetch(\n        endPoint: string,\n        fetchOptions: RequestInit,\n    ): rxjsModuleType.Observable<Response>\n\n    /**\n     * Same as `fetchJson` but returning an RxJS Observable.\n     *\n     * @param endPoint Target end-point.\n     * @param fetchOptions <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\n     * Fetch options </a>.\n     */\n    fromFetchJson(\n        endPoint: string,\n        fetchOptions: RequestInit,\n    ): rxjsModuleType.Observable<JSON>\n\n    /**\n     * Same as `fetchText` but returning an RxJS Observable.\n     *\n     * @param endPoint Target end-point.\n     * @param fetchOptions <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\n     * Fetch options </a>.\n     */\n    fromFetchText(\n        endPoint: string,\n        fetchOptions: RequestInit,\n    ): rxjsModuleType.Observable<string>\n}",
                "startLine": 220,
                "endLine": 333,
                "references": {
                    "BackendClient": "@nav[webpm-client]/MainModule.BackendClient",
                    "Observable": "https://rxjs.dev/guide/observable"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "BackendConfig",
            "documentation": {
                "sections": [
                    {
                        "content": "Specifies configuration for a backend.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BackendConfig",
            "navPath": "@nav[webpm-client]/MainModule.BackendConfig",
            "attributes": [
                {
                    "name": "buildArgs",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Arguments regarding the build stage provided as key-value pairs.\n\nThe available keys and values are backend specifics and should be documented by them.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendConfig.buildArgs",
                    "navPath": "@nav[webpm-client]/MainModule.BackendConfig.buildArgs",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "buildArgs: Record<string, string>",
                        "implementation": "",
                        "startLine": 256,
                        "endLine": 257,
                        "references": {
                            "buildArgs": "@nav[webpm-client]/MainModule.BackendConfig.buildArgs"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export interface BackendConfig",
                "implementation": "export interface BackendConfig {\n    /**\n     * Arguments regarding the build stage provided as key-value pairs.\n     *\n     * The available keys and values are backend specifics and should be documented by them.\n     */\n    buildArgs: Record<string, string>\n}",
                "startLine": 250,
                "endLine": 258,
                "references": {
                    "BackendConfig": "@nav[webpm-client]/MainModule.BackendConfig"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "BackendConfiguration",
            "documentation": {
                "sections": [
                    {
                        "content": "Backend configuration, retrieved from w3nest cookie.\nSee  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.backendConfiguration\" semantic=\"function\">backendConfiguration</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BackendConfiguration",
            "navPath": "@nav[webpm-client]/MainModule.BackendConfiguration",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "id of the configuration",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendConfiguration.id",
                    "navPath": "@nav[webpm-client]/MainModule.BackendConfiguration.id",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "readonly id?: string",
                        "implementation": "",
                        "startLine": 55,
                        "endLine": 56,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.BackendConfiguration.id"
                        }
                    }
                },
                {
                    "name": "origin",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Origin of the backend, use empty string for relative resolution",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendConfiguration.origin",
                    "navPath": "@nav[webpm-client]/MainModule.BackendConfiguration.origin",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "readonly origin: string",
                        "implementation": "",
                        "startLine": 32,
                        "endLine": 33,
                        "references": {
                            "origin": "@nav[webpm-client]/MainModule.BackendConfiguration.origin"
                        }
                    }
                },
                {
                    "name": "urlLoadingGraph",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Backend's URL to resolve the loading graph",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendConfiguration.urlLoadingGraph",
                    "navPath": "@nav[webpm-client]/MainModule.BackendConfiguration.urlLoadingGraph",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "readonly urlLoadingGraph: string",
                        "implementation": "",
                        "startLine": 36,
                        "endLine": 37,
                        "references": {
                            "urlLoadingGraph": "@nav[webpm-client]/MainModule.BackendConfiguration.urlLoadingGraph"
                        }
                    }
                },
                {
                    "name": "urlPyodide",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Backend's URL to resolve pyodide python modules. If not provided, fallback to\n `https://cdn.jsdelivr.net/pyodide/v$VERSION/full`  where $VERSION is the pyodide target version.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendConfiguration.urlPyodide",
                    "navPath": "@nav[webpm-client]/MainModule.BackendConfiguration.urlPyodide",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "readonly urlPyodide: string",
                        "implementation": "",
                        "startLine": 50,
                        "endLine": 51,
                        "references": {
                            "urlPyodide": "@nav[webpm-client]/MainModule.BackendConfiguration.urlPyodide"
                        }
                    }
                },
                {
                    "name": "urlPypi",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Backend's URL to resolve pypi python modules. If not provided, fallback to\n `https://pypi.org/` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendConfiguration.urlPypi",
                    "navPath": "@nav[webpm-client]/MainModule.BackendConfiguration.urlPypi",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "readonly urlPypi: string",
                        "implementation": "",
                        "startLine": 45,
                        "endLine": 46,
                        "references": {
                            "urlPypi": "@nav[webpm-client]/MainModule.BackendConfiguration.urlPypi"
                        }
                    }
                },
                {
                    "name": "urlResource",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Backend's URL used to fetch the raw content of a package",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendConfiguration.urlResource",
                    "navPath": "@nav[webpm-client]/MainModule.BackendConfiguration.urlResource",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "readonly urlResource: string",
                        "implementation": "",
                        "startLine": 40,
                        "endLine": 41,
                        "references": {
                            "urlResource": "@nav[webpm-client]/MainModule.BackendConfiguration.urlResource"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/backend-configuration.ts",
                "declaration": "export interface BackendConfiguration",
                "implementation": "export interface BackendConfiguration {\n    /**\n     * Origin of the backend, use empty string for relative resolution\n     */\n    readonly origin: string\n    /**\n     * Backend's URL to resolve the loading graph\n     */\n    readonly urlLoadingGraph: string\n    /**\n     * Backend's URL used to fetch the raw content of a package\n     */\n    readonly urlResource: string\n    /**\n     * Backend's URL to resolve pypi python modules. If not provided, fallback to\n     * `https://pypi.org/`.\n     */\n    readonly urlPypi: string\n    /**\n     * Backend's URL to resolve pyodide python modules. If not provided, fallback to\n     * `https://cdn.jsdelivr.net/pyodide/v$VERSION/full` where $VERSION is the pyodide target version.\n     */\n    readonly urlPyodide: string\n\n    /**\n     * id of the configuration\n     */\n    readonly id?: string\n}",
                "startLine": 28,
                "endLine": 57,
                "references": {
                    "BackendConfiguration": "@nav[webpm-client]/MainModule.BackendConfiguration"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "BackendInputs",
            "documentation": {
                "sections": [
                    {
                        "content": "Specifies the installation of backends.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BackendInputs",
            "navPath": "@nav[webpm-client]/MainModule.BackendInputs",
            "attributes": [
                {
                    "name": "configurations",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Configuration of the backend.\n\nA mapping with:\n*  Keys: backends names.\n*  Values: associated configuration.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendInputs.configurations",
                    "navPath": "@nav[webpm-client]/MainModule.BackendInputs.configurations",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "configurations?: Record<string, BackendConfig>",
                        "implementation": "",
                        "startLine": 274,
                        "endLine": 275,
                        "references": {
                            "configurations": "@nav[webpm-client]/MainModule.BackendInputs.configurations",
                            "BackendConfig": "@nav[webpm-client]/MainModule.BackendConfig"
                        }
                    }
                },
                {
                    "name": "modules",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "List of modules to install.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendInputs.modules",
                    "navPath": "@nav[webpm-client]/MainModule.BackendInputs.modules",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "modules: LightLibraryWithAliasQueryString[]",
                        "implementation": "",
                        "startLine": 266,
                        "endLine": 267,
                        "references": {
                            "modules": "@nav[webpm-client]/MainModule.BackendInputs.modules"
                        }
                    }
                },
                {
                    "name": "partition",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Partition ID in which the backends are installed.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendInputs.partition",
                    "navPath": "@nav[webpm-client]/MainModule.BackendInputs.partition",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "partition?: string",
                        "implementation": "",
                        "startLine": 278,
                        "endLine": 279,
                        "references": {
                            "partition": "@nav[webpm-client]/MainModule.BackendInputs.partition"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export interface BackendInputs",
                "implementation": "export interface BackendInputs {\n    /**\n     * List of modules to install.\n     */\n    modules: LightLibraryWithAliasQueryString[]\n    /**\n     * Configuration of the backend.\n     *\n     * A mapping with:\n     * *  Keys: backends names.\n     * *  Values: associated configuration.\n     */\n    configurations?: Record<string, BackendConfig>\n    /**\n     * Partition ID in which the backends are installed.\n     */\n    partition?: string\n}",
                "startLine": 262,
                "endLine": 280,
                "references": {
                    "BackendInputs": "@nav[webpm-client]/MainModule.BackendInputs",
                    "BackendConfig": "@nav[webpm-client]/MainModule.BackendConfig"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CdnEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Base structure for all events.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CdnEvent",
            "navPath": "@nav[webpm-client]/MainModule.CdnEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnEvent.id",
                    "navPath": "@nav[webpm-client]/MainModule.CdnEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "id: string",
                        "implementation": "",
                        "startLine": 244,
                        "endLine": 245,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnEvent.status",
                    "navPath": "@nav[webpm-client]/MainModule.CdnEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "status: EventStatus",
                        "implementation": "",
                        "startLine": 252,
                        "endLine": 253,
                        "references": {
                            "status": "@nav[webpm-client]/MainModule.CdnEvent.status",
                            "EventStatus": "@nav[webpm-client]/MainModule.EventStatus"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnEvent.step",
                    "navPath": "@nav[webpm-client]/MainModule.CdnEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "step: EventType",
                        "implementation": "",
                        "startLine": 240,
                        "endLine": 241,
                        "references": {
                            "step": "@nav[webpm-client]/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnEvent.text",
                    "navPath": "@nav[webpm-client]/MainModule.CdnEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "text: string",
                        "implementation": "",
                        "startLine": 248,
                        "endLine": 249,
                        "references": {
                            "text": "@nav[webpm-client]/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export interface CdnEvent",
                "implementation": "export interface CdnEvent {\n    /**\n     * The step.\n     */\n    step: EventType\n    /**\n     * Event's ID.\n     */\n    id: string\n    /**\n     * Custom text.\n     */\n    text: string\n    /**\n     * Event's status.\n     */\n    status: EventStatus\n}",
                "startLine": 236,
                "endLine": 254,
                "references": {
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent",
                    "EventStatus": "@nav[webpm-client]/MainModule.EventStatus",
                    "BackendEvent": "@nav[webpm-client]/MainModule.BackendEvent",
                    "CdnLoadingGraphErrorEvent": "@nav[webpm-client]/MainModule.CdnLoadingGraphErrorEvent",
                    "CdnLoadingGraphQueryEvent": "@nav[webpm-client]/MainModule.CdnLoadingGraphQueryEvent",
                    "CdnLoadingGraphResolvedEvent": "@nav[webpm-client]/MainModule.CdnLoadingGraphResolvedEvent",
                    "CdnMessageEvent": "@nav[webpm-client]/MainModule.CdnMessageEvent",
                    "InstallDoneEvent": "@nav[webpm-client]/MainModule.InstallDoneEvent",
                    "InstallErrorEvent": "@nav[webpm-client]/MainModule.InstallErrorEvent",
                    "StartInstallEvent": "@nav[webpm-client]/MainModule.StartInstallEvent"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Cookie",
            "documentation": {
                "sections": [
                    {
                        "content": "Cookie model set by W3Nest (either the local server or the remote one).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Cookie",
            "navPath": "@nav[webpm-client]/MainModule.Cookie",
            "attributes": [
                {
                    "name": "origin",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Server Origin.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Cookie.origin",
                    "navPath": "@nav[webpm-client]/MainModule.Cookie.origin",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "origin: string",
                        "implementation": "",
                        "startLine": 82,
                        "endLine": 83,
                        "references": {
                            "origin": "@nav[webpm-client]/MainModule.Cookie.origin"
                        }
                    }
                },
                {
                    "name": "port",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Port (if applicable).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Cookie.port",
                    "navPath": "@nav[webpm-client]/MainModule.Cookie.port",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "port: number",
                        "implementation": "",
                        "startLine": 78,
                        "endLine": 79,
                        "references": {
                            "port": "@nav[webpm-client]/MainModule.Cookie.port"
                        }
                    }
                },
                {
                    "name": "type",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "*   `local`  : W3Nest local server\n*   `remote`  : W3Nest remote server ( `https://w3nest.org` ).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Cookie.type",
                    "navPath": "@nav[webpm-client]/MainModule.Cookie.type",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "type: 'local' | 'remote'",
                        "implementation": "",
                        "startLine": 66,
                        "endLine": 67,
                        "references": {
                            "type": "@nav[webpm-client]/MainModule.Cookie.type"
                        }
                    }
                },
                {
                    "name": "webpm",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "WebPM paths definition.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Cookie.webpm",
                    "navPath": "@nav[webpm-client]/MainModule.Cookie.webpm",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "webpm: {\n        pathLoadingGraph: string\n        pathResource: string\n        pathPyodide: string\n        pathPypi: string\n        pathBackendInstall: string\n        pathBackendUninstall: string\n    }",
                        "implementation": "",
                        "startLine": 87,
                        "endLine": 88,
                        "references": {
                            "webpm": "@nav[webpm-client]/MainModule.Cookie.webpm"
                        }
                    }
                },
                {
                    "name": "wsDataUrl",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Web Socket URL for data.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Cookie.wsDataUrl",
                    "navPath": "@nav[webpm-client]/MainModule.Cookie.wsDataUrl",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "wsDataUrl: string",
                        "implementation": "",
                        "startLine": 70,
                        "endLine": 71,
                        "references": {
                            "wsDataUrl": "@nav[webpm-client]/MainModule.Cookie.wsDataUrl"
                        }
                    }
                },
                {
                    "name": "wsLogsUrl",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Web Socket URL for logs.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Cookie.wsLogsUrl",
                    "navPath": "@nav[webpm-client]/MainModule.Cookie.wsLogsUrl",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "wsLogsUrl: string",
                        "implementation": "",
                        "startLine": 74,
                        "endLine": 75,
                        "references": {
                            "wsLogsUrl": "@nav[webpm-client]/MainModule.Cookie.wsLogsUrl"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/backend-configuration.ts",
                "declaration": "export interface Cookie",
                "implementation": "export interface Cookie {\n    /**\n     * *  `local` : W3Nest local server\n     * *  `remote` : W3Nest remote server (`https://w3nest.org`).\n     */\n    type: 'local' | 'remote'\n    /**\n     * Web Socket URL for data.\n     */\n    wsDataUrl: string\n    /**\n     * Web Socket URL for logs.\n     */\n    wsLogsUrl: string\n    /**\n     * Port (if applicable).\n     */\n    port: number\n    /**\n     * Server Origin.\n     */\n    origin: string\n\n    /**\n     * WebPM paths definition.\n     */\n    webpm: {\n        pathLoadingGraph: string\n        pathResource: string\n        pathPyodide: string\n        pathPypi: string\n        pathBackendInstall: string\n        pathBackendUninstall: string\n    }\n}",
                "startLine": 61,
                "endLine": 96,
                "references": {
                    "Cookie": "@nav[webpm-client]/MainModule.Cookie"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CssSideEffectCallbackArgument",
            "documentation": {
                "sections": [
                    {
                        "content": "Argument type for  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.CssSideEffectCallback\" semantic=\"type-alias\">CssSideEffectCallback</mkapi-api-link>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CssSideEffectCallbackArgument",
            "navPath": "@nav[webpm-client]/MainModule.CssSideEffectCallbackArgument",
            "attributes": [
                {
                    "name": "htmlLinkElement",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "HTML script element added",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssSideEffectCallbackArgument.htmlLinkElement",
                    "navPath": "@nav[webpm-client]/MainModule.CssSideEffectCallbackArgument.htmlLinkElement",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "htmlLinkElement: HTMLLinkElement",
                        "implementation": "",
                        "startLine": 532,
                        "endLine": 533,
                        "references": {
                            "htmlLinkElement": "@nav[webpm-client]/MainModule.CssSideEffectCallbackArgument.htmlLinkElement"
                        }
                    }
                },
                {
                    "name": "origin",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Origin of the style-sheet",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssSideEffectCallbackArgument.origin",
                    "navPath": "@nav[webpm-client]/MainModule.CssSideEffectCallbackArgument.origin",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "origin: {\n        moduleName: string\n        version: string\n        assetId: string\n        url: string\n    }",
                        "implementation": "",
                        "startLine": 522,
                        "endLine": 523,
                        "references": {
                            "origin": "@nav[webpm-client]/MainModule.CssSideEffectCallbackArgument.origin"
                        }
                    }
                },
                {
                    "name": "renderingWindow",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Window instance in which the HTML link element has been added",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssSideEffectCallbackArgument.renderingWindow",
                    "navPath": "@nav[webpm-client]/MainModule.CssSideEffectCallbackArgument.renderingWindow",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "renderingWindow: Window",
                        "implementation": "",
                        "startLine": 536,
                        "endLine": 537,
                        "references": {
                            "renderingWindow": "@nav[webpm-client]/MainModule.CssSideEffectCallbackArgument.renderingWindow"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export interface CssSideEffectCallbackArgument",
                "implementation": "export interface CssSideEffectCallbackArgument {\n    /**\n     * Origin of the style-sheet\n     */\n    origin: {\n        moduleName: string\n        version: string\n        assetId: string\n        url: string\n    }\n\n    /**\n     * HTML script element added\n     */\n    htmlLinkElement: HTMLLinkElement\n    /**\n     * Window instance in which the HTML link element has been added\n     */\n    renderingWindow: Window\n}",
                "startLine": 518,
                "endLine": 538,
                "references": {
                    "CssSideEffectCallbackArgument": "@nav[webpm-client]/MainModule.CssSideEffectCallbackArgument"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "DisplayOptions",
            "documentation": {
                "sections": [
                    {
                        "content": "Specifies loading screen display options, see  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.LoadingScreen\" semantic=\"class\">LoadingScreen</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DisplayOptions",
            "navPath": "@nav[webpm-client]/MainModule.DisplayOptions",
            "attributes": [
                {
                    "name": "autoRender",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "If true, render the view when created.\n\nDefault to  `true` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DisplayOptions.autoRender",
                    "navPath": "@nav[webpm-client]/MainModule.DisplayOptions.autoRender",
                    "code": {
                        "filePath": "src/lib/loading-screen.view.ts",
                        "declaration": "autoRender?: boolean",
                        "implementation": "",
                        "startLine": 80,
                        "endLine": 81,
                        "references": {
                            "autoRender": "@nav[webpm-client]/MainModule.DisplayOptions.autoRender"
                        }
                    }
                },
                {
                    "name": "container",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Container in which the loading screen's HTMLDivElement is appended\n(when calling  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.LoadingScreen.render\" semantic=\"method\">LoadingScreen.render</mkapi-api-link> ).\n\nDefault to  `document.body` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DisplayOptions.container",
                    "navPath": "@nav[webpm-client]/MainModule.DisplayOptions.container",
                    "code": {
                        "filePath": "src/lib/loading-screen.view.ts",
                        "declaration": "container?: HTMLElement",
                        "implementation": "",
                        "startLine": 32,
                        "endLine": 33,
                        "references": {
                            "container": "@nav[webpm-client]/MainModule.DisplayOptions.container"
                        }
                    }
                },
                {
                    "name": "description",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Description.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DisplayOptions.description",
                    "navPath": "@nav[webpm-client]/MainModule.DisplayOptions.description",
                    "code": {
                        "filePath": "src/lib/loading-screen.view.ts",
                        "declaration": "description: string",
                        "implementation": "",
                        "startLine": 54,
                        "endLine": 55,
                        "references": {
                            "description": "@nav[webpm-client]/MainModule.DisplayOptions.description"
                        }
                    }
                },
                {
                    "name": "fadingTimeout",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Fading timeout (ms).\n\nDefault to  `500ms` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DisplayOptions.fadingTimeout",
                    "navPath": "@nav[webpm-client]/MainModule.DisplayOptions.fadingTimeout",
                    "code": {
                        "filePath": "src/lib/loading-screen.view.ts",
                        "declaration": "fadingTimeout?: number",
                        "implementation": "",
                        "startLine": 66,
                        "endLine": 67,
                        "references": {
                            "fadingTimeout": "@nav[webpm-client]/MainModule.DisplayOptions.fadingTimeout"
                        }
                    }
                },
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "ID of the loading screen's HTMLDivElement wrapper.\n\nDefault to  `loading-screen` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DisplayOptions.id",
                    "navPath": "@nav[webpm-client]/MainModule.DisplayOptions.id",
                    "code": {
                        "filePath": "src/lib/loading-screen.view.ts",
                        "declaration": "id?: string",
                        "implementation": "",
                        "startLine": 39,
                        "endLine": 40,
                        "references": {
                            "id": "@nav[webpm-client]/MainModule.DisplayOptions.id"
                        }
                    }
                },
                {
                    "name": "logo",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "URL to the logo.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DisplayOptions.logo",
                    "navPath": "@nav[webpm-client]/MainModule.DisplayOptions.logo",
                    "code": {
                        "filePath": "src/lib/loading-screen.view.ts",
                        "declaration": "logo: string",
                        "implementation": "",
                        "startLine": 44,
                        "endLine": 45,
                        "references": {
                            "logo": "@nav[webpm-client]/MainModule.DisplayOptions.logo"
                        }
                    }
                },
                {
                    "name": "minimumDisplayTime",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Minimum time the screen is displayed (ms).\n\nDefault to  `1000ms` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DisplayOptions.minimumDisplayTime",
                    "navPath": "@nav[webpm-client]/MainModule.DisplayOptions.minimumDisplayTime",
                    "code": {
                        "filePath": "src/lib/loading-screen.view.ts",
                        "declaration": "minimumDisplayTime?: number",
                        "implementation": "",
                        "startLine": 73,
                        "endLine": 74,
                        "references": {
                            "minimumDisplayTime": "@nav[webpm-client]/MainModule.DisplayOptions.minimumDisplayTime"
                        }
                    }
                },
                {
                    "name": "name",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Application name.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DisplayOptions.name",
                    "navPath": "@nav[webpm-client]/MainModule.DisplayOptions.name",
                    "code": {
                        "filePath": "src/lib/loading-screen.view.ts",
                        "declaration": "name: string",
                        "implementation": "",
                        "startLine": 49,
                        "endLine": 50,
                        "references": {
                            "name": "@nav[webpm-client]/MainModule.DisplayOptions.name"
                        }
                    }
                },
                {
                    "name": "wrapperStyle",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Style to apply on the loading screen's HTMLDivElement wrapper.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DisplayOptions.wrapperStyle",
                    "navPath": "@nav[webpm-client]/MainModule.DisplayOptions.wrapperStyle",
                    "code": {
                        "filePath": "src/lib/loading-screen.view.ts",
                        "declaration": "wrapperStyle?: Record<string, string>",
                        "implementation": "",
                        "startLine": 59,
                        "endLine": 60,
                        "references": {
                            "wrapperStyle": "@nav[webpm-client]/MainModule.DisplayOptions.wrapperStyle"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/loading-screen.view.ts",
                "declaration": "export interface DisplayOptions",
                "implementation": "export interface DisplayOptions {\n    /**\n     * Container in which the loading screen's HTMLDivElement is appended\n     * (when calling {@link LoadingScreen.render}).\n     *\n     * Default to `document.body`.\n     */\n    container?: HTMLElement\n\n    /**\n     * ID of the loading screen's HTMLDivElement wrapper.\n     *\n     * Default to `loading-screen`.\n     */\n    id?: string\n\n    /**\n     * URL to the logo.\n     */\n    logo: string\n\n    /**\n     * Application name.\n     */\n    name: string\n\n    /**\n     * Description.\n     */\n    description: string\n\n    /**\n     * Style to apply on the loading screen's HTMLDivElement wrapper.\n     */\n    wrapperStyle?: Record<string, string>\n\n    /**\n     * Fading timeout (ms).\n     *\n     * Default to `500ms`.\n     */\n    fadingTimeout?: number\n\n    /**\n     * Minimum time the screen is displayed (ms).\n     *\n     * Default to `1000ms`.\n     */\n    minimumDisplayTime?: number\n\n    /**\n     * If true, render the view when created.\n     *\n     * Default to `true`.\n     */\n    autoRender?: boolean\n}",
                "startLine": 25,
                "endLine": 82,
                "references": {
                    "DisplayOptions": "@nav[webpm-client]/MainModule.DisplayOptions"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "EsmInputs",
            "documentation": {
                "sections": [
                    {
                        "content": "Specifies the installation of ESM modules.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "EsmInputs",
            "navPath": "@nav[webpm-client]/MainModule.EsmInputs",
            "attributes": [
                {
                    "name": "aliases",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Provide extra aliases definition, usually to target indirect\ndependencies.\n\nKeys are alias name, values are either a  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.LightLibraryQueryString\" semantic=\"type-alias\">LightLibraryQueryString</mkapi-api-link> \nor a callback function provided with the global scope.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EsmInputs.aliases",
                    "navPath": "@nav[webpm-client]/MainModule.EsmInputs.aliases",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "aliases?: Record<string, string | ((Window) => unknown)>",
                        "implementation": "",
                        "startLine": 210,
                        "endLine": 211,
                        "references": {
                            "aliases": "@nav[webpm-client]/MainModule.EsmInputs.aliases"
                        }
                    }
                },
                {
                    "name": "autoUnwrapDefault",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Automatically unwraps  `default`  exports when a module has no named exports.\n\n<note level=\"hint\">\nThis is particularly useful for ESM modules that export only a default symbol (common in many packages).\nWhen enabled, the default export is exposed both as the module itself and under the  `default`  property.\n</note>\n\n### Example\n\n<code-snippet language=\"javascript\">\nconst { confetti } = await install({\n    esm: {\n       modules:[\"js-confetti#^0.12.0 as confetti\"],\n       autoUnwrapDefault: true\n    }\n})\n\n// With  `autoUnwrapDefault: true` , this works as expected:\nnew confetti()\n\n// The raw default export is still accessible if needed:\nconfetti.default\n</code-snippet>\n\n<note level=\"warning\">\nDisable this option ( `false` ) if you explicitly need to preserve the original export structure as-is,\nfor instance when dealing with modules that expose important properties under  `default` .\n</note>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EsmInputs.autoUnwrapDefault",
                    "navPath": "@nav[webpm-client]/MainModule.EsmInputs.autoUnwrapDefault",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "autoUnwrapDefault?: boolean",
                        "implementation": "",
                        "startLine": 243,
                        "endLine": 244,
                        "references": {
                            "autoUnwrapDefault": "@nav[webpm-client]/MainModule.EsmInputs.autoUnwrapDefault"
                        }
                    }
                },
                {
                    "name": "modules",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "List of modules to install.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EsmInputs.modules",
                    "navPath": "@nav[webpm-client]/MainModule.EsmInputs.modules",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "modules: LightLibraryWithAliasQueryString[]",
                        "implementation": "",
                        "startLine": 156,
                        "endLine": 157,
                        "references": {
                            "modules": "@nav[webpm-client]/MainModule.EsmInputs.modules",
                            "LightLibraryWithAliasQueryString": "@nav/api/MainModule.LightLibraryWithAliasQueryString",
                            "LightLibraryQueryString": "@nav/api/MainModule.LightLibraryQueryString",
                            "PyModule": "@nav/api/MainModule.PyModule"
                        }
                    }
                },
                {
                    "name": "modulesSideEffects",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Specify side effects to execute when modules are installed.\n\nThe key is in the form  `{libraryName}#{semver}` :\nany module installed matching some keys will trigger execution\nof associated side effects.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EsmInputs.modulesSideEffects",
                    "navPath": "@nav[webpm-client]/MainModule.EsmInputs.modulesSideEffects",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "modulesSideEffects?: Record<\n        LightLibraryQueryString,\n        ModuleSideEffectCallback\n    >",
                        "implementation": "",
                        "startLine": 197,
                        "endLine": 198,
                        "references": {
                            "modulesSideEffects": "@nav[webpm-client]/MainModule.EsmInputs.modulesSideEffects",
                            "ModuleSideEffectCallback": "@nav[webpm-client]/MainModule.ModuleSideEffectCallback",
                            "LightLibraryWithAliasQueryString": "@nav/api/MainModule.LightLibraryWithAliasQueryString",
                            "LightLibraryQueryString": "@nav/api/MainModule.LightLibraryQueryString",
                            "PyModule": "@nav/api/MainModule.PyModule"
                        }
                    }
                },
                {
                    "name": "scripts",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Specifies standalone scripts to install in the browser.\nBy opposition to  `modules` , a script is installed as a standalone element:\nthere is no direct or indirect dependencies' installation triggered.\n\nThey are installed after all modules have been installed.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EsmInputs.scripts",
                    "navPath": "@nav[webpm-client]/MainModule.EsmInputs.scripts",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "scripts?: ScriptInput[]",
                        "implementation": "",
                        "startLine": 165,
                        "endLine": 166,
                        "references": {
                            "scripts": "@nav[webpm-client]/MainModule.EsmInputs.scripts",
                            "ScriptInput": "@nav[webpm-client]/MainModule.ScriptInput"
                        }
                    }
                },
                {
                    "name": "usingDependencies",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Override the 'natural' version used for some libraries coming from the dependency graph when resolving\nthe installation. Items are provided in the form  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.LightLibraryQueryString\" semantic=\"type-alias\">LightLibraryQueryString</mkapi-api-link> .\n\nWhenever a library is required in the dependency graph, the version(s) will be replaced by the (only) one\ncoming from the relevant element (if any).\nThis in turn disables multiple versions installation for the provided library\n\n**Example**:\n\n ```\nimport { install } from `@w3nest/webpm-client`\n\nawait install({\n    esm:{\n        modules: [`fictive-package#0.x`, `fictive-package#1.x`],\n        usingDependencies: ['depA#0.1.2']\n    }\n})\n```",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EsmInputs.usingDependencies",
                    "navPath": "@nav[webpm-client]/MainModule.EsmInputs.usingDependencies",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "usingDependencies?: LightLibraryQueryString[]",
                        "implementation": "",
                        "startLine": 188,
                        "endLine": 189,
                        "references": {
                            "usingDependencies": "@nav[webpm-client]/MainModule.EsmInputs.usingDependencies",
                            "LightLibraryWithAliasQueryString": "@nav/api/MainModule.LightLibraryWithAliasQueryString",
                            "LightLibraryQueryString": "@nav/api/MainModule.LightLibraryQueryString",
                            "PyModule": "@nav/api/MainModule.PyModule"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export interface EsmInputs",
                "implementation": "export interface EsmInputs {\n    /**\n     * List of modules to install.\n     */\n    modules: LightLibraryWithAliasQueryString[]\n\n    /**\n     * Specifies standalone scripts to install in the browser.\n     * By opposition to `modules`, a script is installed as a standalone element:\n     * there is no direct or indirect dependencies' installation triggered.\n     *\n     * They are installed after all modules have been installed.\n     */\n    scripts?: ScriptInput[]\n\n    /**\n     * Override the 'natural' version used for some libraries coming from the dependency graph when resolving\n     * the installation. Items are provided in the form {@link LightLibraryQueryString}.\n     *\n     * Whenever a library is required in the dependency graph, the version(s) will be replaced by the (only) one\n     * coming from the relevant element (if any).\n     * This in turn disables multiple versions installation for the provided library\n     *\n     * **Example**:\n     *\n     * ```\n     * import { install } from `@w3nest/webpm-client`\n     *\n     * await install({\n     *     esm:{\n     *         modules: [`fictive-package#0.x`, `fictive-package#1.x`],\n     *         usingDependencies: ['depA#0.1.2']\n     *     }\n     * })\n     * ```\n     */\n    usingDependencies?: LightLibraryQueryString[]\n    /**\n     * Specify side effects to execute when modules are installed.\n     *\n     * The key is in the form `{libraryName}#{semver}`:\n     * any module installed matching some keys will trigger execution\n     * of associated side effects.\n     *\n     */\n    modulesSideEffects?: Record<\n        LightLibraryQueryString,\n        ModuleSideEffectCallback\n    >\n\n    /**\n     * Provide extra aliases definition, usually to target indirect\n     * dependencies.\n     *\n     * Keys are alias name, values are either a {@link LightLibraryQueryString}\n     * or a callback function provided with the global scope.\n     *\n     */\n    aliases?: Record<string, string | ((Window) => unknown)>\n\n    /**\n     * Automatically unwraps `default` exports when a module has no named exports.\n     *\n     * <note level=\"hint\">\n     * This is particularly useful for ESM modules that export only a default symbol (common in many packages).\n     * When enabled, the default export is exposed both as the module itself and under the `default` property.\n     * </note>\n     *\n     * ### Example\n     *\n     * <code-snippet language=\"javascript\">\n     * const { confetti } = await install({\n     *     esm: {\n     *        modules:[\"js-confetti#^0.12.0 as confetti\"],\n     *        autoUnwrapDefault: true\n     *     }\n     * })\n     *\n     * // With `autoUnwrapDefault: true`, this works as expected:\n     * new confetti()\n     *\n     * // The raw default export is still accessible if needed:\n     * confetti.default\n     * </code-snippet>\n     *\n     * <note level=\"warning\">\n     * Disable this option (`false`) if you explicitly need to preserve the original export structure as-is,\n     * for instance when dealing with modules that expose important properties under `default`.\n     * </note>\n     *\n     */\n    autoUnwrapDefault?: boolean\n}",
                "startLine": 152,
                "endLine": 245,
                "references": {
                    "EsmInputs": "@nav[webpm-client]/MainModule.EsmInputs",
                    "ModuleSideEffectCallback": "@nav[webpm-client]/MainModule.ModuleSideEffectCallback",
                    "ScriptInput": "@nav[webpm-client]/MainModule.ScriptInput"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "FrontendConfiguration",
            "documentation": {
                "sections": [
                    {
                        "content": "Defines the client-side configuration.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "FrontendConfiguration",
            "navPath": "@nav[webpm-client]/MainModule.FrontendConfiguration",
            "attributes": [
                {
                    "name": "crossOrigin",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "If set, all  `<script>`  elements inserted by the client have  `crossorigin`  attribute set to this value.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FrontendConfiguration.crossOrigin",
                    "navPath": "@nav[webpm-client]/MainModule.FrontendConfiguration.crossOrigin",
                    "code": {
                        "filePath": "src/lib/frontend-configuration.ts",
                        "declaration": "readonly crossOrigin?: string",
                        "implementation": "",
                        "startLine": 8,
                        "endLine": 9,
                        "references": {
                            "crossOrigin": "@nav[webpm-client]/MainModule.FrontendConfiguration.crossOrigin"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/frontend-configuration.ts",
                "declaration": "export interface FrontendConfiguration",
                "implementation": "export interface FrontendConfiguration {\n    /**\n     * If set, all `<script>` elements inserted by the client have `crossorigin` attribute set to this value.\n     */\n    readonly crossOrigin?: string\n}",
                "startLine": 4,
                "endLine": 10,
                "references": {
                    "FrontendConfiguration": "@nav[webpm-client]/MainModule.FrontendConfiguration"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "InstallInputs",
            "documentation": {
                "sections": [
                    {
                        "content": "Specifies the installation of various components in the environment.\n\nThis is the input for the method  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.install\" semantic=\"function\">install</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "InstallInputs",
            "navPath": "@nav[webpm-client]/MainModule.InstallInputs",
            "attributes": [
                {
                    "name": "backends",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Specifies the backend modules to install, using one of the following:\n*   <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.LightLibraryWithAliasQueryString\" semantic=\"type-alias\">LightLibraryWithAliasQueryString</mkapi-api-link>  for a simpler specification with limited control.\n*   <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.EsmInputs\" semantic=\"interface\">EsmInputs</mkapi-api-link>  for a comprehensive specification.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallInputs.backends",
                    "navPath": "@nav[webpm-client]/MainModule.InstallInputs.backends",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "backends?: LightLibraryWithAliasQueryString[] | BackendInputs",
                        "implementation": "",
                        "startLine": 121,
                        "endLine": 122,
                        "references": {
                            "backends": "@nav[webpm-client]/MainModule.InstallInputs.backends",
                            "BackendInputs": "@nav[webpm-client]/MainModule.BackendInputs",
                            "LightLibraryWithAliasQueryString": "@nav/api/MainModule.LightLibraryWithAliasQueryString",
                            "LightLibraryQueryString": "@nav/api/MainModule.LightLibraryQueryString",
                            "PyModule": "@nav/api/MainModule.PyModule"
                        }
                    }
                },
                {
                    "name": "css",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Specify a list of stylesheets to install.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallInputs.css",
                    "navPath": "@nav[webpm-client]/MainModule.InstallInputs.css",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "css?: CssInput[]",
                        "implementation": "",
                        "startLine": 133,
                        "endLine": 134,
                        "references": {
                            "css": "@nav[webpm-client]/MainModule.InstallInputs.css",
                            "CssInput": "@nav[webpm-client]/MainModule.CssInput"
                        }
                    }
                },
                {
                    "name": "esm",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Specifies the ESM modules to install, using one of the following:\n*   <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.LightLibraryWithAliasQueryString\" semantic=\"type-alias\">LightLibraryWithAliasQueryString</mkapi-api-link>  for a simpler specification with limited control.\n*   <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.EsmInputs\" semantic=\"interface\">EsmInputs</mkapi-api-link>  for a comprehensive specification.\n\nWhen  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.LightLibraryWithAliasQueryString\" semantic=\"type-alias\">LightLibraryWithAliasQueryString</mkapi-api-link>  is used, see  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.defaultEsmInput\" semantic=\"global\">defaultEsmInput</mkapi-api-link>  for remaining default values.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallInputs.esm",
                    "navPath": "@nav[webpm-client]/MainModule.InstallInputs.esm",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "esm?: LightLibraryWithAliasQueryString[] | EsmInputs",
                        "implementation": "",
                        "startLine": 114,
                        "endLine": 115,
                        "references": {
                            "esm": "@nav[webpm-client]/MainModule.InstallInputs.esm",
                            "EsmInputs": "@nav[webpm-client]/MainModule.EsmInputs",
                            "LightLibraryWithAliasQueryString": "@nav/api/MainModule.LightLibraryWithAliasQueryString",
                            "LightLibraryQueryString": "@nav/api/MainModule.LightLibraryQueryString",
                            "PyModule": "@nav/api/MainModule.PyModule"
                        }
                    }
                },
                {
                    "name": "executingWindow",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Window global in which installation occurs. If not provided,  `window`  is used.\n\nIf the client is running in a Web Worker, it is the worker's global scope.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallInputs.executingWindow",
                    "navPath": "@nav[webpm-client]/MainModule.InstallInputs.executingWindow",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "executingWindow?: WindowOrWorkerGlobalScope",
                        "implementation": "",
                        "startLine": 140,
                        "endLine": 141,
                        "references": {
                            "executingWindow": "@nav[webpm-client]/MainModule.InstallInputs.executingWindow"
                        }
                    }
                },
                {
                    "name": "onEvent",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "If provided, any  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.CdnEvent\" semantic=\"interface\">CdnEvent</mkapi-api-link>  emitted are forwarded to this callback.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallInputs.onEvent",
                    "navPath": "@nav[webpm-client]/MainModule.InstallInputs.onEvent",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "onEvent?: (event: CdnEvent) => void",
                        "implementation": "",
                        "startLine": 147,
                        "endLine": 148,
                        "references": {
                            "onEvent": "@nav[webpm-client]/MainModule.InstallInputs.onEvent",
                            "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent"
                        }
                    }
                },
                {
                    "name": "pyodide",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Specifies the pyodide (python running in the browser) modules to install, using one of the following:\n*   <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.PyModule\" semantic=\"type-alias\">PyModule</mkapi-api-link>  for a simpler specification with limited control.\n*   <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.PyodideInputs\" semantic=\"interface\">PyodideInputs</mkapi-api-link>  for a comprehensive specification.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallInputs.pyodide",
                    "navPath": "@nav[webpm-client]/MainModule.InstallInputs.pyodide",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "pyodide?: PyModule[] | PyodideInputs",
                        "implementation": "",
                        "startLine": 128,
                        "endLine": 129,
                        "references": {
                            "pyodide": "@nav[webpm-client]/MainModule.InstallInputs.pyodide",
                            "PyodideInputs": "@nav[webpm-client]/MainModule.PyodideInputs",
                            "LightLibraryWithAliasQueryString": "@nav/api/MainModule.LightLibraryWithAliasQueryString",
                            "LightLibraryQueryString": "@nav/api/MainModule.LightLibraryQueryString",
                            "PyModule": "@nav/api/MainModule.PyModule"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export interface InstallInputs",
                "implementation": "export interface InstallInputs {\n    /**\n     * Specifies the ESM modules to install, using one of the following:\n     * *  {@link LightLibraryWithAliasQueryString} for a simpler specification with limited control.\n     * *  {@link EsmInputs} for a comprehensive specification.\n     *\n     * When {@link LightLibraryWithAliasQueryString} is used, see {@link defaultEsmInput} for remaining default values.\n     */\n    esm?: LightLibraryWithAliasQueryString[] | EsmInputs\n\n    /**\n     * Specifies the backend modules to install, using one of the following:\n     * *  {@link LightLibraryWithAliasQueryString} for a simpler specification with limited control.\n     * *  {@link EsmInputs} for a comprehensive specification.\n     */\n    backends?: LightLibraryWithAliasQueryString[] | BackendInputs\n\n    /**\n     * Specifies the pyodide (python running in the browser) modules to install, using one of the following:\n     * *  {@link PyModule} for a simpler specification with limited control.\n     * *  {@link PyodideInputs} for a comprehensive specification.\n     */\n    pyodide?: PyModule[] | PyodideInputs\n\n    /**\n     * Specify a list of stylesheets to install.\n     */\n    css?: CssInput[]\n\n    /**\n     * Window global in which installation occurs. If not provided, `window` is used.\n     *\n     * If the client is running in a Web Worker, it is the worker's global scope.\n     */\n    executingWindow?: WindowOrWorkerGlobalScope\n\n    /**\n     * If provided, any {@link CdnEvent} emitted are forwarded to this callback.\n     *\n     * @param event event emitted\n     */\n    onEvent?: (event: CdnEvent) => void\n}",
                "startLine": 106,
                "endLine": 149,
                "references": {
                    "InstallInputs": "@nav[webpm-client]/MainModule.InstallInputs",
                    "BackendInputs": "@nav[webpm-client]/MainModule.BackendInputs",
                    "CssInput": "@nav[webpm-client]/MainModule.CssInput",
                    "EsmInputs": "@nav[webpm-client]/MainModule.EsmInputs",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent",
                    "PyodideInputs": "@nav[webpm-client]/MainModule.PyodideInputs"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LoadingGraph",
            "documentation": {
                "sections": [
                    {
                        "content": "Provides necessary information to correctly install & link a set of resources.\nIt is the response returned by the webpm backend.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LoadingGraph",
            "navPath": "@nav[webpm-client]/MainModule.LoadingGraph",
            "attributes": [
                {
                    "name": "definition",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "List of javascript libraries to fetch by batch:\n\n*   `definition[i]`  defines a batch of libraries that can be fetched in any order (or at the same time), provided\nthat all the libraries for the batches  `j<i`  have already been fetched\n*   `definition[i][j]`  defines the j'th library for the batch i:\na tuple of [ `id` ,  `cdn-url` ] where  `id`  is the asset id and  `cdn-url`  the associated URL",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingGraph.definition",
                    "navPath": "@nav[webpm-client]/MainModule.LoadingGraph.definition",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "definition: [string, string][][]",
                        "implementation": "",
                        "startLine": 659,
                        "endLine": 660,
                        "references": {
                            "definition": "@nav[webpm-client]/MainModule.LoadingGraph.definition"
                        }
                    }
                },
                {
                    "name": "graphType",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Type of the graph (versioning to be able to change the fetching mechanism)",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingGraph.graphType",
                    "navPath": "@nav[webpm-client]/MainModule.LoadingGraph.graphType",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "graphType: string",
                        "implementation": "",
                        "startLine": 670,
                        "endLine": 671,
                        "references": {
                            "graphType": "@nav[webpm-client]/MainModule.LoadingGraph.graphType"
                        }
                    }
                },
                {
                    "name": "lock",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Describes the libraries included in the loading graph",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingGraph.lock",
                    "navPath": "@nav[webpm-client]/MainModule.LoadingGraph.lock",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "lock: Library[]",
                        "implementation": "",
                        "startLine": 665,
                        "endLine": 666,
                        "references": {
                            "lock": "@nav[webpm-client]/MainModule.LoadingGraph.lock",
                            "Library": "@nav[webpm-client]/MainModule.Library"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export interface LoadingGraph",
                "implementation": "export interface LoadingGraph {\n    /**\n     *\n     * List of javascript libraries to fetch by batch:\n     *\n     * *  `definition[i]` defines a batch of libraries that can be fetched in any order (or at the same time), provided\n     * that all the libraries for the batches `j<i` have already been fetched\n     * *  `definition[i][j]` defines the j'th library for the batch i:\n     * a tuple of [`id`, `cdn-url`] where `id` is the asset id and `cdn-url` the associated URL\n     */\n    definition: [string, string][][]\n\n    /**\n     *\n     * Describes the libraries included in the loading graph\n     */\n    lock: Library[]\n\n    /**\n     * Type of the graph (versioning to be able to change the fetching mechanism)\n     */\n    graphType: string\n}",
                "startLine": 649,
                "endLine": 672,
                "references": {
                    "LoadingGraph": "@nav[webpm-client]/MainModule.LoadingGraph",
                    "Library": "@nav[webpm-client]/MainModule.Library"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ModuleSideEffectCallbackArgument",
            "documentation": {
                "sections": [
                    {
                        "content": "Argument type for  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.ModuleSideEffectCallback\" semantic=\"type-alias\">ModuleSideEffectCallback</mkapi-api-link>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ModuleSideEffectCallbackArgument",
            "navPath": "@nav[webpm-client]/MainModule.ModuleSideEffectCallbackArgument",
            "attributes": [
                {
                    "name": "executingWindow",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Window instance in which the HTML script element has been added",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ModuleSideEffectCallbackArgument.executingWindow",
                    "navPath": "@nav[webpm-client]/MainModule.ModuleSideEffectCallbackArgument.executingWindow",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "executingWindow: WindowOrWorkerGlobalScope",
                        "implementation": "",
                        "startLine": 505,
                        "endLine": 506,
                        "references": {
                            "executingWindow": "@nav[webpm-client]/MainModule.ModuleSideEffectCallbackArgument.executingWindow"
                        }
                    }
                },
                {
                    "name": "htmlScriptElement",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "HTML script element added",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ModuleSideEffectCallbackArgument.htmlScriptElement",
                    "navPath": "@nav[webpm-client]/MainModule.ModuleSideEffectCallbackArgument.htmlScriptElement",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "htmlScriptElement?: HTMLScriptElement",
                        "implementation": "",
                        "startLine": 501,
                        "endLine": 502,
                        "references": {
                            "htmlScriptElement": "@nav[webpm-client]/MainModule.ModuleSideEffectCallbackArgument.htmlScriptElement"
                        }
                    }
                },
                {
                    "name": "module",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The installed module",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ModuleSideEffectCallbackArgument.module",
                    "navPath": "@nav[webpm-client]/MainModule.ModuleSideEffectCallbackArgument.module",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "module: unknown",
                        "implementation": "",
                        "startLine": 493,
                        "endLine": 494,
                        "references": {
                            "module": "@nav[webpm-client]/MainModule.ModuleSideEffectCallbackArgument.module"
                        }
                    }
                },
                {
                    "name": "origin",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Origin of the module",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ModuleSideEffectCallbackArgument.origin",
                    "navPath": "@nav[webpm-client]/MainModule.ModuleSideEffectCallbackArgument.origin",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "origin: FetchedScript",
                        "implementation": "",
                        "startLine": 497,
                        "endLine": 498,
                        "references": {
                            "origin": "@nav[webpm-client]/MainModule.ModuleSideEffectCallbackArgument.origin"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export interface ModuleSideEffectCallbackArgument",
                "implementation": "export interface ModuleSideEffectCallbackArgument {\n    /**\n     * The installed module\n     */\n    module: unknown\n    /**\n     * Origin of the module\n     */\n    origin: FetchedScript\n    /**\n     * HTML script element added\n     */\n    htmlScriptElement?: HTMLScriptElement\n    /**\n     * Window instance in which the HTML script element has been added\n     */\n    executingWindow: WindowOrWorkerGlobalScope\n}",
                "startLine": 489,
                "endLine": 507,
                "references": {
                    "ModuleSideEffectCallbackArgument": "@nav[webpm-client]/MainModule.ModuleSideEffectCallbackArgument"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyodideInputs",
            "documentation": {
                "sections": [
                    {
                        "content": "Configuration options for installing the Pyodide runtime environment.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyodideInputs",
            "navPath": "@nav[webpm-client]/MainModule.PyodideInputs",
            "attributes": [
                {
                    "name": "indexUrl",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The index URL used to fetch Pyodide and its ported packages.\n\nIf omitted, the  `jsDelivr`  CDN is used.\nIf a custom URL is provided, any occurrence of the placeholder  `$VERSION`  will be replaced\nwith the value specified in  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.PyodideInputs.version\" semantic=\"attribute\">PyodideInputs.version</mkapi-api-link> .\n\n<note level=\"hint\">\nIf omitted and serving your application via the W3Nest local server, the indexUrl targets\nthe proxy  `/python/pyodide/$VERSION` . This configuration allows resources to be cached locally on the\nuser's hard drive, while missing resources are fetched from the  `jsDelivr`  CDN.\n</note>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyodideInputs.indexUrl",
                    "navPath": "@nav[webpm-client]/MainModule.PyodideInputs.indexUrl",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "indexUrl?: string",
                        "implementation": "",
                        "startLine": 316,
                        "endLine": 317,
                        "references": {
                            "indexUrl": "@nav[webpm-client]/MainModule.PyodideInputs.indexUrl"
                        }
                    }
                },
                {
                    "name": "modules",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "An array of Python modules to install.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyodideInputs.modules",
                    "navPath": "@nav[webpm-client]/MainModule.PyodideInputs.modules",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "modules: PyModule[]",
                        "implementation": "",
                        "startLine": 299,
                        "endLine": 300,
                        "references": {
                            "modules": "@nav[webpm-client]/MainModule.PyodideInputs.modules",
                            "LightLibraryWithAliasQueryString": "@nav/api/MainModule.LightLibraryWithAliasQueryString",
                            "LightLibraryQueryString": "@nav/api/MainModule.LightLibraryQueryString",
                            "PyModule": "@nav/api/MainModule.PyModule"
                        }
                    }
                },
                {
                    "name": "version",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The target version of Pyodide (specified as a plain string, not semver).\n\nIf omitted, the latest release tag is automatically fetched from:\n `https://api.github.com/repos/pyodide/pyodide/releases/latest` .\n\n<note level=\"warning\">\nOnly one Pyodide version can be installed at a time.\n</note>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyodideInputs.version",
                    "navPath": "@nav[webpm-client]/MainModule.PyodideInputs.version",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "version?: string",
                        "implementation": "",
                        "startLine": 295,
                        "endLine": 296,
                        "references": {
                            "version": "@nav[webpm-client]/MainModule.PyodideInputs.version"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export interface PyodideInputs",
                "implementation": "export interface PyodideInputs {\n    /**\n     * The target version of Pyodide (specified as a plain string, not semver).\n     *\n     * If omitted, the latest release tag is automatically fetched from:\n     * `https://api.github.com/repos/pyodide/pyodide/releases/latest`.\n     *\n     * <note level=\"warning\">\n     * Only one Pyodide version can be installed at a time.\n     * </note>\n     */\n    version?: string\n    /**\n     * An array of Python modules to install.\n     */\n    modules: PyModule[]\n\n    pyodideAlias?: string\n\n    /**\n     * The index URL used to fetch Pyodide and its ported packages.\n     *\n     * If omitted, the `jsDelivr` CDN is used.\n     * If a custom URL is provided, any occurrence of the placeholder `$VERSION` will be replaced\n     * with the value specified in {@link PyodideInputs.version}.\n     *\n     * <note level=\"hint\">\n     * If omitted and serving your application via the W3Nest local server, the indexUrl targets\n     * the proxy `/python/pyodide/$VERSION`. This configuration allows resources to be cached locally on the\n     * user's hard drive, while missing resources are fetched from the `jsDelivr` CDN.\n     * </note>\n     */\n    indexUrl?: string\n}",
                "startLine": 284,
                "endLine": 318,
                "references": {
                    "PyodideInputs": "@nav[webpm-client]/MainModule.PyodideInputs"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "QueryLoadingGraphInputs",
            "documentation": {
                "sections": [
                    {
                        "content": "Inputs for the method  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.queryLoadingGraph\" semantic=\"function\">queryLoadingGraph</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "QueryLoadingGraphInputs",
            "navPath": "@nav[webpm-client]/MainModule.QueryLoadingGraphInputs",
            "attributes": [
                {
                    "name": "extraIndex",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "This property allows to resolve loading graph, including some libraries that may not exist\nin target database.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "QueryLoadingGraphInputs.extraIndex",
                    "navPath": "@nav[webpm-client]/MainModule.QueryLoadingGraphInputs.extraIndex",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "extraIndex?: string",
                        "implementation": "",
                        "startLine": 594,
                        "endLine": 595,
                        "references": {
                            "extraIndex": "@nav[webpm-client]/MainModule.QueryLoadingGraphInputs.extraIndex"
                        }
                    }
                },
                {
                    "name": "modules",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "See  `modules`  of  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.InstallInputs\" semantic=\"interface\">InstallInputs</mkapi-api-link>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "QueryLoadingGraphInputs.modules",
                    "navPath": "@nav[webpm-client]/MainModule.QueryLoadingGraphInputs.modules",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "modules: LightLibraryQueryString[]",
                        "implementation": "",
                        "startLine": 583,
                        "endLine": 584,
                        "references": {
                            "modules": "@nav[webpm-client]/MainModule.QueryLoadingGraphInputs.modules",
                            "LightLibraryWithAliasQueryString": "@nav/api/MainModule.LightLibraryWithAliasQueryString",
                            "LightLibraryQueryString": "@nav/api/MainModule.LightLibraryQueryString",
                            "PyModule": "@nav/api/MainModule.PyModule"
                        }
                    }
                },
                {
                    "name": "usingDependencies",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "See  `usingDependencies`  of  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.InstallInputs\" semantic=\"interface\">InstallInputs</mkapi-api-link>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "QueryLoadingGraphInputs.usingDependencies",
                    "navPath": "@nav[webpm-client]/MainModule.QueryLoadingGraphInputs.usingDependencies",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "usingDependencies?: LightLibraryQueryString[]",
                        "implementation": "",
                        "startLine": 588,
                        "endLine": 589,
                        "references": {
                            "usingDependencies": "@nav[webpm-client]/MainModule.QueryLoadingGraphInputs.usingDependencies",
                            "LightLibraryWithAliasQueryString": "@nav/api/MainModule.LightLibraryWithAliasQueryString",
                            "LightLibraryQueryString": "@nav/api/MainModule.LightLibraryQueryString",
                            "PyModule": "@nav/api/MainModule.PyModule"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export interface QueryLoadingGraphInputs",
                "implementation": "export interface QueryLoadingGraphInputs {\n    /**\n     * See `modules` of {@link InstallInputs}\n     */\n    modules: LightLibraryQueryString[]\n\n    /**\n     * See `usingDependencies` of {@link InstallInputs}\n     */\n    usingDependencies?: LightLibraryQueryString[]\n\n    /**\n     * This property allows to resolve loading graph, including some libraries that may not exist\n     * in target database.\n     */\n    extraIndex?: string\n}",
                "startLine": 579,
                "endLine": 596,
                "references": {
                    "QueryLoadingGraphInputs": "@nav[webpm-client]/MainModule.QueryLoadingGraphInputs"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ScriptSideEffectCallbackArgument",
            "documentation": {
                "sections": [
                    {
                        "content": "Argument type for  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.CssSideEffectCallback\" semantic=\"type-alias\">CssSideEffectCallback</mkapi-api-link>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ScriptSideEffectCallbackArgument",
            "navPath": "@nav[webpm-client]/MainModule.ScriptSideEffectCallbackArgument",
            "attributes": [
                {
                    "name": "executingWindow",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Window instance in which the HTML script element has been added",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ScriptSideEffectCallbackArgument.executingWindow",
                    "navPath": "@nav[webpm-client]/MainModule.ScriptSideEffectCallbackArgument.executingWindow",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "executingWindow: WindowOrWorkerGlobalScope",
                        "implementation": "",
                        "startLine": 564,
                        "endLine": 565,
                        "references": {
                            "executingWindow": "@nav[webpm-client]/MainModule.ScriptSideEffectCallbackArgument.executingWindow"
                        }
                    }
                },
                {
                    "name": "htmlScriptElement",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "HTML script element added",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ScriptSideEffectCallbackArgument.htmlScriptElement",
                    "navPath": "@nav[webpm-client]/MainModule.ScriptSideEffectCallbackArgument.htmlScriptElement",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "htmlScriptElement?: HTMLScriptElement",
                        "implementation": "",
                        "startLine": 559,
                        "endLine": 560,
                        "references": {
                            "htmlScriptElement": "@nav[webpm-client]/MainModule.ScriptSideEffectCallbackArgument.htmlScriptElement"
                        }
                    }
                },
                {
                    "name": "origin",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Origin of the style-sheet",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ScriptSideEffectCallbackArgument.origin",
                    "navPath": "@nav[webpm-client]/MainModule.ScriptSideEffectCallbackArgument.origin",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "origin: FetchedScript",
                        "implementation": "",
                        "startLine": 554,
                        "endLine": 555,
                        "references": {
                            "origin": "@nav[webpm-client]/MainModule.ScriptSideEffectCallbackArgument.origin"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export interface ScriptSideEffectCallbackArgument",
                "implementation": "export interface ScriptSideEffectCallbackArgument {\n    /**\n     * Origin of the style-sheet\n     */\n    origin: FetchedScript\n\n    /**\n     * HTML script element added\n     */\n    htmlScriptElement?: HTMLScriptElement\n\n    /**\n     * Window instance in which the HTML script element has been added\n     */\n    executingWindow: WindowOrWorkerGlobalScope\n}",
                "startLine": 550,
                "endLine": 566,
                "references": {
                    "ScriptSideEffectCallbackArgument": "@nav[webpm-client]/MainModule.ScriptSideEffectCallbackArgument"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "BackendEventType",
            "documentation": {
                "sections": [
                    {
                        "content": "<mkapi-api-link nav=\"@nav[webpm-client]/MainModule.backendEventTypes\" semantic=\"global\">backendEventTypes</mkapi-api-link>  as type literal union.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BackendEventType",
            "navPath": "@nav[webpm-client]/MainModule.BackendEventType",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export type BackendEventType = (typeof backendEventTypes)[number]",
                "implementation": "",
                "startLine": 169,
                "endLine": 170,
                "references": {
                    "BackendEventType": "@nav[webpm-client]/MainModule.BackendEventType",
                    "backendEventTypes": "@nav[webpm-client]/MainModule.backendEventTypes"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CdnFetchEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Base class for CDN's HTTP request event.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CdnFetchEvent",
            "navPath": "@nav[webpm-client]/MainModule.CdnFetchEvent",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export type CdnFetchEvent = CdnEvent & {\n    id: string\n    assetId: string\n    targetName: string\n    url: string\n    version: string\n}",
                "implementation": "",
                "startLine": 280,
                "endLine": 281,
                "references": {
                    "CdnFetchEvent": "@nav[webpm-client]/MainModule.CdnFetchEvent",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent",
                    "CssLoadingEvent": "@nav[webpm-client]/MainModule.CssLoadingEvent",
                    "CssParsedEvent": "@nav[webpm-client]/MainModule.CssParsedEvent",
                    "ParseErrorEvent": "@nav[webpm-client]/MainModule.ParseErrorEvent",
                    "SourceLoadedEvent": "@nav[webpm-client]/MainModule.SourceLoadedEvent",
                    "SourceLoadingEvent": "@nav[webpm-client]/MainModule.SourceLoadingEvent",
                    "SourceParsedEvent": "@nav[webpm-client]/MainModule.SourceParsedEvent",
                    "StartEvent": "@nav[webpm-client]/MainModule.StartEvent",
                    "UnauthorizedEvent": "@nav[webpm-client]/MainModule.UnauthorizedEvent",
                    "UrlNotFoundEvent": "@nav[webpm-client]/MainModule.UrlNotFoundEvent"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CdnPyEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Base class for Pyodide related event.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CdnPyEvent",
            "navPath": "@nav[webpm-client]/MainModule.CdnPyEvent",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export type CdnPyEvent = CdnEvent",
                "implementation": "",
                "startLine": 650,
                "endLine": 651,
                "references": {
                    "CdnPyEvent": "@nav[webpm-client]/MainModule.CdnPyEvent",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent",
                    "ConsoleEvent": "@nav[webpm-client]/MainModule.ConsoleEvent",
                    "FetchPyRuntimeEvent": "@nav[webpm-client]/MainModule.FetchPyRuntimeEvent",
                    "FetchedPyRuntimeEvent": "@nav[webpm-client]/MainModule.FetchedPyRuntimeEvent",
                    "InstallPyModuleEvent": "@nav[webpm-client]/MainModule.InstallPyModuleEvent",
                    "PyEnvironmentErrorEvent": "@nav[webpm-client]/MainModule.PyEnvironmentErrorEvent",
                    "PyEnvironmentReadyEvent": "@nav[webpm-client]/MainModule.PyEnvironmentReadyEvent",
                    "PyModuleErrorEvent": "@nav[webpm-client]/MainModule.PyModuleErrorEvent",
                    "PyModuleLoadedEvent": "@nav[webpm-client]/MainModule.PyModuleLoadedEvent",
                    "PyRuntimeReadyEvent": "@nav[webpm-client]/MainModule.PyRuntimeReadyEvent",
                    "StartPyEnvironmentInstallEvent": "@nav[webpm-client]/MainModule.StartPyEnvironmentInstallEvent",
                    "StartPyRuntimeEvent": "@nav[webpm-client]/MainModule.StartPyRuntimeEvent"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CssEventType",
            "documentation": {
                "sections": [
                    {
                        "content": "<mkapi-api-link nav=\"@nav[webpm-client]/MainModule.cssEventTypes\" semantic=\"global\">cssEventTypes</mkapi-api-link>  as type literal union.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CssEventType",
            "navPath": "@nav[webpm-client]/MainModule.CssEventType",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export type CssEventType = (typeof cssEventTypes)[number]",
                "implementation": "",
                "startLine": 116,
                "endLine": 117,
                "references": {
                    "CssEventType": "@nav[webpm-client]/MainModule.CssEventType",
                    "cssEventTypes": "@nav[webpm-client]/MainModule.cssEventTypes"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CssInput",
            "documentation": {
                "sections": [
                    {
                        "content": "specification of a CSS resource, either:\n*  the reference to a location\n*  an object with\n    *  'location': reference of the location\n    *  'sideEffects': the sideEffects to execute after the HTMLLinkElement has been loaded,\n    see  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.CssSideEffectCallback\" semantic=\"type-alias\">CssSideEffectCallback</mkapi-api-link>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CssInput",
            "navPath": "@nav[webpm-client]/MainModule.CssInput",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export type CssInput =\n    | FileLocationString\n    | { location: FileLocationString; sideEffects?: CssSideEffectCallback }",
                "implementation": "",
                "startLine": 340,
                "endLine": 341,
                "references": {
                    "CssInput": "@nav[webpm-client]/MainModule.CssInput",
                    "FileLocationString": "@nav[webpm-client]/MainModule.FileLocationString",
                    "CssSideEffectCallback": "@nav[webpm-client]/MainModule.CssSideEffectCallback"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CssSideEffectCallback",
            "documentation": {
                "sections": [
                    {
                        "content": "Type definition of a css installation side effects:\na callback taking an instance of  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.CssSideEffectCallbackArgument\" semantic=\"interface\">CssSideEffectCallbackArgument</mkapi-api-link>  as argument.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CssSideEffectCallback",
            "navPath": "@nav[webpm-client]/MainModule.CssSideEffectCallback",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export type CssSideEffectCallback = (\n    argument: CssSideEffectCallbackArgument,\n) => void | Promise<void>",
                "implementation": "",
                "startLine": 543,
                "endLine": 544,
                "references": {
                    "CssSideEffectCallback": "@nav[webpm-client]/MainModule.CssSideEffectCallback",
                    "CssSideEffectCallbackArgument": "@nav[webpm-client]/MainModule.CssSideEffectCallbackArgument"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ErrorEventType",
            "documentation": {
                "sections": [
                    {
                        "content": "<mkapi-api-link nav=\"@nav[webpm-client]/MainModule.errorEventTypes\" semantic=\"global\">errorEventTypes</mkapi-api-link>  as type literal union.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ErrorEventType",
            "navPath": "@nav[webpm-client]/MainModule.ErrorEventType",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export type ErrorEventType = (typeof errorEventTypes)[number]",
                "implementation": "",
                "startLine": 217,
                "endLine": 218,
                "references": {
                    "ErrorEventType": "@nav[webpm-client]/MainModule.ErrorEventType",
                    "errorEventTypes": "@nav[webpm-client]/MainModule.errorEventTypes"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "EsmEventType",
            "documentation": {
                "sections": [
                    {
                        "content": "<mkapi-api-link nav=\"@nav[webpm-client]/MainModule.esmEventTypes\" semantic=\"global\">esmEventTypes</mkapi-api-link>  as type literal union.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "EsmEventType",
            "navPath": "@nav[webpm-client]/MainModule.EsmEventType",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export type EsmEventType = (typeof esmEventTypes)[number]",
                "implementation": "",
                "startLine": 92,
                "endLine": 93,
                "references": {
                    "EsmEventType": "@nav[webpm-client]/MainModule.EsmEventType",
                    "esmEventTypes": "@nav[webpm-client]/MainModule.esmEventTypes"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "EventStatus",
            "documentation": {
                "sections": [
                    {
                        "content": "Type literal for event's status.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "EventStatus",
            "navPath": "@nav[webpm-client]/MainModule.EventStatus",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export type EventStatus = 'Pending' | 'Succeeded' | 'Failed' | 'None'",
                "implementation": "",
                "startLine": 231,
                "endLine": 232,
                "references": {
                    "EventStatus": "@nav[webpm-client]/MainModule.EventStatus"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "EventType",
            "documentation": {
                "sections": [
                    {
                        "content": "<mkapi-api-link nav=\"@nav[webpm-client]/MainModule.eventTypes\" semantic=\"global\">eventTypes</mkapi-api-link>  as type literal union.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "EventType",
            "navPath": "@nav[webpm-client]/MainModule.EventType",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export type EventType = (typeof eventTypes)[number]",
                "implementation": "",
                "startLine": 199,
                "endLine": 200,
                "references": {
                    "EventType": "@nav[webpm-client]/MainModule.EventType",
                    "eventTypes": "@nav[webpm-client]/MainModule.eventTypes"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "FileLocationString",
            "documentation": {
                "sections": [
                    {
                        "content": "A FileLocationString is a string that specifies location in the files structure of a module using the format:\n `{moduleName}#{version}~{rest-of-path}` \n\nWhere:\n*   `moduleName`  is the name of the module containing the script\n*   `version`  is the semver query\n*   `rest-of-path`  is the path of the script from the root module directory\n\n\nE.g.:  `codemirror#5.52.0~mode/javascript.min.js`",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "FileLocationString",
            "navPath": "@nav[webpm-client]/MainModule.FileLocationString",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export type FileLocationString = string",
                "implementation": "",
                "startLine": 16,
                "endLine": 17,
                "references": {
                    "FileLocationString": "@nav[webpm-client]/MainModule.FileLocationString"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LibraryName",
            "documentation": {
                "sections": [
                    {
                        "content": "Type alias for string used as library name.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LibraryName",
            "navPath": "@nav[webpm-client]/MainModule.LibraryName",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/state.ts",
                "declaration": "export type LibraryName = string",
                "implementation": "",
                "startLine": 15,
                "endLine": 16,
                "references": {
                    "LibraryName": "@nav[webpm-client]/MainModule.LibraryName"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LightLibraryQueryString",
            "documentation": {
                "sections": [
                    {
                        "content": "A  `LightLibraryQueryString`  is a string format used to specify a library installation request.\n\nThe format can be one of the following:\n\n-  `string` : The library name, implicitly targeting the latest available version.\n-  `${string}#${string}` : A library name followed by a  `#`  and a **semantic versioning range**.\n\n**Example Usage:**\n\n ```ts\n\"codemirror#^5.52.0\"\n``` \n\nIn this example,  `codemirror`  is requested with the latest compatible version matching  `^5.52.0` .\n\n<note level=\"warning\">\nWhen specifying a semantic versioning range, it is strongly recommended to use an API-compatible range\n(i.e., using the  `^`  operator).\n\nThis ensures that only a **single version** of the library is installed for a given API version (determined by\nthe left-most non-zero digit), as multiple versions of the same API are **not allowed**.\n</note>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LightLibraryQueryString",
            "navPath": "@nav[webpm-client]/MainModule.LightLibraryQueryString",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export type LightLibraryQueryString = string | `${string}#${string}`",
                "implementation": "",
                "startLine": 44,
                "endLine": 45,
                "references": {
                    "LightLibraryQueryString": "@nav[webpm-client]/MainModule.LightLibraryQueryString"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LightLibraryWithAliasQueryString",
            "documentation": {
                "sections": [
                    {
                        "content": "A  `LightLibraryWithAliasQueryString`  extends  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.LightLibraryQueryString\" semantic=\"type-alias\">LightLibraryQueryString</mkapi-api-link>  by allowing an optional alias.\n\nThe expected format:\n ```\n{moduleName}#{semver} as {alias}\n``` \n\n**Example Usage:**\n ```ts\n\"codemirror#^5.52.0 as CM\"\n``` \n\n-  `codemirror#^5.52.0` : Specifies the module and its semantic versioning range.\n-  `as CM` : Assigns an alias ( `CM` ) for easier reference.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LightLibraryWithAliasQueryString",
            "navPath": "@nav[webpm-client]/MainModule.LightLibraryWithAliasQueryString",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export type LightLibraryWithAliasQueryString =\n    | LightLibraryQueryString\n    // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n    | `${LightLibraryQueryString} as ${string}`",
                "implementation": "",
                "startLine": 63,
                "endLine": 64,
                "references": {
                    "LightLibraryWithAliasQueryString": "@nav[webpm-client]/MainModule.LightLibraryWithAliasQueryString"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LoadingGraphEventType",
            "documentation": {
                "sections": [
                    {
                        "content": "<mkapi-api-link nav=\"@nav[webpm-client]/MainModule.loadingGraphEventTypes\" semantic=\"global\">loadingGraphEventTypes</mkapi-api-link>  as type literal union.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LoadingGraphEventType",
            "navPath": "@nav[webpm-client]/MainModule.LoadingGraphEventType",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export type LoadingGraphEventType = (typeof loadingGraphEventTypes)[number]",
                "implementation": "",
                "startLine": 68,
                "endLine": 69,
                "references": {
                    "LoadingGraphEventType": "@nav[webpm-client]/MainModule.LoadingGraphEventType",
                    "loadingGraphEventTypes": "@nav[webpm-client]/MainModule.loadingGraphEventTypes"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ModuleInput",
            "documentation": {
                "sections": [
                    {
                        "content": "Specification of a module.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ModuleInput",
            "navPath": "@nav[webpm-client]/MainModule.ModuleInput",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export type ModuleInput =\n    | {\n          name: string\n          version: string\n          sideEffects?: (Window) => void\n          alias: string\n      }\n    | string",
                "implementation": "",
                "startLine": 322,
                "endLine": 323,
                "references": {
                    "ModuleInput": "@nav[webpm-client]/MainModule.ModuleInput"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ModuleSideEffectCallback",
            "documentation": {
                "sections": [
                    {
                        "content": "Type definition of a module installation side effects:\na callback taking an instance of  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.ModuleSideEffectCallbackArgument\" semantic=\"interface\">ModuleSideEffectCallbackArgument</mkapi-api-link>  as argument.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ModuleSideEffectCallback",
            "navPath": "@nav[webpm-client]/MainModule.ModuleSideEffectCallback",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export type ModuleSideEffectCallback = (\n    argument: ModuleSideEffectCallbackArgument,\n) => void | Promise<void>",
                "implementation": "",
                "startLine": 511,
                "endLine": 512,
                "references": {
                    "ModuleSideEffectCallback": "@nav[webpm-client]/MainModule.ModuleSideEffectCallback",
                    "ModuleSideEffectCallbackArgument": "@nav[webpm-client]/MainModule.ModuleSideEffectCallbackArgument"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyEventType",
            "documentation": {
                "sections": [
                    {
                        "content": "<mkapi-api-link nav=\"@nav[webpm-client]/MainModule.pyEventTypes\" semantic=\"global\">pyEventTypes</mkapi-api-link>  as type literal union.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyEventType",
            "navPath": "@nav[webpm-client]/MainModule.PyEventType",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export type PyEventType = (typeof pyEventTypes)[number]",
                "implementation": "",
                "startLine": 147,
                "endLine": 148,
                "references": {
                    "PyEventType": "@nav[webpm-client]/MainModule.PyEventType",
                    "pyEventTypes": "@nav[webpm-client]/MainModule.pyEventTypes"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyModule",
            "documentation": {
                "sections": [
                    {
                        "content": "A string interpreted as a python module specification.\n\nThey are forwarded to <a target=\"_blank\" href=\"https://pyodide.org/en/stable/usage/loading-packages.html#micropip\">\nmicropip.install</a> for installation within the Pyodide environment.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyModule",
            "navPath": "@nav[webpm-client]/MainModule.PyModule",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export type PyModule = string",
                "implementation": "",
                "startLine": 74,
                "endLine": 75,
                "references": {
                    "PyModule": "@nav[webpm-client]/MainModule.PyModule"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ScriptInput",
            "documentation": {
                "sections": [
                    {
                        "content": "specification of a Script resource, either:\n*  the reference to a location\n*  an object with\n    *  'location': reference of the location\n    *  'sideEffects': the sideEffects to execute after the HTMLScriptElement has been loaded,\n    see  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.ScriptSideEffectCallback\" semantic=\"type-alias\">ScriptSideEffectCallback</mkapi-api-link>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ScriptInput",
            "navPath": "@nav[webpm-client]/MainModule.ScriptInput",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export type ScriptInput =\n    | FileLocationString\n    | { location: FileLocationString; sideEffects: ScriptSideEffectCallback }",
                "implementation": "",
                "startLine": 353,
                "endLine": 354,
                "references": {
                    "ScriptInput": "@nav[webpm-client]/MainModule.ScriptInput",
                    "FileLocationString": "@nav[webpm-client]/MainModule.FileLocationString",
                    "ScriptSideEffectCallback": "@nav[webpm-client]/MainModule.ScriptSideEffectCallback"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ScriptSideEffectCallback",
            "documentation": {
                "sections": [
                    {
                        "content": "Type definition of a script installation side effects:\na callback taking an instance of  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.ScriptSideEffectCallbackArgument\" semantic=\"interface\">ScriptSideEffectCallbackArgument</mkapi-api-link>  as argument.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ScriptSideEffectCallback",
            "navPath": "@nav[webpm-client]/MainModule.ScriptSideEffectCallback",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export type ScriptSideEffectCallback = (\n    argument: ScriptSideEffectCallbackArgument,\n) => void | Promise<void>",
                "implementation": "",
                "startLine": 571,
                "endLine": 572,
                "references": {
                    "ScriptSideEffectCallback": "@nav[webpm-client]/MainModule.ScriptSideEffectCallback",
                    "ScriptSideEffectCallbackArgument": "@nav[webpm-client]/MainModule.ScriptSideEffectCallbackArgument"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Topic",
            "documentation": {
                "sections": [
                    {
                        "content": "Available topics when installing components.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Topic",
            "navPath": "@nav[webpm-client]/MainModule.Topic",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export type Topic =\n    | 'LoadingGraph'\n    | 'ESM'\n    | 'Python'\n    | 'Backend'\n    | 'CSS'\n    | 'Worker'",
                "implementation": "",
                "startLine": 13,
                "endLine": 14,
                "references": {
                    "Topic": "@nav[webpm-client]/MainModule.Topic"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Version",
            "documentation": {
                "sections": [
                    {
                        "content": "Type alias for string used as version.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Version",
            "navPath": "@nav[webpm-client]/MainModule.Version",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/state.ts",
                "declaration": "export type Version = string",
                "implementation": "",
                "startLine": 19,
                "endLine": 20,
                "references": {
                    "Version": "@nav[webpm-client]/MainModule.Version"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ViewsModule",
            "documentation": {
                "sections": [
                    {
                        "content": "Type definition of the module  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.ViewsModule\" semantic=\"type-alias\">ViewsModule</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ViewsModule",
            "navPath": "@nav[webpm-client]/MainModule.ViewsModule",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/views.installer.ts",
                "declaration": "export type ViewsModule = typeof import('./views')",
                "implementation": "",
                "startLine": 6,
                "endLine": 7,
                "references": {
                    "ViewsModule": "@nav[webpm-client]/MainModule.ViewsModule",
                    "__module": "@nav[webpm-client]/ViewsModule"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "WorkersModule",
            "documentation": {
                "sections": [
                    {
                        "content": "Type definition of the module  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule\" semantic=\"module\">WorkersPoolModule</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "WorkersModule",
            "navPath": "@nav[webpm-client]/MainModule.WorkersModule",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool.installer.ts",
                "declaration": "export type WorkersModule = typeof import('./workers-pool')",
                "implementation": "",
                "startLine": 7,
                "endLine": 8,
                "references": {
                    "WorkersModule": "@nav[webpm-client]/MainModule.WorkersModule",
                    "__module": "@nav[webpm-client]/WorkersPoolModule"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        }
    ],
    "callables": [
        {
            "name": "backendConfiguration",
            "documentation": {
                "sections": [
                    {
                        "content": "Construct a backend configuration.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **id**: Id associated to the configuration.\n*  **origin**: Origin of the backend.\n*  **pathLoadingGraph**: Path of the end-point to query the loading graph.\n*  **pathPyodide**: Path to fetch Pyodide resources.\n*  **pathPypi**: Path to fetch PyPi module.\n*  **pathResource**: Path of the end-point to fetch the bundle of a package.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "backendConfiguration",
            "navPath": "@nav[webpm-client]/MainModule.backendConfiguration",
            "code": {
                "filePath": "src/lib/backend-configuration.ts",
                "declaration": "export function backendConfiguration({\n    pathLoadingGraph,\n    pathResource,\n    origin,\n    id,\n    pathPypi,\n    pathPyodide,\n}: {\n    id?: string\n    pathLoadingGraph: string\n    pathResource: string\n    origin?: { secure?: boolean; hostname?: string; port?: number } | string\n    pathPypi?: string\n    pathPyodide?: string\n}): BackendConfiguration",
                "implementation": "export function backendConfiguration({\n    pathLoadingGraph,\n    pathResource,\n    origin,\n    id,\n    pathPypi,\n    pathPyodide,\n}: {\n    id?: string\n    pathLoadingGraph: string\n    pathResource: string\n    origin?: { secure?: boolean; hostname?: string; port?: number } | string\n    pathPypi?: string\n    pathPyodide?: string\n}): BackendConfiguration {\n    if (typeof origin !== 'string') {\n        origin = computeOrigin(origin)\n    }\n    return {\n        id,\n        origin,\n        urlLoadingGraph: `${origin}${pathLoadingGraph}`,\n        urlResource: `${origin}${pathResource}`,\n        urlPypi: pathPypi ? `${origin}${pathPypi}` : 'https://pypi.org/simple',\n        urlPyodide: pathPyodide\n            ? `${origin}${pathPyodide}/$VERSION`\n            : `https://cdn.jsdelivr.net/pyodide/v$VERSION/full`,\n    }\n}",
                "startLine": 122,
                "endLine": 151,
                "references": {
                    "backendConfiguration": "@nav[webpm-client]/MainModule.backendConfiguration",
                    "BackendConfiguration": "@nav[webpm-client]/MainModule.BackendConfiguration"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "errorFactory",
            "documentation": {
                "sections": [
                    {
                        "content": "Errors factory.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "errorFactory",
            "navPath": "@nav[webpm-client]/MainModule.errorFactory",
            "code": {
                "filePath": "src/lib/errors.models.ts",
                "declaration": "export function errorFactory(error: CdnError): Error",
                "implementation": "export function errorFactory(error: CdnError): Error {\n    if (CircularDependencies.isInstance(error)) {\n        return new CircularDependencies(error.detail)\n    }\n    if (DependenciesError.isInstance(error)) {\n        return new DependenciesError(error.detail)\n    }\n    if (Unauthorized.isInstance(error)) {\n        return new Unauthorized(error.detail)\n    }\n    if (\n        'exceptionType' in error &&\n        error.exceptionType === 'UpstreamResponseException'\n    ) {\n        // noinspection TailRecursionJS\n        return errorFactory((error as unknown as { detail: CdnError }).detail)\n    }\n    return error\n}",
                "startLine": 190,
                "endLine": 209,
                "references": {
                    "errorFactory": "@nav[webpm-client]/MainModule.errorFactory",
                    "CdnError": "@nav[webpm-client]/MainModule.CdnError"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "getAssetId",
            "documentation": {
                "sections": [
                    {
                        "content": "Returns the assetId from a name.\nIt does not imply that the asset exist.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **name**: name of the package (as defined in package.json)",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "assetId used in the assets store",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "getAssetId",
            "navPath": "@nav[webpm-client]/MainModule.getAssetId",
            "code": {
                "filePath": "src/lib/utils.ts",
                "declaration": "export function getAssetId(name: string)",
                "implementation": "export function getAssetId(name: string) {\n    return window.btoa(name)\n}",
                "startLine": 352,
                "endLine": 355,
                "references": {
                    "getAssetId": "@nav[webpm-client]/MainModule.getAssetId"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "getUrlBase",
            "documentation": {
                "sections": [
                    {
                        "content": "Returns the base url to access a CDN asset from its name & version.\nIt does not imply that the asset exist.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **name**: name of the package (as defined in package.json).\n*  **version**: version of the package (as defined in package.json).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "base url to access the resource.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "getUrlBase",
            "navPath": "@nav[webpm-client]/MainModule.getUrlBase",
            "code": {
                "filePath": "src/lib/utils.ts",
                "declaration": "export function getUrlBase(name: string, version: string)",
                "implementation": "export function getUrlBase(name: string, version: string) {\n    const assetId = getAssetId(name)\n    return `${Client.BackendConfiguration.urlResource}/${assetId}/${version}`\n}",
                "startLine": 365,
                "endLine": 369,
                "references": {
                    "getUrlBase": "@nav[webpm-client]/MainModule.getUrlBase"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "install",
            "documentation": {
                "sections": [
                    {
                        "content": "Install resources.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **inputs**: Refer to the documentation of  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.InstallInputs\" semantic=\"interface\">InstallInputs</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Generics",
                        "content": "\n*  **T**: Type expectation on the returned global scope.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "The global scope.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "install",
            "navPath": "@nav[webpm-client]/MainModule.install",
            "code": {
                "filePath": "src/lib/client.ts",
                "declaration": "export function install<T = unknown>(\n    inputs: InstallInputs,\n): Promise<WindowOrWorkerGlobalScope & T>",
                "implementation": "export function install<T = unknown>(\n    inputs: InstallInputs,\n): Promise<WindowOrWorkerGlobalScope & T> {\n    return new Client().install(inputs) as unknown as Promise<\n        WindowOrWorkerGlobalScope & T\n    >\n}",
                "startLine": 86,
                "endLine": 93,
                "references": {
                    "install": "@nav[webpm-client]/MainModule.install",
                    "InstallInputs": "@nav[webpm-client]/MainModule.InstallInputs"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "installViewsModule",
            "documentation": {
                "sections": [
                    {
                        "content": "Install the  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.ViewsModule\" semantic=\"type-alias\">ViewsModule</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "installViewsModule",
            "navPath": "@nav[webpm-client]/MainModule.installViewsModule",
            "code": {
                "filePath": "src/lib/views.installer.ts",
                "declaration": "export async function installViewsModule(): Promise<ViewsModule>",
                "implementation": "export async function installViewsModule(): Promise<ViewsModule> {\n    const { viewsModule } = await webpmClient.install<{\n        viewsModule: ViewsModule\n    }>({\n        esm: [`${pkgJson.name}/views#${pkgJson.version} as viewsModule`],\n        css: [`${pkgJson.name}#${pkgJson.version}~assets/style.css`],\n    })\n    viewsModule.Dependencies.webpm = webpmClient\n    return viewsModule\n}",
                "startLine": 12,
                "endLine": 22,
                "references": {
                    "installViewsModule": "@nav[webpm-client]/MainModule.installViewsModule",
                    "__module": "@nav[webpm-client]/ViewsModule"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "installWorkersPoolModule",
            "documentation": {
                "sections": [
                    {
                        "content": "Install  <mkapi-api-link nav=\"@nav[webpm-client]/WorkersPoolModule\" semantic=\"module\">WorkersPoolModule</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "installWorkersPoolModule",
            "navPath": "@nav[webpm-client]/MainModule.installWorkersPoolModule",
            "code": {
                "filePath": "src/lib/workers-pool.installer.ts",
                "declaration": "export async function installWorkersPoolModule(): Promise<WorkersModule> {",
                "implementation": "export async function installWorkersPoolModule(): Promise<WorkersModule> {\n    return await webpmClient\n        .install<{ wpModule: WorkersModule }>({\n            esm: [`${pkgJson.name}/workersPool#${pkgJson.version} as wpModule`],\n        })\n        .then(({ wpModule }) => {\n            setupWorkersPoolModule(wpModule)\n            return wpModule\n        })\n}",
                "startLine": 43,
                "endLine": 53,
                "references": {
                    "installWorkersPoolModule": "@nav[webpm-client]/MainModule.installWorkersPoolModule",
                    "__module": "@nav[webpm-client]/WorkersPoolModule"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "isBackendEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Type guard for  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.BackendEventType\" semantic=\"type-alias\">BackendEventType</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "isBackendEvent",
            "navPath": "@nav[webpm-client]/MainModule.isBackendEvent",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export function isBackendEvent(\n    event: CdnEvent,\n): event is AllEvents[BackendEventType]",
                "implementation": "export function isBackendEvent(\n    event: CdnEvent,\n): event is AllEvents[BackendEventType] {\n    return backendEventTypes.includes(event.step as BackendEventType)\n}",
                "startLine": 174,
                "endLine": 179,
                "references": {
                    "isBackendEvent": "@nav[webpm-client]/MainModule.isBackendEvent",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent",
                    "DownloadBackendEvent": "@nav[webpm-client]/MainModule.DownloadBackendEvent",
                    "InstallBackendEvent": "@nav[webpm-client]/MainModule.InstallBackendEvent",
                    "StartBackendEvent": "@nav[webpm-client]/MainModule.StartBackendEvent",
                    "BackendErrorEvent": "@nav[webpm-client]/MainModule.BackendErrorEvent"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "isCdnEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Type guard for  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.CdnEvent\" semantic=\"interface\">CdnEvent</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "isCdnEvent",
            "navPath": "@nav[webpm-client]/MainModule.isCdnEvent",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export function isCdnEvent(event: unknown): event is CdnEvent",
                "implementation": "export function isCdnEvent(event: unknown): event is CdnEvent {\n    return eventTypes.includes((event as CdnEvent).step)\n}",
                "startLine": 258,
                "endLine": 261,
                "references": {
                    "isCdnEvent": "@nav[webpm-client]/MainModule.isCdnEvent",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "isCssEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Type guard for  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.CssEventType\" semantic=\"type-alias\">CssEventType</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "isCssEvent",
            "navPath": "@nav[webpm-client]/MainModule.isCssEvent",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export function isCssEvent(event: CdnEvent): event is AllEvents[CssEventType]",
                "implementation": "export function isCssEvent(event: CdnEvent): event is AllEvents[CssEventType] {\n    if (['UnauthorizedEvent', 'UrlNotFoundEvent'].includes(event.step)) {\n        return (event as UnauthorizedEvent | UrlNotFoundEvent).url.endsWith(\n            '.css',\n        )\n    }\n    return cssEventTypes.includes(event.step as CssEventType)\n}",
                "startLine": 120,
                "endLine": 128,
                "references": {
                    "isCssEvent": "@nav[webpm-client]/MainModule.isCssEvent",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent",
                    "CssLoadingEvent": "@nav[webpm-client]/MainModule.CssLoadingEvent",
                    "CssParsedEvent": "@nav[webpm-client]/MainModule.CssParsedEvent",
                    "UnauthorizedEvent": "@nav[webpm-client]/MainModule.UnauthorizedEvent",
                    "UrlNotFoundEvent": "@nav[webpm-client]/MainModule.UrlNotFoundEvent"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "isErrorEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Type guard for  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.ErrorEventType\" semantic=\"type-alias\">ErrorEventType</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "isErrorEvent",
            "navPath": "@nav[webpm-client]/MainModule.isErrorEvent",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export function isErrorEvent(\n    event: CdnEvent,\n): event is AllEvents[ErrorEventType]",
                "implementation": "export function isErrorEvent(\n    event: CdnEvent,\n): event is AllEvents[ErrorEventType] {\n    return errorEventTypes.includes(event.step as ErrorEventType)\n}",
                "startLine": 222,
                "endLine": 227,
                "references": {
                    "isErrorEvent": "@nav[webpm-client]/MainModule.isErrorEvent",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent",
                    "CdnLoadingGraphErrorEvent": "@nav[webpm-client]/MainModule.CdnLoadingGraphErrorEvent",
                    "InstallErrorEvent": "@nav[webpm-client]/MainModule.InstallErrorEvent",
                    "UnauthorizedEvent": "@nav[webpm-client]/MainModule.UnauthorizedEvent",
                    "UrlNotFoundEvent": "@nav[webpm-client]/MainModule.UrlNotFoundEvent",
                    "ParseErrorEvent": "@nav[webpm-client]/MainModule.ParseErrorEvent",
                    "PyModuleErrorEvent": "@nav[webpm-client]/MainModule.PyModuleErrorEvent",
                    "BackendErrorEvent": "@nav[webpm-client]/MainModule.BackendErrorEvent"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "isEsmEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Type guard for  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.EsmEventType\" semantic=\"type-alias\">EsmEventType</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "isEsmEvent",
            "navPath": "@nav[webpm-client]/MainModule.isEsmEvent",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export function isEsmEvent(event: CdnEvent): event is AllEvents[EsmEventType]",
                "implementation": "export function isEsmEvent(event: CdnEvent): event is AllEvents[EsmEventType] {\n    if (['UnauthorizedEvent', 'UrlNotFoundEvent'].includes(event.step)) {\n        return (event as UnauthorizedEvent | UrlNotFoundEvent).url.endsWith(\n            '.js',\n        )\n    }\n    return esmEventTypes.includes(event.step as EsmEventType)\n}",
                "startLine": 96,
                "endLine": 104,
                "references": {
                    "isEsmEvent": "@nav[webpm-client]/MainModule.isEsmEvent",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent",
                    "StartEvent": "@nav[webpm-client]/MainModule.StartEvent",
                    "SourceLoadingEvent": "@nav[webpm-client]/MainModule.SourceLoadingEvent",
                    "SourceLoadedEvent": "@nav[webpm-client]/MainModule.SourceLoadedEvent",
                    "SourceParsedEvent": "@nav[webpm-client]/MainModule.SourceParsedEvent",
                    "UnauthorizedEvent": "@nav[webpm-client]/MainModule.UnauthorizedEvent",
                    "UrlNotFoundEvent": "@nav[webpm-client]/MainModule.UrlNotFoundEvent",
                    "ParseErrorEvent": "@nav[webpm-client]/MainModule.ParseErrorEvent"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "isLoadingGraphEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Type guard for  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.LoadingGraphEventType\" semantic=\"type-alias\">LoadingGraphEventType</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "isLoadingGraphEvent",
            "navPath": "@nav[webpm-client]/MainModule.isLoadingGraphEvent",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export function isLoadingGraphEvent(\n    event: CdnEvent,\n): event is AllEvents[LoadingGraphEventType]",
                "implementation": "export function isLoadingGraphEvent(\n    event: CdnEvent,\n): event is AllEvents[LoadingGraphEventType] {\n    return loadingGraphEventTypes.includes(event.step as LoadingGraphEventType)\n}",
                "startLine": 72,
                "endLine": 77,
                "references": {
                    "isLoadingGraphEvent": "@nav[webpm-client]/MainModule.isLoadingGraphEvent",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent",
                    "CdnLoadingGraphQueryEvent": "@nav[webpm-client]/MainModule.CdnLoadingGraphQueryEvent",
                    "CdnLoadingGraphResolvedEvent": "@nav[webpm-client]/MainModule.CdnLoadingGraphResolvedEvent",
                    "CdnLoadingGraphErrorEvent": "@nav[webpm-client]/MainModule.CdnLoadingGraphErrorEvent"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "isPyEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Type guard for  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.PyEventType\" semantic=\"type-alias\">PyEventType</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "isPyEvent",
            "navPath": "@nav[webpm-client]/MainModule.isPyEvent",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export function isPyEvent(event: CdnEvent): event is AllEvents[PyEventType]",
                "implementation": "export function isPyEvent(event: CdnEvent): event is AllEvents[PyEventType] {\n    return pyEventTypes.includes(event.step as PyEventType)\n}",
                "startLine": 152,
                "endLine": 155,
                "references": {
                    "isPyEvent": "@nav[webpm-client]/MainModule.isPyEvent",
                    "CdnEvent": "@nav[webpm-client]/MainModule.CdnEvent",
                    "FetchPyRuntimeEvent": "@nav[webpm-client]/MainModule.FetchPyRuntimeEvent",
                    "FetchedPyRuntimeEvent": "@nav[webpm-client]/MainModule.FetchedPyRuntimeEvent",
                    "StartPyRuntimeEvent": "@nav[webpm-client]/MainModule.StartPyRuntimeEvent",
                    "PyRuntimeReadyEvent": "@nav[webpm-client]/MainModule.PyRuntimeReadyEvent",
                    "StartPyEnvironmentInstallEvent": "@nav[webpm-client]/MainModule.StartPyEnvironmentInstallEvent",
                    "InstallPyModuleEvent": "@nav[webpm-client]/MainModule.InstallPyModuleEvent",
                    "PyModuleLoadedEvent": "@nav[webpm-client]/MainModule.PyModuleLoadedEvent",
                    "PyModuleErrorEvent": "@nav[webpm-client]/MainModule.PyModuleErrorEvent",
                    "PyEnvironmentReadyEvent": "@nav[webpm-client]/MainModule.PyEnvironmentReadyEvent",
                    "PyEnvironmentErrorEvent": "@nav[webpm-client]/MainModule.PyEnvironmentErrorEvent"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "parseResourceId",
            "documentation": {
                "sections": [
                    {
                        "content": "Parse a resource id in the form  `{libraryName}#{version}~{rest-of-path}`  where:\n-    libraryName is the name of the library\n-    version is the target version\n-    rest-of-path is the partial url from the package's directory to the target CSS",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **resourceId**: resource id in the form  `{libraryName}#{version}~{rest-of-path}`",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "parseResourceId",
            "navPath": "@nav[webpm-client]/MainModule.parseResourceId",
            "code": {
                "filePath": "src/lib/utils.ts",
                "declaration": "export function parseResourceId(resourceId: string): {\n    name: string\n    version: string\n    path: string\n    assetId: string\n    url: string\n}",
                "implementation": "export function parseResourceId(resourceId: string): {\n    name: string\n    version: string\n    path: string\n    assetId: string\n    url: string\n} {\n    const name = resourceId.split('#')[0]\n    const version = resourceId.split('#')[1].split('~')[0]\n    const path = resourceId.split('#')[1].split('~')[1]\n    const assetId = getAssetId(name)\n    const url = `${getUrlBase(name, version)}/${path}`\n    return { name, version, path, assetId, url }\n}",
                "startLine": 108,
                "endLine": 122,
                "references": {
                    "parseResourceId": "@nav[webpm-client]/MainModule.parseResourceId"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "queryLoadingGraph",
            "documentation": {
                "sections": [
                    {
                        "content": "Query loading graph.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **inputs**: Refer to the documentation of  <mkapi-api-link nav=\"@nav[webpm-client]/MainModule.QueryLoadingGraphInputs\" semantic=\"interface\">QueryLoadingGraphInputs</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "The loading graph response from the server.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "queryLoadingGraph",
            "navPath": "@nav[webpm-client]/MainModule.queryLoadingGraph",
            "code": {
                "filePath": "src/lib/client.ts",
                "declaration": "export function queryLoadingGraph(\n    inputs: QueryLoadingGraphInputs,\n): Promise<LoadingGraph>",
                "implementation": "export function queryLoadingGraph(\n    inputs: QueryLoadingGraphInputs,\n): Promise<LoadingGraph> {\n    return new Client().queryLoadingGraph(inputs)\n}",
                "startLine": 100,
                "endLine": 105,
                "references": {
                    "queryLoadingGraph": "@nav[webpm-client]/MainModule.queryLoadingGraph",
                    "QueryLoadingGraphInputs": "@nav[webpm-client]/MainModule.QueryLoadingGraphInputs",
                    "LoadingGraph": "@nav[webpm-client]/MainModule.LoadingGraph"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "resolveUrlWithFP",
            "documentation": {
                "sections": [
                    {
                        "content": "Resolves the full URL for a package asset, optionally appending a fingerprint\nquery parameter if a lock entry exists for the specified package and version.\n\nThis function is typically used to construct browser-safe URLs for\nfingerprinted (cache-busted) JavaScript bundles, ensuring that republished\nversions can bypass browser caching when necessary.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **params**: An object containing:\n*  **package**: The name of the library or package.\n*  **path**: The relative path to the asset within the package.\n*  **version**: The specific version of the package.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "A URL string combining the base URL, asset path, and optionally\na  `?fp=<fingerprint>`  query parameter if a matching fingerprint is found.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "resolveUrlWithFP",
            "navPath": "@nav[webpm-client]/MainModule.resolveUrlWithFP",
            "code": {
                "filePath": "src/lib/state.ts",
                "declaration": "export function resolveUrlWithFP(params: {\n    package: LibraryName\n    version: string\n    path: string\n})",
                "implementation": "export function resolveUrlWithFP(params: {\n    package: LibraryName\n    version: string\n    path: string\n}) {\n    const urlBase = `${getUrlBase(params.package, params.version)}/${params.path}`\n    const lock = StateImplementation.locks.find(\n        ({ name, version }) =>\n            name === params.package && version === params.version,\n    )\n    if (!lock) {\n        return urlBase\n    }\n    return `${urlBase}?fp=${lock.fingerprint}`\n}",
                "startLine": 37,
                "endLine": 52,
                "references": {
                    "resolveUrlWithFP": "@nav[webpm-client]/MainModule.resolveUrlWithFP"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        }
    ],
    "files": [
        {
            "name": "index-types.ts",
            "path": "src/lib/test-utils/index-types.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "index-types.ts",
            "path": "src/lib/workers-pool/index-types.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "events.models.ts",
            "path": "src/lib/events.models.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "errors.models.ts",
            "path": "src/lib/errors.models.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "loading-screen.view.ts",
            "path": "src/lib/loading-screen.view.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "state.ts",
            "path": "src/lib/state.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "backends.ts",
            "path": "src/lib/backends.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "inputs.models.ts",
            "path": "src/lib/inputs.models.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "backend-configuration.ts",
            "path": "src/lib/backend-configuration.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "frontend-configuration.ts",
            "path": "src/lib/frontend-configuration.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "utils.ts",
            "path": "src/lib/utils.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "workers-pool.installer.ts",
            "path": "src/lib/workers-pool.installer.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "views.installer.ts",
            "path": "src/lib/views.installer.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "index.ts",
            "path": "src/lib/index.ts",
            "documentation": {
                "sections": []
            }
        },
        {
            "name": "client.ts",
            "path": "src/lib/client.ts",
            "documentation": {
                "sections": []
            }
        }
    ],
    "children": [
        {
            "name": "TestUtilsTypes",
            "semantic": {
                "role": "module",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "webpm-client/MainModule.TestUtilsTypes",
            "navPath": "@nav[webpm-client]/MainModule/TestUtilsTypes",
            "isLeaf": true
        },
        {
            "name": "WorkersPoolTypes",
            "semantic": {
                "role": "module",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "webpm-client/MainModule.WorkersPoolTypes",
            "navPath": "@nav[webpm-client]/MainModule/WorkersPoolTypes",
            "isLeaf": true
        }
    ],
    "semantic": {
        "role": "module",
        "labels": [],
        "attributes": {},
        "relations": {}
    }
}
