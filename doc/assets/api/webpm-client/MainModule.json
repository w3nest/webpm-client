{
    "name": "MainModule",
    "documentation": {
        "sections": [
            {
                "content": "The main module of this library is responsible for resource installation within the main thread of the browser,\nusing the  <mkapi-api-link nav=\"@nav/api/MainModule.install\" semantic=\"function\">install</mkapi-api-link>  function.",
                "contentType": "markdown",
                "semantic": {
                    "role": "",
                    "labels": [],
                    "attributes": {},
                    "relations": {}
                }
            }
        ]
    },
    "path": "webpm-client/MainModule",
    "navPath": "@nav/api/",
    "attributes": [
        {
            "name": "backendEventTypes",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "backendEventTypes",
            "navPath": "@nav/api/MainModule.backendEventTypes",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "backendEventTypes = [\n    'DownloadBackendEvent',\n    'InstallBackendEvent',\n    'StartBackendEvent',\n    'BackendErrorEvent',\n] as const",
                "implementation": "",
                "startLine": 152,
                "endLine": 153,
                "references": {
                    "backendEventTypes": "@nav/api/MainModule.backendEventTypes"
                }
            }
        },
        {
            "name": "cssEventTypes",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "cssEventTypes",
            "navPath": "@nav/api/MainModule.cssEventTypes",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "cssEventTypes = [\n    'CssLoadingEvent',\n    'CssParsedEvent',\n    'UnauthorizedEvent',\n    'UrlNotFoundEvent',\n] as const",
                "implementation": "",
                "startLine": 100,
                "endLine": 101,
                "references": {
                    "cssEventTypes": "@nav/api/MainModule.cssEventTypes"
                }
            }
        },
        {
            "name": "esmEventTypes",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "esmEventTypes",
            "navPath": "@nav/api/MainModule.esmEventTypes",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "esmEventTypes = [\n    'StartEvent',\n    'SourceLoadingEvent',\n    'SourceLoadedEvent',\n    'SourceParsedEvent',\n    'UnauthorizedEvent',\n    'UrlNotFoundEvent',\n    'ParseErrorEvent',\n] as const",
                "implementation": "",
                "startLine": 73,
                "endLine": 74,
                "references": {
                    "esmEventTypes": "@nav/api/MainModule.esmEventTypes"
                }
            }
        },
        {
            "name": "eventTypes",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "eventTypes",
            "navPath": "@nav/api/MainModule.eventTypes",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "eventTypes = [\n    'CdnMessageEvent',\n    'InstallDoneEvent',\n    'InstallErrorEvent',\n    'ConsoleEvent',\n    ...loadingGraphEventTypes,\n    ...cssEventTypes,\n    ...esmEventTypes,\n    ...pyEventTypes,\n    ...backendEventTypes,\n] as const",
                "implementation": "",
                "startLine": 176,
                "endLine": 177,
                "references": {
                    "eventTypes": "@nav/api/MainModule.eventTypes"
                }
            }
        },
        {
            "name": "loadingGraphEventTypes",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "loadingGraphEventTypes",
            "navPath": "@nav/api/MainModule.loadingGraphEventTypes",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "loadingGraphEventTypes = [\n    'CdnLoadingGraphQueryEvent',\n    'CdnLoadingGraphResolvedEvent',\n    'CdnLoadingGraphErrorEvent',\n] as const",
                "implementation": "",
                "startLine": 52,
                "endLine": 53,
                "references": {
                    "loadingGraphEventTypes": "@nav/api/MainModule.loadingGraphEventTypes"
                }
            }
        },
        {
            "name": "pyEventTypes",
            "semantic": {
                "role": "global",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "documentation": {
                "sections": [
                    {
                        "content": "",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "pyEventTypes",
            "navPath": "@nav/api/MainModule.pyEventTypes",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "pyEventTypes = [\n    'FetchPyRuntimeEvent',\n    'FetchedPyRuntimeEvent',\n    'StartPyRuntimeEvent',\n    'PyRuntimeReadyEvent',\n    'StartPyEnvironmentInstallEvent',\n    'InstallPyModuleEvent',\n    'PyModuleLoadedEvent',\n    'PyModuleErrorEvent',\n    'PyEnvironmentReadyEvent',\n    'PyEnvironmentErrorEvent',\n] as const",
                "implementation": "",
                "startLine": 124,
                "endLine": 125,
                "references": {
                    "pyEventTypes": "@nav/api/MainModule.pyEventTypes"
                }
            }
        }
    ],
    "types": [
        {
            "name": "BackendErrorEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Events emitted when a backend error has been caught.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BackendErrorEvent",
            "navPath": "@nav/api/MainModule.BackendErrorEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.id",
                    "navPath": "@nav/api/MainModule.BackendEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 481,
                        "endLine": 482,
                        "references": {
                            "id": "@nav/api/MainModule.BackendEvent.id",
                            "CdnEvent.id": "@nav/api/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.status",
                    "navPath": "@nav/api/MainModule.BackendEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status: 'Pending' | 'Failed'",
                        "implementation": "",
                        "startLine": 483,
                        "endLine": 484,
                        "references": {
                            "status": "@nav/api/MainModule.BackendEvent.status",
                            "CdnEvent.status": "@nav/api/MainModule.CdnEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.step",
                    "navPath": "@nav/api/MainModule.BackendEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step:\n        | 'DownloadBackendEvent'\n        | 'InstallBackendEvent'\n        | 'StartBackendEvent'\n        | 'BackendErrorEvent'",
                        "implementation": "",
                        "startLine": 484,
                        "endLine": 485,
                        "references": {
                            "step": "@nav/api/MainModule.BackendEvent.step",
                            "CdnEvent.step": "@nav/api/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.text",
                    "navPath": "@nav/api/MainModule.BackendEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 482,
                        "endLine": 483,
                        "references": {
                            "text": "@nav/api/MainModule.BackendEvent.text",
                            "CdnEvent.text": "@nav/api/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class BackendErrorEvent extends BackendEvent",
                "implementation": "export class BackendErrorEvent extends BackendEvent {\n    public readonly detail: string\n    constructor(params: {\n        name: string\n        version: string\n        detail: string\n        event: string\n    }) {\n        super(\n            'BackendErrorEvent',\n            params.name,\n            params.version,\n            params.detail,\n            params.event,\n        )\n        this.detail = params.detail\n    }\n}",
                "startLine": 573,
                "endLine": 591,
                "references": {
                    "BackendErrorEvent": "@nav/api/MainModule.BackendErrorEvent",
                    "BackendEvent.constructor": "@nav/api/MainModule.BackendEvent.constructor",
                    "BackendEvent.event": "@nav/api/MainModule.BackendEvent.event",
                    "BackendEvent.id": "@nav/api/MainModule.BackendEvent.id",
                    "BackendEvent.name": "@nav/api/MainModule.BackendEvent.name",
                    "BackendEvent.status": "@nav/api/MainModule.BackendEvent.status",
                    "BackendEvent.step": "@nav/api/MainModule.BackendEvent.step",
                    "BackendEvent.text": "@nav/api/MainModule.BackendEvent.text",
                    "BackendEvent.title": "@nav/api/MainModule.BackendEvent.title",
                    "BackendEvent.version": "@nav/api/MainModule.BackendEvent.version",
                    "BackendEvent": "@nav/api/MainModule.BackendEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "BackendEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Base class for events related to backend.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BackendEvent",
            "navPath": "@nav/api/MainModule.BackendEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.id",
                    "navPath": "@nav/api/MainModule.BackendEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 481,
                        "endLine": 482,
                        "references": {
                            "id": "@nav/api/MainModule.BackendEvent.id",
                            "CdnEvent.id": "@nav/api/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.status",
                    "navPath": "@nav/api/MainModule.BackendEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status: 'Pending' | 'Failed'",
                        "implementation": "",
                        "startLine": 483,
                        "endLine": 484,
                        "references": {
                            "status": "@nav/api/MainModule.BackendEvent.status",
                            "CdnEvent.status": "@nav/api/MainModule.CdnEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.step",
                    "navPath": "@nav/api/MainModule.BackendEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step:\n        | 'DownloadBackendEvent'\n        | 'InstallBackendEvent'\n        | 'StartBackendEvent'\n        | 'BackendErrorEvent'",
                        "implementation": "",
                        "startLine": 484,
                        "endLine": 485,
                        "references": {
                            "step": "@nav/api/MainModule.BackendEvent.step",
                            "CdnEvent.step": "@nav/api/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.text",
                    "navPath": "@nav/api/MainModule.BackendEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 482,
                        "endLine": 483,
                        "references": {
                            "text": "@nav/api/MainModule.BackendEvent.text",
                            "CdnEvent.text": "@nav/api/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class BackendEvent implements CdnEvent",
                "implementation": "export class BackendEvent implements CdnEvent {\n    public readonly id: string\n    public readonly text: string\n    public readonly status: 'Pending' | 'Failed'\n    public readonly step:\n        | 'DownloadBackendEvent'\n        | 'InstallBackendEvent'\n        | 'StartBackendEvent'\n        | 'BackendErrorEvent'\n    public readonly name: string\n    public readonly version: string\n    public readonly title: string\n    public readonly event: string\n\n    constructor(\n        step:\n            | 'DownloadBackendEvent'\n            | 'InstallBackendEvent'\n            | 'StartBackendEvent'\n            | 'BackendErrorEvent',\n        name: string,\n        version: string,\n        title: string,\n        event: string,\n    ) {\n        this.id = `${name}_${version.replace('.', '-')}`\n        this.text = `${name}#${version}: ${title}`\n        this.status = event === 'failed' ? 'Failed' : 'Pending'\n        Object.assign(this, { step, name, version, title, event })\n    }\n}",
                "startLine": 480,
                "endLine": 511,
                "references": {
                    "BackendEvent": "@nav/api/MainModule.BackendEvent",
                    "CdnEvent.id": "@nav/api/MainModule.CdnEvent.id",
                    "CdnEvent.status": "@nav/api/MainModule.CdnEvent.status",
                    "CdnEvent.step": "@nav/api/MainModule.CdnEvent.step",
                    "CdnEvent.text": "@nav/api/MainModule.CdnEvent.text",
                    "DownloadBackendEvent": "@nav/api/MainModule.DownloadBackendEvent",
                    "InstallBackendEvent": "@nav/api/MainModule.InstallBackendEvent",
                    "StartBackendEvent": "@nav/api/MainModule.StartBackendEvent",
                    "BackendErrorEvent": "@nav/api/MainModule.BackendErrorEvent",
                    "CdnEvent": "@nav/api/MainModule.CdnEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "BackendException",
            "documentation": {
                "sections": [
                    {
                        "content": "Errors related to backends installation (download, install or start).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BackendException",
            "navPath": "@nav/api/MainModule.BackendException",
            "attributes": [
                {
                    "name": "prepareStackTrace",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Optional override for formatting stack traces",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnError.prepareStackTrace",
                    "navPath": "@nav/api/MainModule.CdnError.prepareStackTrace",
                    "code": {
                        "filePath": "",
                        "declaration": "",
                        "implementation": "",
                        "startLine": 1,
                        "endLine": 2,
                        "references": {}
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/errors.models.ts",
                "declaration": "export class BackendException extends CdnError",
                "implementation": "export class BackendException extends CdnError {\n    static exceptionType = 'DownloadBackendFailed'\n    public readonly name: string\n    public readonly version: string\n    public readonly detail: string\n    constructor(params: { name: string; version: string; detail: string }) {\n        super()\n        Object.assign(this, params)\n    }\n}",
                "startLine": 174,
                "endLine": 184,
                "references": {
                    "BackendException": "@nav/api/MainModule.BackendException",
                    "CdnError.constructor": "@nav/api/MainModule.CdnError.constructor",
                    "CdnError.message": "@nav/api/MainModule.CdnError.message",
                    "CdnError.name": "@nav/api/MainModule.CdnError.name",
                    "CdnError.stack": "@nav/api/MainModule.CdnError.stack",
                    "CdnError.exceptionType": "@nav/api/MainModule.CdnError.exceptionType",
                    "CdnError.prepareStackTrace": "@nav/api/MainModule.CdnError.prepareStackTrace",
                    "CdnError.stackTraceLimit": "@nav/api/MainModule.CdnError.stackTraceLimit",
                    "CdnError.captureStackTrace": "@nav/api/MainModule.CdnError.captureStackTrace",
                    "CdnError": "@nav/api/MainModule.CdnError"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CdnError",
            "documentation": {
                "sections": [
                    {
                        "content": "Base class of Errors.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CdnError",
            "navPath": "@nav/api/MainModule.CdnError",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/errors.models.ts",
                "declaration": "export class CdnError extends Error",
                "implementation": "export class CdnError extends Error {\n    static exceptionType = 'CdnError'\n}",
                "startLine": 6,
                "endLine": 9,
                "references": {
                    "CdnError": "@nav/api/MainModule.CdnError",
                    "LocalYouwolRequired": "@nav/api/MainModule.LocalYouwolRequired",
                    "LoadingGraphError": "@nav/api/MainModule.LoadingGraphError",
                    "Unauthorized": "@nav/api/MainModule.Unauthorized",
                    "UrlNotFound": "@nav/api/MainModule.UrlNotFound",
                    "FetchErrors": "@nav/api/MainModule.FetchErrors",
                    "SourceParsingFailed": "@nav/api/MainModule.SourceParsingFailed",
                    "BackendException": "@nav/api/MainModule.BackendException"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CdnLoadingGraphErrorEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when an  <mkapi-api-link nav=\"@nav/api/MainModule.LoadingGraphError\" semantic=\"class\">LoadingGraphError</mkapi-api-link>  error occurred.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CdnLoadingGraphErrorEvent",
            "navPath": "@nav/api/MainModule.CdnLoadingGraphErrorEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphErrorEvent.id",
                    "navPath": "@nav/api/MainModule.CdnLoadingGraphErrorEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id = 'loading-graph'",
                        "implementation": "",
                        "startLine": 450,
                        "endLine": 451,
                        "references": {
                            "id": "@nav/api/MainModule.CdnLoadingGraphErrorEvent.id",
                            "CdnEvent.id": "@nav/api/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphErrorEvent.status",
                    "navPath": "@nav/api/MainModule.CdnLoadingGraphErrorEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Failed'",
                        "implementation": "",
                        "startLine": 453,
                        "endLine": 454,
                        "references": {
                            "status": "@nav/api/MainModule.CdnLoadingGraphErrorEvent.status",
                            "CdnEvent.status": "@nav/api/MainModule.CdnEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphErrorEvent.step",
                    "navPath": "@nav/api/MainModule.CdnLoadingGraphErrorEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'CdnLoadingGraphErrorEvent'",
                        "implementation": "",
                        "startLine": 451,
                        "endLine": 452,
                        "references": {
                            "step": "@nav/api/MainModule.CdnLoadingGraphErrorEvent.step",
                            "CdnEvent.step": "@nav/api/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphErrorEvent.text",
                    "navPath": "@nav/api/MainModule.CdnLoadingGraphErrorEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text = 'Failed to retrieve the loading graph'",
                        "implementation": "",
                        "startLine": 452,
                        "endLine": 453,
                        "references": {
                            "text": "@nav/api/MainModule.CdnLoadingGraphErrorEvent.text",
                            "CdnEvent.text": "@nav/api/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class CdnLoadingGraphErrorEvent implements CdnEvent",
                "implementation": "export class CdnLoadingGraphErrorEvent implements CdnEvent {\n    public readonly id = 'loading-graph'\n    public readonly step = 'CdnLoadingGraphErrorEvent'\n    public readonly text = 'Failed to retrieve the loading graph'\n    public readonly status = 'Failed'\n    constructor(public readonly error: LoadingGraphError) {}\n}",
                "startLine": 449,
                "endLine": 456,
                "references": {
                    "CdnLoadingGraphErrorEvent": "@nav/api/MainModule.CdnLoadingGraphErrorEvent",
                    "LoadingGraphError": "@nav/api/MainModule.LoadingGraphError",
                    "CdnEvent.id": "@nav/api/MainModule.CdnEvent.id",
                    "CdnEvent.status": "@nav/api/MainModule.CdnEvent.status",
                    "CdnEvent.step": "@nav/api/MainModule.CdnEvent.step",
                    "CdnEvent.text": "@nav/api/MainModule.CdnEvent.text",
                    "CdnEvent": "@nav/api/MainModule.CdnEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CdnLoadingGraphQueryEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when querying the loading graph occurred.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CdnLoadingGraphQueryEvent",
            "navPath": "@nav/api/MainModule.CdnLoadingGraphQueryEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphQueryEvent.id",
                    "navPath": "@nav/api/MainModule.CdnLoadingGraphQueryEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id = 'loading-graph-query'",
                        "implementation": "",
                        "startLine": 430,
                        "endLine": 431,
                        "references": {
                            "id": "@nav/api/MainModule.CdnLoadingGraphQueryEvent.id",
                            "CdnEvent.id": "@nav/api/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphQueryEvent.status",
                    "navPath": "@nav/api/MainModule.CdnLoadingGraphQueryEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 433,
                        "endLine": 434,
                        "references": {
                            "status": "@nav/api/MainModule.CdnLoadingGraphQueryEvent.status",
                            "CdnEvent.status": "@nav/api/MainModule.CdnEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphQueryEvent.step",
                    "navPath": "@nav/api/MainModule.CdnLoadingGraphQueryEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'CdnLoadingGraphQueryEvent'",
                        "implementation": "",
                        "startLine": 431,
                        "endLine": 432,
                        "references": {
                            "step": "@nav/api/MainModule.CdnLoadingGraphQueryEvent.step",
                            "CdnEvent.step": "@nav/api/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphQueryEvent.text",
                    "navPath": "@nav/api/MainModule.CdnLoadingGraphQueryEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text = 'Retrieve the loading graph'",
                        "implementation": "",
                        "startLine": 432,
                        "endLine": 433,
                        "references": {
                            "text": "@nav/api/MainModule.CdnLoadingGraphQueryEvent.text",
                            "CdnEvent.text": "@nav/api/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class CdnLoadingGraphQueryEvent implements CdnEvent",
                "implementation": "export class CdnLoadingGraphQueryEvent implements CdnEvent {\n    public readonly id = 'loading-graph-query'\n    public readonly step = 'CdnLoadingGraphQueryEvent'\n    public readonly text = 'Retrieve the loading graph'\n    public readonly status = 'Pending'\n}",
                "startLine": 429,
                "endLine": 435,
                "references": {
                    "CdnLoadingGraphQueryEvent": "@nav/api/MainModule.CdnLoadingGraphQueryEvent",
                    "CdnEvent.id": "@nav/api/MainModule.CdnEvent.id",
                    "CdnEvent.status": "@nav/api/MainModule.CdnEvent.status",
                    "CdnEvent.step": "@nav/api/MainModule.CdnEvent.step",
                    "CdnEvent.text": "@nav/api/MainModule.CdnEvent.text",
                    "CdnEvent": "@nav/api/MainModule.CdnEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CdnLoadingGraphResolvedEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when querying the loading graph occurred.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CdnLoadingGraphResolvedEvent",
            "navPath": "@nav/api/MainModule.CdnLoadingGraphResolvedEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphResolvedEvent.id",
                    "navPath": "@nav/api/MainModule.CdnLoadingGraphResolvedEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id = 'loading-graph-resolved'",
                        "implementation": "",
                        "startLine": 440,
                        "endLine": 441,
                        "references": {
                            "id": "@nav/api/MainModule.CdnLoadingGraphResolvedEvent.id",
                            "CdnEvent.id": "@nav/api/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphResolvedEvent.status",
                    "navPath": "@nav/api/MainModule.CdnLoadingGraphResolvedEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 443,
                        "endLine": 444,
                        "references": {
                            "status": "@nav/api/MainModule.CdnLoadingGraphResolvedEvent.status",
                            "CdnEvent.status": "@nav/api/MainModule.CdnEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphResolvedEvent.step",
                    "navPath": "@nav/api/MainModule.CdnLoadingGraphResolvedEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'CdnLoadingGraphResolvedEvent'",
                        "implementation": "",
                        "startLine": 441,
                        "endLine": 442,
                        "references": {
                            "step": "@nav/api/MainModule.CdnLoadingGraphResolvedEvent.step",
                            "CdnEvent.step": "@nav/api/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnLoadingGraphResolvedEvent.text",
                    "navPath": "@nav/api/MainModule.CdnLoadingGraphResolvedEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text = 'Loading graph resolved'",
                        "implementation": "",
                        "startLine": 442,
                        "endLine": 443,
                        "references": {
                            "text": "@nav/api/MainModule.CdnLoadingGraphResolvedEvent.text",
                            "CdnEvent.text": "@nav/api/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class CdnLoadingGraphResolvedEvent implements CdnEvent",
                "implementation": "export class CdnLoadingGraphResolvedEvent implements CdnEvent {\n    public readonly id = 'loading-graph-resolved'\n    public readonly step = 'CdnLoadingGraphResolvedEvent'\n    public readonly text = 'Loading graph resolved'\n    public readonly status = 'Pending'\n}",
                "startLine": 439,
                "endLine": 445,
                "references": {
                    "CdnLoadingGraphResolvedEvent": "@nav/api/MainModule.CdnLoadingGraphResolvedEvent",
                    "CdnEvent.id": "@nav/api/MainModule.CdnEvent.id",
                    "CdnEvent.status": "@nav/api/MainModule.CdnEvent.status",
                    "CdnEvent.step": "@nav/api/MainModule.CdnEvent.step",
                    "CdnEvent.text": "@nav/api/MainModule.CdnEvent.text",
                    "CdnEvent": "@nav/api/MainModule.CdnEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CdnMessageEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Generic custom CDN event.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CdnMessageEvent",
            "navPath": "@nav/api/MainModule.CdnMessageEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnMessageEvent.id",
                    "navPath": "@nav/api/MainModule.CdnMessageEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 232,
                        "endLine": 233,
                        "references": {
                            "id": "@nav/api/MainModule.CdnMessageEvent.id",
                            "CdnEvent.id": "@nav/api/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnMessageEvent.status",
                    "navPath": "@nav/api/MainModule.CdnMessageEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status: EventStatus = 'None'",
                        "implementation": "",
                        "startLine": 234,
                        "endLine": 235,
                        "references": {
                            "status": "@nav/api/MainModule.CdnMessageEvent.status",
                            "EventStatus": "@nav/api/MainModule.EventStatus",
                            "CdnEvent.status": "@nav/api/MainModule.CdnEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnMessageEvent.step",
                    "navPath": "@nav/api/MainModule.CdnMessageEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'CdnMessageEvent'",
                        "implementation": "",
                        "startLine": 231,
                        "endLine": 232,
                        "references": {
                            "step": "@nav/api/MainModule.CdnMessageEvent.step",
                            "CdnEvent.step": "@nav/api/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnMessageEvent.text",
                    "navPath": "@nav/api/MainModule.CdnMessageEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 233,
                        "endLine": 234,
                        "references": {
                            "text": "@nav/api/MainModule.CdnMessageEvent.text",
                            "CdnEvent.text": "@nav/api/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class CdnMessageEvent implements CdnEvent",
                "implementation": "export class CdnMessageEvent implements CdnEvent {\n    public readonly step = 'CdnMessageEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status: EventStatus = 'None'\n    constructor(id: string, text: string, status: EventStatus = 'None') {\n        this.id = id\n        this.status = status\n        this.text = text\n    }\n}",
                "startLine": 230,
                "endLine": 241,
                "references": {
                    "CdnMessageEvent": "@nav/api/MainModule.CdnMessageEvent",
                    "EventStatus": "@nav/api/MainModule.EventStatus",
                    "CdnEvent.id": "@nav/api/MainModule.CdnEvent.id",
                    "CdnEvent.status": "@nav/api/MainModule.CdnEvent.status",
                    "CdnEvent.step": "@nav/api/MainModule.CdnEvent.step",
                    "CdnEvent.text": "@nav/api/MainModule.CdnEvent.text",
                    "CdnEvent": "@nav/api/MainModule.CdnEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CircularDependencies",
            "documentation": {
                "sections": [
                    {
                        "content": "Dependencies resolution while resolving a loading graph lead to a circular dependency problem.\nSee also  <mkapi-api-link nav=\"@nav/api/MainModule.CdnLoadingGraphErrorEvent\" semantic=\"class\">CdnLoadingGraphErrorEvent</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CircularDependencies",
            "navPath": "@nav/api/MainModule.CircularDependencies",
            "attributes": [
                {
                    "name": "prepareStackTrace",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Optional override for formatting stack traces",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingGraphError.prepareStackTrace",
                    "navPath": "@nav/api/MainModule.LoadingGraphError.prepareStackTrace",
                    "code": {
                        "filePath": "",
                        "declaration": "",
                        "implementation": "",
                        "startLine": 1,
                        "endLine": 2,
                        "references": {}
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/errors.models.ts",
                "declaration": "export class CircularDependencies extends LoadingGraphError",
                "implementation": "export class CircularDependencies extends LoadingGraphError {\n    static exceptionType = 'CircularDependencies'\n\n    constructor(\n        public readonly detail: {\n            context: string\n            packages: Record<string, { name: string; version: string }[]>\n        },\n    ) {\n        super()\n    }\n\n    static isInstance(resp: CdnError): resp is CircularDependencies {\n        return (\n            'exceptionType' in resp &&\n            resp.exceptionType === CircularDependencies.exceptionType\n        )\n    }\n}",
                "startLine": 149,
                "endLine": 168,
                "references": {
                    "CircularDependencies": "@nav/api/MainModule.CircularDependencies",
                    "LoadingGraphError.constructor": "@nav/api/MainModule.LoadingGraphError.constructor",
                    "LoadingGraphError.message": "@nav/api/MainModule.LoadingGraphError.message",
                    "LoadingGraphError.name": "@nav/api/MainModule.LoadingGraphError.name",
                    "LoadingGraphError.stack": "@nav/api/MainModule.LoadingGraphError.stack",
                    "LoadingGraphError.exceptionType": "@nav/api/MainModule.LoadingGraphError.exceptionType",
                    "LoadingGraphError.prepareStackTrace": "@nav/api/MainModule.LoadingGraphError.prepareStackTrace",
                    "LoadingGraphError.stackTraceLimit": "@nav/api/MainModule.LoadingGraphError.stackTraceLimit",
                    "LoadingGraphError.captureStackTrace": "@nav/api/MainModule.LoadingGraphError.captureStackTrace",
                    "CdnError": "@nav/api/MainModule.CdnError",
                    "LoadingGraphError": "@nav/api/MainModule.LoadingGraphError"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ConsoleEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "An event representing a log entry.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ConsoleEvent",
            "navPath": "@nav/api/MainModule.ConsoleEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ConsoleEvent.id",
                    "navPath": "@nav/api/MainModule.ConsoleEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 744,
                        "endLine": 745,
                        "references": {
                            "id": "@nav/api/MainModule.ConsoleEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ConsoleEvent.status",
                    "navPath": "@nav/api/MainModule.ConsoleEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 746,
                        "endLine": 747,
                        "references": {
                            "status": "@nav/api/MainModule.ConsoleEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ConsoleEvent.step",
                    "navPath": "@nav/api/MainModule.ConsoleEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'ConsoleEvent'",
                        "implementation": "",
                        "startLine": 745,
                        "endLine": 746,
                        "references": {
                            "step": "@nav/api/MainModule.ConsoleEvent.step"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class ConsoleEvent implements CdnPyEvent",
                "implementation": "export class ConsoleEvent implements CdnPyEvent {\n    public readonly id: string\n    public readonly step = 'ConsoleEvent'\n    public readonly status = 'Pending'\n    constructor(\n        public readonly level: 'Info' | 'Warning' | 'Error',\n        public readonly topic: Topic,\n        public readonly text: string,\n    ) {\n        this.id = String(Math.floor(Math.random() * 1e6))\n        if (level === 'Error') {\n            console.error(text)\n        }\n    }\n}",
                "startLine": 743,
                "endLine": 758,
                "references": {
                    "ConsoleEvent": "@nav/api/MainModule.ConsoleEvent",
                    "Topic": "@nav/api/MainModule.Topic",
                    "CdnPyEvent": "@nav/api/MainModule.CdnPyEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CssLoadingEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when starting to install a style sheet.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CssLoadingEvent",
            "navPath": "@nav/api/MainModule.CssLoadingEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssLoadingEvent.id",
                    "navPath": "@nav/api/MainModule.CssLoadingEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 336,
                        "endLine": 337,
                        "references": {
                            "id": "@nav/api/MainModule.CssLoadingEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssLoadingEvent.status",
                    "navPath": "@nav/api/MainModule.CssLoadingEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 338,
                        "endLine": 339,
                        "references": {
                            "status": "@nav/api/MainModule.CssLoadingEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssLoadingEvent.step",
                    "navPath": "@nav/api/MainModule.CssLoadingEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'CssLoadingEvent'",
                        "implementation": "",
                        "startLine": 335,
                        "endLine": 336,
                        "references": {
                            "step": "@nav/api/MainModule.CssLoadingEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssLoadingEvent.text",
                    "navPath": "@nav/api/MainModule.CssLoadingEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 337,
                        "endLine": 338,
                        "references": {
                            "text": "@nav/api/MainModule.CssLoadingEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class CssLoadingEvent implements CdnFetchEvent",
                "implementation": "export class CssLoadingEvent implements CdnFetchEvent {\n    public readonly step = 'CssLoadingEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Pending'\n    constructor(\n        public readonly targetName: string,\n        public readonly assetId: string,\n        public readonly url: string,\n        public readonly version: string,\n    ) {\n        this.id = targetName\n        this.text = `${targetName}: fetching over HTTP`\n    }\n}",
                "startLine": 334,
                "endLine": 349,
                "references": {
                    "CssLoadingEvent": "@nav/api/MainModule.CssLoadingEvent",
                    "CdnFetchEvent": "@nav/api/MainModule.CdnFetchEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CssParsedEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when a style sheet has been added to the document.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CssParsedEvent",
            "navPath": "@nav/api/MainModule.CssParsedEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssParsedEvent.id",
                    "navPath": "@nav/api/MainModule.CssParsedEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 355,
                        "endLine": 356,
                        "references": {
                            "id": "@nav/api/MainModule.CssParsedEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssParsedEvent.status",
                    "navPath": "@nav/api/MainModule.CssParsedEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Succeeded'",
                        "implementation": "",
                        "startLine": 357,
                        "endLine": 358,
                        "references": {
                            "status": "@nav/api/MainModule.CssParsedEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssParsedEvent.step",
                    "navPath": "@nav/api/MainModule.CssParsedEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'CssParsedEvent'",
                        "implementation": "",
                        "startLine": 354,
                        "endLine": 355,
                        "references": {
                            "step": "@nav/api/MainModule.CssParsedEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssParsedEvent.text",
                    "navPath": "@nav/api/MainModule.CssParsedEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 356,
                        "endLine": 357,
                        "references": {
                            "text": "@nav/api/MainModule.CssParsedEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class CssParsedEvent implements CdnFetchEvent",
                "implementation": "export class CssParsedEvent implements CdnFetchEvent {\n    public readonly step = 'CssParsedEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Succeeded'\n    constructor(\n        public readonly targetName: string,\n        public readonly assetId: string,\n        public readonly url: string,\n        public readonly version: string,\n    ) {\n        this.id = targetName\n        this.text = `${targetName}: module/script imported`\n    }\n}",
                "startLine": 353,
                "endLine": 368,
                "references": {
                    "CssParsedEvent": "@nav/api/MainModule.CssParsedEvent",
                    "CdnFetchEvent": "@nav/api/MainModule.CdnFetchEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "DefaultLoadingScreenOptions",
            "documentation": {
                "sections": [
                    {
                        "content": "Default values of  <mkapi-api-link nav=\"@nav/api/MainModule.LoadingScreenOptions\" semantic=\"interface\">LoadingScreenOptions</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DefaultLoadingScreenOptions",
            "navPath": "@nav/api/MainModule.DefaultLoadingScreenOptions",
            "attributes": [
                {
                    "name": "container",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Default  <mkapi-api-link nav=\"@nav/api/MainModule.LoadingScreenOptions.container\" semantic=\"attribute\">LoadingScreenOptions.container</mkapi-api-link>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DefaultLoadingScreenOptions.container",
                    "navPath": "@nav/api/MainModule.DefaultLoadingScreenOptions.container",
                    "code": {
                        "filePath": "src/lib/loader.view.ts",
                        "declaration": "public readonly container: HTMLElement",
                        "implementation": "",
                        "startLine": 71,
                        "endLine": 72,
                        "references": {
                            "container": "@nav/api/MainModule.DefaultLoadingScreenOptions.container",
                            "LoadingScreenOptions.container": "@nav/api/MainModule.LoadingScreenOptions.container"
                        }
                    }
                },
                {
                    "name": "fadingTimeout",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Default  <mkapi-api-link nav=\"@nav/api/MainModule.LoadingScreenOptions.fadingTimeout\" semantic=\"attribute\">LoadingScreenOptions.fadingTimeout</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DefaultLoadingScreenOptions.fadingTimeout",
                    "navPath": "@nav/api/MainModule.DefaultLoadingScreenOptions.fadingTimeout",
                    "code": {
                        "filePath": "src/lib/loader.view.ts",
                        "declaration": "public readonly fadingTimeout: number = 500",
                        "implementation": "",
                        "startLine": 66,
                        "endLine": 67,
                        "references": {
                            "fadingTimeout": "@nav/api/MainModule.DefaultLoadingScreenOptions.fadingTimeout",
                            "LoadingScreenOptions.fadingTimeout": "@nav/api/MainModule.LoadingScreenOptions.fadingTimeout"
                        }
                    }
                },
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Default  <mkapi-api-link nav=\"@nav/api/MainModule.LoadingScreenOptions.id\" semantic=\"attribute\">LoadingScreenOptions.id</mkapi-api-link>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DefaultLoadingScreenOptions.id",
                    "navPath": "@nav/api/MainModule.DefaultLoadingScreenOptions.id",
                    "code": {
                        "filePath": "src/lib/loader.view.ts",
                        "declaration": "public readonly id: string = 'loading-screen'",
                        "implementation": "",
                        "startLine": 56,
                        "endLine": 57,
                        "references": {
                            "id": "@nav/api/MainModule.DefaultLoadingScreenOptions.id",
                            "LoadingScreenOptions.id": "@nav/api/MainModule.LoadingScreenOptions.id"
                        }
                    }
                },
                {
                    "name": "logo",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Default  <mkapi-api-link nav=\"@nav/api/MainModule.LoadingScreenOptions.logo\" semantic=\"attribute\">LoadingScreenOptions.logo</mkapi-api-link> , see  <mkapi-api-link nav=\"@nav/api/MainModule.youwolSvgLogo\" semantic=\"function\">youwolSvgLogo</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DefaultLoadingScreenOptions.logo",
                    "navPath": "@nav/api/MainModule.DefaultLoadingScreenOptions.logo",
                    "code": {
                        "filePath": "src/lib/loader.view.ts",
                        "declaration": "public readonly logo: string = youwolSvgLogo()",
                        "implementation": "",
                        "startLine": 61,
                        "endLine": 62,
                        "references": {
                            "logo": "@nav/api/MainModule.DefaultLoadingScreenOptions.logo",
                            "LoadingScreenOptions.logo": "@nav/api/MainModule.LoadingScreenOptions.logo"
                        }
                    }
                },
                {
                    "name": "wrapperStyle",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Default  <mkapi-api-link nav=\"@nav/api/MainModule.LoadingScreenOptions.wrapperStyle\" semantic=\"attribute\">LoadingScreenOptions.wrapperStyle</mkapi-api-link> :\n ```\n{\n   position: 'absolute',\n   top: '0',\n   left: '0',\n   width: '100vw',\n   height: '100vh',\n   padding: 'inherit',\n   'font-weight': 'bolder'\n}\n```",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "DefaultLoadingScreenOptions.wrapperStyle",
                    "navPath": "@nav/api/MainModule.DefaultLoadingScreenOptions.wrapperStyle",
                    "code": {
                        "filePath": "src/lib/loader.view.ts",
                        "declaration": "public readonly wrapperStyle: Record<string, string> = {\n        position: 'absolute',\n        top: '0',\n        left: '0',\n        width: '100vw',\n        height: '100vh',\n        padding: 'inherit',\n        'font-weight': 'bolder',\n        'z-index': '10',\n    }",
                        "implementation": "",
                        "startLine": 87,
                        "endLine": 88,
                        "references": {
                            "wrapperStyle": "@nav/api/MainModule.DefaultLoadingScreenOptions.wrapperStyle",
                            "LoadingScreenOptions.wrapperStyle": "@nav/api/MainModule.LoadingScreenOptions.wrapperStyle"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/loader.view.ts",
                "declaration": "export class DefaultLoadingScreenOptions implements LoadingScreenOptions",
                "implementation": "export class DefaultLoadingScreenOptions implements LoadingScreenOptions {\n    /**\n     * Default {@link LoadingScreenOptions.id}\n     */\n    public readonly id: string = 'loading-screen'\n\n    /**\n     * Default {@link LoadingScreenOptions.logo}, see {@link youwolSvgLogo}.\n     */\n    public readonly logo: string = youwolSvgLogo()\n\n    /**\n     * Default {@link LoadingScreenOptions.fadingTimeout}.\n     */\n    public readonly fadingTimeout: number = 500\n\n    /**\n     * Default {@link LoadingScreenOptions.container}\n     */\n    public readonly container: HTMLElement\n\n    /**\n     * Default {@link LoadingScreenOptions.wrapperStyle}:\n     * ```\n     * {\n     *    position: 'absolute',\n     *    top: '0',\n     *    left: '0',\n     *    width: '100vw',\n     *    height: '100vh',\n     *    padding: 'inherit',\n     *    'font-weight': 'bolder'\n     * }\n     * ```\n     */\n    public readonly wrapperStyle: Record<string, string> = {\n        position: 'absolute',\n        top: '0',\n        left: '0',\n        width: '100vw',\n        height: '100vh',\n        padding: 'inherit',\n        'font-weight': 'bolder',\n        'z-index': '10',\n    }\n}",
                "startLine": 52,
                "endLine": 98,
                "references": {
                    "DefaultLoadingScreenOptions": "@nav/api/MainModule.DefaultLoadingScreenOptions",
                    "LoadingScreenOptions.container": "@nav/api/MainModule.LoadingScreenOptions.container",
                    "LoadingScreenOptions.fadingTimeout": "@nav/api/MainModule.LoadingScreenOptions.fadingTimeout",
                    "LoadingScreenOptions.id": "@nav/api/MainModule.LoadingScreenOptions.id",
                    "LoadingScreenOptions.logo": "@nav/api/MainModule.LoadingScreenOptions.logo",
                    "LoadingScreenOptions.wrapperStyle": "@nav/api/MainModule.LoadingScreenOptions.wrapperStyle",
                    "LoadingScreenOptions": "@nav/api/MainModule.LoadingScreenOptions"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "DependenciesError",
            "documentation": {
                "sections": [
                    {
                        "content": "Error occurred trying to resolve a direct or indirect dependency while resolving a loading graph.\nSee also  <mkapi-api-link nav=\"@nav/api/MainModule.CdnLoadingGraphErrorEvent\" semantic=\"class\">CdnLoadingGraphErrorEvent</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DependenciesError",
            "navPath": "@nav/api/MainModule.DependenciesError",
            "attributes": [
                {
                    "name": "prepareStackTrace",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Optional override for formatting stack traces",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingGraphError.prepareStackTrace",
                    "navPath": "@nav/api/MainModule.LoadingGraphError.prepareStackTrace",
                    "code": {
                        "filePath": "",
                        "declaration": "",
                        "implementation": "",
                        "startLine": 1,
                        "endLine": 2,
                        "references": {}
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/errors.models.ts",
                "declaration": "export class DependenciesError extends LoadingGraphError",
                "implementation": "export class DependenciesError extends LoadingGraphError {\n    static exceptionType = 'DependenciesError'\n\n    constructor(\n        public readonly detail: {\n            context: string\n            errors: {\n                query: string\n                fromPackage: { name: string; version: string }\n                detail: string\n            }[]\n        },\n    ) {\n        super()\n    }\n\n    static isInstance(resp: CdnError): resp is DependenciesError {\n        return (\n            'exceptionType' in resp &&\n            resp.exceptionType === DependenciesError.exceptionType\n        )\n    }\n}",
                "startLine": 119,
                "endLine": 142,
                "references": {
                    "DependenciesError": "@nav/api/MainModule.DependenciesError",
                    "LoadingGraphError.constructor": "@nav/api/MainModule.LoadingGraphError.constructor",
                    "LoadingGraphError.message": "@nav/api/MainModule.LoadingGraphError.message",
                    "LoadingGraphError.name": "@nav/api/MainModule.LoadingGraphError.name",
                    "LoadingGraphError.stack": "@nav/api/MainModule.LoadingGraphError.stack",
                    "LoadingGraphError.exceptionType": "@nav/api/MainModule.LoadingGraphError.exceptionType",
                    "LoadingGraphError.prepareStackTrace": "@nav/api/MainModule.LoadingGraphError.prepareStackTrace",
                    "LoadingGraphError.stackTraceLimit": "@nav/api/MainModule.LoadingGraphError.stackTraceLimit",
                    "LoadingGraphError.captureStackTrace": "@nav/api/MainModule.LoadingGraphError.captureStackTrace",
                    "CdnError": "@nav/api/MainModule.CdnError",
                    "LoadingGraphError": "@nav/api/MainModule.LoadingGraphError"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "DownloadBackendEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Events emitted when a backend is downloaded.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "DownloadBackendEvent",
            "navPath": "@nav/api/MainModule.DownloadBackendEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.id",
                    "navPath": "@nav/api/MainModule.BackendEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 481,
                        "endLine": 482,
                        "references": {
                            "id": "@nav/api/MainModule.BackendEvent.id",
                            "CdnEvent.id": "@nav/api/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.status",
                    "navPath": "@nav/api/MainModule.BackendEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status: 'Pending' | 'Failed'",
                        "implementation": "",
                        "startLine": 483,
                        "endLine": 484,
                        "references": {
                            "status": "@nav/api/MainModule.BackendEvent.status",
                            "CdnEvent.status": "@nav/api/MainModule.CdnEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.step",
                    "navPath": "@nav/api/MainModule.BackendEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step:\n        | 'DownloadBackendEvent'\n        | 'InstallBackendEvent'\n        | 'StartBackendEvent'\n        | 'BackendErrorEvent'",
                        "implementation": "",
                        "startLine": 484,
                        "endLine": 485,
                        "references": {
                            "step": "@nav/api/MainModule.BackendEvent.step",
                            "CdnEvent.step": "@nav/api/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.text",
                    "navPath": "@nav/api/MainModule.BackendEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 482,
                        "endLine": 483,
                        "references": {
                            "text": "@nav/api/MainModule.BackendEvent.text",
                            "CdnEvent.text": "@nav/api/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class DownloadBackendEvent extends BackendEvent",
                "implementation": "export class DownloadBackendEvent extends BackendEvent {\n    public readonly event: 'started' | 'succeeded' | 'failed'\n\n    constructor(params: {\n        name: string\n        version: string\n        event: 'started' | 'succeeded' | 'failed'\n    }) {\n        super(\n            'DownloadBackendEvent',\n            params.name,\n            params.version,\n            'downloading...',\n            params.event,\n        )\n    }\n}",
                "startLine": 515,
                "endLine": 532,
                "references": {
                    "DownloadBackendEvent": "@nav/api/MainModule.DownloadBackendEvent",
                    "BackendEvent.constructor": "@nav/api/MainModule.BackendEvent.constructor",
                    "BackendEvent.event": "@nav/api/MainModule.BackendEvent.event",
                    "BackendEvent.id": "@nav/api/MainModule.BackendEvent.id",
                    "BackendEvent.name": "@nav/api/MainModule.BackendEvent.name",
                    "BackendEvent.status": "@nav/api/MainModule.BackendEvent.status",
                    "BackendEvent.step": "@nav/api/MainModule.BackendEvent.step",
                    "BackendEvent.text": "@nav/api/MainModule.BackendEvent.text",
                    "BackendEvent.title": "@nav/api/MainModule.BackendEvent.title",
                    "BackendEvent.version": "@nav/api/MainModule.BackendEvent.version",
                    "BackendEvent": "@nav/api/MainModule.BackendEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "FetchedPyRuntimeEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when Pyodide runtime's installation failed.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "FetchedPyRuntimeEvent",
            "navPath": "@nav/api/MainModule.FetchedPyRuntimeEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FetchedPyRuntimeEvent.id",
                    "navPath": "@nav/api/MainModule.FetchedPyRuntimeEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 617,
                        "endLine": 618,
                        "references": {
                            "id": "@nav/api/MainModule.FetchedPyRuntimeEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FetchedPyRuntimeEvent.status",
                    "navPath": "@nav/api/MainModule.FetchedPyRuntimeEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Succeeded'",
                        "implementation": "",
                        "startLine": 619,
                        "endLine": 620,
                        "references": {
                            "status": "@nav/api/MainModule.FetchedPyRuntimeEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FetchedPyRuntimeEvent.step",
                    "navPath": "@nav/api/MainModule.FetchedPyRuntimeEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'FetchedPyRuntimeEvent'",
                        "implementation": "",
                        "startLine": 616,
                        "endLine": 617,
                        "references": {
                            "step": "@nav/api/MainModule.FetchedPyRuntimeEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FetchedPyRuntimeEvent.text",
                    "navPath": "@nav/api/MainModule.FetchedPyRuntimeEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 618,
                        "endLine": 619,
                        "references": {
                            "text": "@nav/api/MainModule.FetchedPyRuntimeEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class FetchedPyRuntimeEvent implements CdnPyEvent",
                "implementation": "export class FetchedPyRuntimeEvent implements CdnPyEvent {\n    public readonly step = 'FetchedPyRuntimeEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Succeeded'\n    constructor(\n        public readonly pyodideVersion: string,\n        public readonly url: string,\n    ) {\n        this.id = `fetch-pyodide-${pyodideVersion}`\n        this.text = `Fetch pyodide runtime`\n    }\n}",
                "startLine": 615,
                "endLine": 628,
                "references": {
                    "FetchedPyRuntimeEvent": "@nav/api/MainModule.FetchedPyRuntimeEvent",
                    "CdnPyEvent": "@nav/api/MainModule.CdnPyEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "FetchErrors",
            "documentation": {
                "sections": [
                    {
                        "content": "Error happening while fetching a source file.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "FetchErrors",
            "navPath": "@nav/api/MainModule.FetchErrors",
            "attributes": [
                {
                    "name": "prepareStackTrace",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Optional override for formatting stack traces",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnError.prepareStackTrace",
                    "navPath": "@nav/api/MainModule.CdnError.prepareStackTrace",
                    "code": {
                        "filePath": "",
                        "declaration": "",
                        "implementation": "",
                        "startLine": 1,
                        "endLine": 2,
                        "references": {}
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/errors.models.ts",
                "declaration": "export class FetchErrors extends CdnError",
                "implementation": "export class FetchErrors extends CdnError {\n    static exceptionType = 'FetchErrors'\n\n    constructor(public readonly detail: { errors }) {\n        super()\n    }\n\n    static isInstance(resp: CdnError): resp is FetchErrors {\n        return (\n            'exceptionType' in resp &&\n            resp.exceptionType === FetchErrors.exceptionType\n        )\n    }\n}",
                "startLine": 78,
                "endLine": 92,
                "references": {
                    "FetchErrors": "@nav/api/MainModule.FetchErrors",
                    "CdnError.constructor": "@nav/api/MainModule.CdnError.constructor",
                    "CdnError.message": "@nav/api/MainModule.CdnError.message",
                    "CdnError.name": "@nav/api/MainModule.CdnError.name",
                    "CdnError.stack": "@nav/api/MainModule.CdnError.stack",
                    "CdnError.exceptionType": "@nav/api/MainModule.CdnError.exceptionType",
                    "CdnError.prepareStackTrace": "@nav/api/MainModule.CdnError.prepareStackTrace",
                    "CdnError.stackTraceLimit": "@nav/api/MainModule.CdnError.stackTraceLimit",
                    "CdnError.captureStackTrace": "@nav/api/MainModule.CdnError.captureStackTrace",
                    "CdnError": "@nav/api/MainModule.CdnError"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "FetchPyRuntimeEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when starting to fetch Pyodide runtime.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "FetchPyRuntimeEvent",
            "navPath": "@nav/api/MainModule.FetchPyRuntimeEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FetchPyRuntimeEvent.id",
                    "navPath": "@nav/api/MainModule.FetchPyRuntimeEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 601,
                        "endLine": 602,
                        "references": {
                            "id": "@nav/api/MainModule.FetchPyRuntimeEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FetchPyRuntimeEvent.status",
                    "navPath": "@nav/api/MainModule.FetchPyRuntimeEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 603,
                        "endLine": 604,
                        "references": {
                            "status": "@nav/api/MainModule.FetchPyRuntimeEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FetchPyRuntimeEvent.step",
                    "navPath": "@nav/api/MainModule.FetchPyRuntimeEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'FetchPyRuntimeEvent'",
                        "implementation": "",
                        "startLine": 600,
                        "endLine": 601,
                        "references": {
                            "step": "@nav/api/MainModule.FetchPyRuntimeEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FetchPyRuntimeEvent.text",
                    "navPath": "@nav/api/MainModule.FetchPyRuntimeEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 602,
                        "endLine": 603,
                        "references": {
                            "text": "@nav/api/MainModule.FetchPyRuntimeEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class FetchPyRuntimeEvent implements CdnPyEvent",
                "implementation": "export class FetchPyRuntimeEvent implements CdnPyEvent {\n    public readonly step = 'FetchPyRuntimeEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Pending'\n    constructor(\n        public readonly pyodideVersion: string,\n        public readonly url: string,\n    ) {\n        this.id = `fetch-pyodide-${pyodideVersion}`\n        this.text = `Fetch pyodide runtime`\n    }\n}",
                "startLine": 599,
                "endLine": 612,
                "references": {
                    "FetchPyRuntimeEvent": "@nav/api/MainModule.FetchPyRuntimeEvent",
                    "CdnPyEvent": "@nav/api/MainModule.CdnPyEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "InstallBackendEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Events emitted when a backend is installed.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "InstallBackendEvent",
            "navPath": "@nav/api/MainModule.InstallBackendEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.id",
                    "navPath": "@nav/api/MainModule.BackendEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 481,
                        "endLine": 482,
                        "references": {
                            "id": "@nav/api/MainModule.BackendEvent.id",
                            "CdnEvent.id": "@nav/api/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.status",
                    "navPath": "@nav/api/MainModule.BackendEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status: 'Pending' | 'Failed'",
                        "implementation": "",
                        "startLine": 483,
                        "endLine": 484,
                        "references": {
                            "status": "@nav/api/MainModule.BackendEvent.status",
                            "CdnEvent.status": "@nav/api/MainModule.CdnEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.step",
                    "navPath": "@nav/api/MainModule.BackendEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step:\n        | 'DownloadBackendEvent'\n        | 'InstallBackendEvent'\n        | 'StartBackendEvent'\n        | 'BackendErrorEvent'",
                        "implementation": "",
                        "startLine": 484,
                        "endLine": 485,
                        "references": {
                            "step": "@nav/api/MainModule.BackendEvent.step",
                            "CdnEvent.step": "@nav/api/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.text",
                    "navPath": "@nav/api/MainModule.BackendEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 482,
                        "endLine": 483,
                        "references": {
                            "text": "@nav/api/MainModule.BackendEvent.text",
                            "CdnEvent.text": "@nav/api/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class InstallBackendEvent extends BackendEvent",
                "implementation": "export class InstallBackendEvent extends BackendEvent {\n    public readonly event: 'started' | 'succeeded' | 'failed'\n    constructor(params: {\n        name: string\n        version: string\n        event: 'started' | 'succeeded' | 'failed'\n    }) {\n        super(\n            'InstallBackendEvent',\n            params.name,\n            params.version,\n            'installing...',\n            params.event,\n        )\n    }\n}",
                "startLine": 535,
                "endLine": 551,
                "references": {
                    "InstallBackendEvent": "@nav/api/MainModule.InstallBackendEvent",
                    "BackendEvent.constructor": "@nav/api/MainModule.BackendEvent.constructor",
                    "BackendEvent.event": "@nav/api/MainModule.BackendEvent.event",
                    "BackendEvent.id": "@nav/api/MainModule.BackendEvent.id",
                    "BackendEvent.name": "@nav/api/MainModule.BackendEvent.name",
                    "BackendEvent.status": "@nav/api/MainModule.BackendEvent.status",
                    "BackendEvent.step": "@nav/api/MainModule.BackendEvent.step",
                    "BackendEvent.text": "@nav/api/MainModule.BackendEvent.text",
                    "BackendEvent.title": "@nav/api/MainModule.BackendEvent.title",
                    "BackendEvent.version": "@nav/api/MainModule.BackendEvent.version",
                    "BackendEvent": "@nav/api/MainModule.BackendEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "InstallDoneEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when an installation is done ( <mkapi-api-link nav=\"@nav/api/MainModule.install\" semantic=\"function\">install</mkapi-api-link> ).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "InstallDoneEvent",
            "navPath": "@nav/api/MainModule.InstallDoneEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallDoneEvent.id",
                    "navPath": "@nav/api/MainModule.InstallDoneEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id = 'InstallDoneEvent'",
                        "implementation": "",
                        "startLine": 461,
                        "endLine": 462,
                        "references": {
                            "id": "@nav/api/MainModule.InstallDoneEvent.id",
                            "CdnEvent.id": "@nav/api/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallDoneEvent.status",
                    "navPath": "@nav/api/MainModule.InstallDoneEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Succeeded'",
                        "implementation": "",
                        "startLine": 464,
                        "endLine": 465,
                        "references": {
                            "status": "@nav/api/MainModule.InstallDoneEvent.status",
                            "CdnEvent.status": "@nav/api/MainModule.CdnEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallDoneEvent.step",
                    "navPath": "@nav/api/MainModule.InstallDoneEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'InstallDoneEvent'",
                        "implementation": "",
                        "startLine": 462,
                        "endLine": 463,
                        "references": {
                            "step": "@nav/api/MainModule.InstallDoneEvent.step",
                            "CdnEvent.step": "@nav/api/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallDoneEvent.text",
                    "navPath": "@nav/api/MainModule.InstallDoneEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text = 'Installation successful'",
                        "implementation": "",
                        "startLine": 463,
                        "endLine": 464,
                        "references": {
                            "text": "@nav/api/MainModule.InstallDoneEvent.text",
                            "CdnEvent.text": "@nav/api/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class InstallDoneEvent implements CdnEvent",
                "implementation": "export class InstallDoneEvent implements CdnEvent {\n    public readonly id = 'InstallDoneEvent'\n    public readonly step = 'InstallDoneEvent'\n    public readonly text = 'Installation successful'\n    public readonly status = 'Succeeded'\n}",
                "startLine": 460,
                "endLine": 466,
                "references": {
                    "InstallDoneEvent": "@nav/api/MainModule.InstallDoneEvent",
                    "CdnEvent.id": "@nav/api/MainModule.CdnEvent.id",
                    "CdnEvent.status": "@nav/api/MainModule.CdnEvent.status",
                    "CdnEvent.step": "@nav/api/MainModule.CdnEvent.step",
                    "CdnEvent.text": "@nav/api/MainModule.CdnEvent.text",
                    "CdnEvent": "@nav/api/MainModule.CdnEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "InstallErrorEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when an installation failed ( <mkapi-api-link nav=\"@nav/api/MainModule.install\" semantic=\"function\">install</mkapi-api-link> ).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "InstallErrorEvent",
            "navPath": "@nav/api/MainModule.InstallErrorEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallErrorEvent.id",
                    "navPath": "@nav/api/MainModule.InstallErrorEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id = 'InstallErrorEvent'",
                        "implementation": "",
                        "startLine": 471,
                        "endLine": 472,
                        "references": {
                            "id": "@nav/api/MainModule.InstallErrorEvent.id",
                            "CdnEvent.id": "@nav/api/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallErrorEvent.status",
                    "navPath": "@nav/api/MainModule.InstallErrorEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Failed'",
                        "implementation": "",
                        "startLine": 474,
                        "endLine": 475,
                        "references": {
                            "status": "@nav/api/MainModule.InstallErrorEvent.status",
                            "CdnEvent.status": "@nav/api/MainModule.CdnEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallErrorEvent.step",
                    "navPath": "@nav/api/MainModule.InstallErrorEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'InstallErrorEvent'",
                        "implementation": "",
                        "startLine": 472,
                        "endLine": 473,
                        "references": {
                            "step": "@nav/api/MainModule.InstallErrorEvent.step",
                            "CdnEvent.step": "@nav/api/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallErrorEvent.text",
                    "navPath": "@nav/api/MainModule.InstallErrorEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text = 'Installation error'",
                        "implementation": "",
                        "startLine": 473,
                        "endLine": 474,
                        "references": {
                            "text": "@nav/api/MainModule.InstallErrorEvent.text",
                            "CdnEvent.text": "@nav/api/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class InstallErrorEvent implements CdnEvent",
                "implementation": "export class InstallErrorEvent implements CdnEvent {\n    public readonly id = 'InstallErrorEvent'\n    public readonly step = 'InstallErrorEvent'\n    public readonly text = 'Installation error'\n    public readonly status = 'Failed'\n}",
                "startLine": 470,
                "endLine": 476,
                "references": {
                    "InstallErrorEvent": "@nav/api/MainModule.InstallErrorEvent",
                    "CdnEvent.id": "@nav/api/MainModule.CdnEvent.id",
                    "CdnEvent.status": "@nav/api/MainModule.CdnEvent.status",
                    "CdnEvent.step": "@nav/api/MainModule.CdnEvent.step",
                    "CdnEvent.text": "@nav/api/MainModule.CdnEvent.text",
                    "CdnEvent": "@nav/api/MainModule.CdnEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "InstallPyModuleEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when starting to install a module.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "InstallPyModuleEvent",
            "navPath": "@nav/api/MainModule.InstallPyModuleEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallPyModuleEvent.id",
                    "navPath": "@nav/api/MainModule.InstallPyModuleEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 675,
                        "endLine": 676,
                        "references": {
                            "id": "@nav/api/MainModule.InstallPyModuleEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallPyModuleEvent.status",
                    "navPath": "@nav/api/MainModule.InstallPyModuleEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 677,
                        "endLine": 678,
                        "references": {
                            "status": "@nav/api/MainModule.InstallPyModuleEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallPyModuleEvent.step",
                    "navPath": "@nav/api/MainModule.InstallPyModuleEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'InstallPyModuleEvent'",
                        "implementation": "",
                        "startLine": 674,
                        "endLine": 675,
                        "references": {
                            "step": "@nav/api/MainModule.InstallPyModuleEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallPyModuleEvent.text",
                    "navPath": "@nav/api/MainModule.InstallPyModuleEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 676,
                        "endLine": 677,
                        "references": {
                            "text": "@nav/api/MainModule.InstallPyModuleEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class InstallPyModuleEvent implements CdnPyEvent",
                "implementation": "export class InstallPyModuleEvent implements CdnPyEvent {\n    public readonly step = 'InstallPyModuleEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Pending'\n    constructor(public readonly name: string) {\n        this.id = `install-pyodide-module-${name}`\n        this.text = `Installing ${this.name}`\n    }\n}",
                "startLine": 673,
                "endLine": 683,
                "references": {
                    "InstallPyModuleEvent": "@nav/api/MainModule.InstallPyModuleEvent",
                    "CdnPyEvent": "@nav/api/MainModule.CdnPyEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LoadingGraphError",
            "documentation": {
                "sections": [
                    {
                        "content": "Base class of errors related to loading graph resolution. See also  <mkapi-api-link nav=\"@nav/api/MainModule.CdnLoadingGraphErrorEvent\" semantic=\"class\">CdnLoadingGraphErrorEvent</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LoadingGraphError",
            "navPath": "@nav/api/MainModule.LoadingGraphError",
            "attributes": [
                {
                    "name": "prepareStackTrace",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Optional override for formatting stack traces",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnError.prepareStackTrace",
                    "navPath": "@nav/api/MainModule.CdnError.prepareStackTrace",
                    "code": {
                        "filePath": "",
                        "declaration": "",
                        "implementation": "",
                        "startLine": 1,
                        "endLine": 2,
                        "references": {}
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/errors.models.ts",
                "declaration": "export class LoadingGraphError extends CdnError",
                "implementation": "export class LoadingGraphError extends CdnError {\n    constructor() {\n        super('Failed to retrieve the loading graph') // (1)\n        this.name = 'LoadingGraphError' // (2)\n    }\n}",
                "startLine": 26,
                "endLine": 32,
                "references": {
                    "LoadingGraphError": "@nav/api/MainModule.LoadingGraphError",
                    "CdnError.constructor": "@nav/api/MainModule.CdnError.constructor",
                    "CdnError.message": "@nav/api/MainModule.CdnError.message",
                    "CdnError.name": "@nav/api/MainModule.CdnError.name",
                    "CdnError.stack": "@nav/api/MainModule.CdnError.stack",
                    "CdnError.exceptionType": "@nav/api/MainModule.CdnError.exceptionType",
                    "CdnError.prepareStackTrace": "@nav/api/MainModule.CdnError.prepareStackTrace",
                    "CdnError.stackTraceLimit": "@nav/api/MainModule.CdnError.stackTraceLimit",
                    "CdnError.captureStackTrace": "@nav/api/MainModule.CdnError.captureStackTrace",
                    "CdnError": "@nav/api/MainModule.CdnError",
                    "DependenciesError": "@nav/api/MainModule.DependenciesError",
                    "CircularDependencies": "@nav/api/MainModule.CircularDependencies"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LoadingScreenView",
            "documentation": {
                "sections": [
                    {
                        "content": "Class providing granular controls on how loading screen is displayed when using  <mkapi-api-link nav=\"@nav/api/MainModule.install\" semantic=\"function\">install</mkapi-api-link> .\n\nHere is an example:\n ```\nimport {LoadingScreenView, install} from '@youwol/webpm-client'\n\nconst loadingScreen = new LoadingScreenView({\n    container: this,\n    logo: `<div style='font-size:xxx-large'>🐍</div>`,\n    wrapperStyle: {\n        position: 'absolute', top: '0', left: '0', width: '100%', height: '100%', 'font-weight': 'bolder',\n    },\n})\nloadingScreen.render()\nawait install({\n    modules: ['rxjs#7'],\n    onEvent: (ev) => {\n        // event forwarding to loading screen\n        loadingScreen.next(ev)\n    },\n})\n// loadingScreen.next(...) can be used later in the code\n// At some point remove the loading screen\nloadingScreen.done()\n``` \n\nDefault values of the display options are defined in  <mkapi-api-link nav=\"@nav/api/MainModule.DefaultLoadingScreenOptions\" semantic=\"class\">DefaultLoadingScreenOptions</mkapi-api-link> , it can be controlled by e.g.:\n ```\nimport {LoadingScreenView, DefaultLoadingScreenOptions} from '@youwol/webpm-client'\n// for all LoadingScreenView instances:\nLoadingScreenView.DefaultOptions = {\n    ...new DefaultLoadingScreenOptions(),\n    fadingTimeout: 0,\n}\n// for one LoadingScreenView instance (includes previously set 'fadingTimeout' to 0):\nnew cdnClient.LoadingScreenView({\n    logo: `<div style='font-size:xxx-large'>🐍</div>`,\n})\n``` \n\n> For default display, setting  `displayLoadingScreen: true`  from InstallInputsDeprecated is enough:\n> creation and management of  <mkapi-api-link nav=\"@nav/api/MainModule.LoadingScreenView\" semantic=\"class\">LoadingScreenView</mkapi-api-link>  will be automatic.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LoadingScreenView",
            "navPath": "@nav/api/MainModule.LoadingScreenView",
            "attributes": [
                {
                    "name": "contentDiv",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "expose the contentDiv HTMLDivElement",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingScreenView.contentDiv",
                    "navPath": "@nav/api/MainModule.LoadingScreenView.contentDiv",
                    "code": {
                        "filePath": "src/lib/loader.view.ts",
                        "declaration": "public contentDiv: HTMLDivElement",
                        "implementation": "",
                        "startLine": 167,
                        "endLine": 168,
                        "references": {
                            "contentDiv": "@nav/api/MainModule.LoadingScreenView.contentDiv"
                        }
                    }
                },
                {
                    "name": "loadingDiv",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "expose the loadingDiv HTMLDivElement",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingScreenView.loadingDiv",
                    "navPath": "@nav/api/MainModule.LoadingScreenView.loadingDiv",
                    "code": {
                        "filePath": "src/lib/loader.view.ts",
                        "declaration": "public readonly loadingDiv: HTMLDivElement",
                        "implementation": "",
                        "startLine": 163,
                        "endLine": 164,
                        "references": {
                            "loadingDiv": "@nav/api/MainModule.LoadingScreenView.loadingDiv"
                        }
                    }
                },
                {
                    "name": "options",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The actual display options used by the class.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingScreenView.options",
                    "navPath": "@nav/api/MainModule.LoadingScreenView.options",
                    "code": {
                        "filePath": "src/lib/loader.view.ts",
                        "declaration": "public readonly options: LoadingScreenOptions",
                        "implementation": "",
                        "startLine": 154,
                        "endLine": 155,
                        "references": {
                            "options": "@nav/api/MainModule.LoadingScreenView.options",
                            "LoadingScreenOptions": "@nav/api/MainModule.LoadingScreenOptions"
                        }
                    }
                },
                {
                    "name": "wrapperDiv",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "expose the wrapperDiv HTMLDivElement",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingScreenView.wrapperDiv",
                    "navPath": "@nav/api/MainModule.LoadingScreenView.wrapperDiv",
                    "code": {
                        "filePath": "src/lib/loader.view.ts",
                        "declaration": "public readonly wrapperDiv: HTMLDivElement",
                        "implementation": "",
                        "startLine": 159,
                        "endLine": 160,
                        "references": {
                            "wrapperDiv": "@nav/api/MainModule.LoadingScreenView.wrapperDiv"
                        }
                    }
                },
                {
                    "name": "DefaultOptions",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Can be used to control default display options for all  <mkapi-api-link nav=\"@nav/api/MainModule.LoadingScreenView\" semantic=\"class\">LoadingScreenView</mkapi-api-link>  instances",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingScreenView.DefaultOptions",
                    "navPath": "@nav/api/MainModule.LoadingScreenView.DefaultOptions",
                    "code": {
                        "filePath": "src/lib/loader.view.ts",
                        "declaration": "static DefaultOptions = new DefaultLoadingScreenOptions()",
                        "implementation": "",
                        "startLine": 149,
                        "endLine": 150,
                        "references": {
                            "DefaultOptions": "@nav/api/MainModule.LoadingScreenView.DefaultOptions",
                            "DefaultLoadingScreenOptions": "@nav/api/MainModule.DefaultLoadingScreenOptions"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "done",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Remove the loading screen (see  <mkapi-api-link nav=\"@nav/api/MainModule.LoadingScreenOptions.fadingTimeout\" semantic=\"attribute\">LoadingScreenOptions.fadingTimeout</mkapi-api-link> ).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingScreenView.done",
                    "navPath": "@nav/api/MainModule.LoadingScreenView.done",
                    "code": {
                        "filePath": "src/lib/loader.view.ts",
                        "declaration": "done()",
                        "implementation": "done() {\n    this.wrapperDiv.style.setProperty(\n        'transition',\n        `opacity ${String(this.options.fadingTimeout ?? 200)}ms`,\n    )\n    this.wrapperDiv.style.setProperty('opacity', '0')\n    setTimeout(() => {\n        this.wrapperDiv.remove()\n    }, this.options.fadingTimeout)\n}",
                        "startLine": 269,
                        "endLine": 279,
                        "references": {
                            "done": "@nav/api/MainModule.LoadingScreenView.done"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "next",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Actualize the view given a new  <mkapi-api-link nav=\"@nav/api/MainModule.CdnEvent\" semantic=\"interface\">CdnEvent</mkapi-api-link>  (provided that  <mkapi-api-link nav=\"@nav/api/MainModule.LoadingScreenView.render\" semantic=\"method\">LoadingScreenView.render</mkapi-api-link> \nhas been called before).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **event**: event to account for",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingScreenView.next",
                    "navPath": "@nav/api/MainModule.LoadingScreenView.next",
                    "code": {
                        "filePath": "src/lib/loader.view.ts",
                        "declaration": "next(event: CdnEvent)",
                        "implementation": "next(event: CdnEvent) {\n    if (isCdnEvent(event) && event.step === 'CdnLoadingGraphErrorEvent') {\n        insertLoadingGraphError(\n            this.contentDiv,\n            event as CdnLoadingGraphErrorEvent,\n        )\n    }\n    if (\n        (isCdnEvent(event) && event.step === 'CdnMessageEvent') ||\n        event instanceof BackendEvent\n    ) {\n        const divLib = this.wrapperDiv.querySelector(\n            `#${sanitizeCssId(event.id)}`,\n        ) as unknown as HTMLDivElement | null\n        if (divLib) {\n            divLib.textContent = '> ' + event.text\n        }\n        if (!divLib) {\n            const divLibNew = document.createElement('div')\n            divLibNew.id = sanitizeCssId(event.id)\n            divLibNew.textContent = '> ' + event.text\n            this.contentDiv.appendChild(divLibNew)\n        }\n    }\n    const libraryName = event.id\n    const cssId = sanitizeCssId(libraryName)\n    let divLib = this.wrapperDiv.querySelector(\n        `#${cssId}`,\n    ) as unknown as HTMLDivElement | null\n    if (!divLib) {\n        divLib = document.createElement('div')\n        divLib.id = cssId\n        this.contentDiv.appendChild(divLib)\n    }\n    updateLibStatusView(libraryName, divLib, event)\n}",
                        "startLine": 218,
                        "endLine": 254,
                        "references": {
                            "next": "@nav/api/MainModule.LoadingScreenView.next",
                            "CdnEvent": "@nav/api/MainModule.CdnEvent"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "render",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Render the loading screen view, should be called before any call to  <mkapi-api-link nav=\"@nav/api/MainModule.LoadingScreenView.next\" semantic=\"method\">LoadingScreenView.next</mkapi-api-link> \nto actually see the updates.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingScreenView.render",
                    "navPath": "@nav/api/MainModule.LoadingScreenView.render",
                    "code": {
                        "filePath": "src/lib/loader.view.ts",
                        "declaration": "render()",
                        "implementation": "render() {\n    this.options.container?.appendChild(this.wrapperDiv)\n    this.contentDiv = this.wrapperDiv.querySelector(\n        '.screen-messages-container',\n    ) as unknown as HTMLDivElement\n}",
                        "startLine": 259,
                        "endLine": 265,
                        "references": {
                            "render": "@nav/api/MainModule.LoadingScreenView.render"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/loader.view.ts",
                "declaration": "export class LoadingScreenView",
                "implementation": "export class LoadingScreenView {\n    /**\n     * Can be used to control default display options for all {@link LoadingScreenView} instances\n     */\n    static DefaultOptions = new DefaultLoadingScreenOptions()\n\n    /**\n     * The actual display options used by the class.\n     */\n    public readonly options: LoadingScreenOptions\n\n    /**\n     * expose the wrapperDiv HTMLDivElement\n     */\n    public readonly wrapperDiv: HTMLDivElement\n    /**\n     * expose the loadingDiv HTMLDivElement\n     */\n    public readonly loadingDiv: HTMLDivElement\n    /**\n     * expose the contentDiv HTMLDivElement\n     */\n    public contentDiv: HTMLDivElement\n\n    /**\n     *\n     * @param options see {@link LoadingScreenOptions}, final display options object is obtained by merging\n     * `options` with {@link DefaultLoadingScreenOptions} : `Object.assign(LoadingScreenView.DefaultOptions, options)`\n     */\n    constructor(options: LoadingScreenOptions = {}) {\n        this.options = {\n            ...LoadingScreenView.DefaultOptions,\n            ...options,\n        }\n        this.options.container ??= document.body\n        const wrapperStyle = {\n            ...this.options.wrapperStyle,\n            ...(options.wrapperStyle ?? {}),\n        }\n        this.wrapperDiv = document.createElement('div')\n        Object.entries(wrapperStyle).forEach(([k, v]) => {\n            this.wrapperDiv.style.setProperty(k, v)\n        })\n        this.wrapperDiv.innerHTML = `\n        <div id='${String(this.options.id)}' style='display: flex;justify-content: space-around; background-color: darkgrey;\n        color: green; font-family: monospace;font-size:small; width:100%; height:100%; opacity:1;\n        transition: opacity 1s;'>\n            <div style='margin-top: auto;margin-bottom: auto; padding:40px;\n            background-color: black; border-radius: 25px;min-width: 50%; max-height:75%; overflow: auto;\n            display: flex;'\n            >\n                <div  style='display: flex;justify-content: space-around;' >\n                    <div id='logo' style='white-space: pre-wrap; margin-top: auto; margin-bottom: auto; /*animation: spin 3s linear infinite*/'> \n                        ${String(this.options.logo)}\n                    </div>   \n                </div> \n                <div  style='width: 50px; '>\n    \n                </div>\n                <div  class='screen-messages-container' style='margin-top: auto;margin-bottom: auto; '>\n    \n                </div>\n            </div>\n        </div>\n        `\n    }\n\n    /**\n     * Actualize the view given a new {@link CdnEvent} (provided that {@link LoadingScreenView.render}\n     * has been called before).\n     *\n     * @param event event to account for\n     */\n    next(event: CdnEvent) {\n        if (isCdnEvent(event) && event.step === 'CdnLoadingGraphErrorEvent') {\n            insertLoadingGraphError(\n                this.contentDiv,\n                event as CdnLoadingGraphErrorEvent,\n            )\n        }\n        if (\n            (isCdnEvent(event) && event.step === 'CdnMessageEvent') ||\n            event instanceof BackendEvent\n        ) {\n            const divLib = this.wrapperDiv.querySelector(\n                `#${sanitizeCssId(event.id)}`,\n            ) as unknown as HTMLDivElement | null\n            if (divLib) {\n                divLib.textContent = '> ' + event.text\n            }\n            if (!divLib) {\n                const divLibNew = document.createElement('div')\n                divLibNew.id = sanitizeCssId(event.id)\n                divLibNew.textContent = '> ' + event.text\n                this.contentDiv.appendChild(divLibNew)\n            }\n        }\n        const libraryName = event.id\n        const cssId = sanitizeCssId(libraryName)\n        let divLib = this.wrapperDiv.querySelector(\n            `#${cssId}`,\n        ) as unknown as HTMLDivElement | null\n        if (!divLib) {\n            divLib = document.createElement('div')\n            divLib.id = cssId\n            this.contentDiv.appendChild(divLib)\n        }\n        updateLibStatusView(libraryName, divLib, event)\n    }\n\n    /**\n     * Render the loading screen view, should be called before any call to {@link LoadingScreenView.next}\n     * to actually see the updates.\n     */\n    render() {\n        this.options.container?.appendChild(this.wrapperDiv)\n        this.contentDiv = this.wrapperDiv.querySelector(\n            '.screen-messages-container',\n        ) as unknown as HTMLDivElement\n    }\n\n    /**\n     * Remove the loading screen (see {@link LoadingScreenOptions.fadingTimeout}).\n     */\n    done() {\n        this.wrapperDiv.style.setProperty(\n            'transition',\n            `opacity ${String(this.options.fadingTimeout ?? 200)}ms`,\n        )\n        this.wrapperDiv.style.setProperty('opacity', '0')\n        setTimeout(() => {\n            this.wrapperDiv.remove()\n        }, this.options.fadingTimeout)\n    }\n}",
                "startLine": 145,
                "endLine": 280,
                "references": {
                    "LoadingScreenView": "@nav/api/MainModule.LoadingScreenView",
                    "LoadingScreenOptions": "@nav/api/MainModule.LoadingScreenOptions",
                    "DefaultLoadingScreenOptions": "@nav/api/MainModule.DefaultLoadingScreenOptions",
                    "CdnEvent": "@nav/api/MainModule.CdnEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LocalYouwolRequired",
            "documentation": {
                "sections": [
                    {
                        "content": "Error related to the usage of features requiring the local youwol server while it is not detected.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LocalYouwolRequired",
            "navPath": "@nav/api/MainModule.LocalYouwolRequired",
            "attributes": [
                {
                    "name": "prepareStackTrace",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Optional override for formatting stack traces",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnError.prepareStackTrace",
                    "navPath": "@nav/api/MainModule.CdnError.prepareStackTrace",
                    "code": {
                        "filePath": "",
                        "declaration": "",
                        "implementation": "",
                        "startLine": 1,
                        "endLine": 2,
                        "references": {}
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/errors.models.ts",
                "declaration": "export class LocalYouwolRequired extends CdnError",
                "implementation": "export class LocalYouwolRequired extends CdnError {\n    constructor(public readonly detail: string) {\n        super()\n    }\n}",
                "startLine": 15,
                "endLine": 20,
                "references": {
                    "LocalYouwolRequired": "@nav/api/MainModule.LocalYouwolRequired",
                    "CdnError.constructor": "@nav/api/MainModule.CdnError.constructor",
                    "CdnError.message": "@nav/api/MainModule.CdnError.message",
                    "CdnError.name": "@nav/api/MainModule.CdnError.name",
                    "CdnError.stack": "@nav/api/MainModule.CdnError.stack",
                    "CdnError.exceptionType": "@nav/api/MainModule.CdnError.exceptionType",
                    "CdnError.prepareStackTrace": "@nav/api/MainModule.CdnError.prepareStackTrace",
                    "CdnError.stackTraceLimit": "@nav/api/MainModule.CdnError.stackTraceLimit",
                    "CdnError.captureStackTrace": "@nav/api/MainModule.CdnError.captureStackTrace",
                    "CdnError": "@nav/api/MainModule.CdnError"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ParseErrorEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when an  <mkapi-api-link nav=\"@nav/api/MainModule.SourceParsingFailed\" semantic=\"class\">SourceParsingFailed</mkapi-api-link>  error occurred.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ParseErrorEvent",
            "navPath": "@nav/api/MainModule.ParseErrorEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ParseErrorEvent.id",
                    "navPath": "@nav/api/MainModule.ParseErrorEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 412,
                        "endLine": 413,
                        "references": {
                            "id": "@nav/api/MainModule.ParseErrorEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ParseErrorEvent.status",
                    "navPath": "@nav/api/MainModule.ParseErrorEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Failed'",
                        "implementation": "",
                        "startLine": 414,
                        "endLine": 415,
                        "references": {
                            "status": "@nav/api/MainModule.ParseErrorEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ParseErrorEvent.step",
                    "navPath": "@nav/api/MainModule.ParseErrorEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'ParseErrorEvent'",
                        "implementation": "",
                        "startLine": 411,
                        "endLine": 412,
                        "references": {
                            "step": "@nav/api/MainModule.ParseErrorEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ParseErrorEvent.text",
                    "navPath": "@nav/api/MainModule.ParseErrorEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 413,
                        "endLine": 414,
                        "references": {
                            "text": "@nav/api/MainModule.ParseErrorEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class ParseErrorEvent implements CdnFetchEvent",
                "implementation": "export class ParseErrorEvent implements CdnFetchEvent {\n    public readonly step = 'ParseErrorEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Failed'\n    constructor(\n        public readonly targetName: string,\n        public readonly assetId: string,\n        public readonly url: string,\n        public readonly version: string,\n    ) {\n        this.id = targetName\n        this.text = `${targetName}: parsing the module/script failed`\n    }\n}",
                "startLine": 410,
                "endLine": 425,
                "references": {
                    "ParseErrorEvent": "@nav/api/MainModule.ParseErrorEvent",
                    "CdnFetchEvent": "@nav/api/MainModule.CdnFetchEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyEnvironmentErrorEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when installation of Pyodide environment failed.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyEnvironmentErrorEvent",
            "navPath": "@nav/api/MainModule.PyEnvironmentErrorEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyEnvironmentErrorEvent.id",
                    "navPath": "@nav/api/MainModule.PyEnvironmentErrorEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 731,
                        "endLine": 732,
                        "references": {
                            "id": "@nav/api/MainModule.PyEnvironmentErrorEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyEnvironmentErrorEvent.status",
                    "navPath": "@nav/api/MainModule.PyEnvironmentErrorEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Failed'",
                        "implementation": "",
                        "startLine": 733,
                        "endLine": 734,
                        "references": {
                            "status": "@nav/api/MainModule.PyEnvironmentErrorEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyEnvironmentErrorEvent.step",
                    "navPath": "@nav/api/MainModule.PyEnvironmentErrorEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'PyEnvironmentErrorEvent'",
                        "implementation": "",
                        "startLine": 730,
                        "endLine": 731,
                        "references": {
                            "step": "@nav/api/MainModule.PyEnvironmentErrorEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyEnvironmentErrorEvent.text",
                    "navPath": "@nav/api/MainModule.PyEnvironmentErrorEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 732,
                        "endLine": 733,
                        "references": {
                            "text": "@nav/api/MainModule.PyEnvironmentErrorEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class PyEnvironmentErrorEvent implements CdnPyEvent",
                "implementation": "export class PyEnvironmentErrorEvent implements CdnPyEvent {\n    public readonly step = 'PyEnvironmentErrorEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Failed'\n    constructor(public readonly detail: string) {\n        this.id = `pyodide-environment-error`\n        this.text = detail\n    }\n}",
                "startLine": 729,
                "endLine": 739,
                "references": {
                    "PyEnvironmentErrorEvent": "@nav/api/MainModule.PyEnvironmentErrorEvent",
                    "CdnPyEvent": "@nav/api/MainModule.CdnPyEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyEnvironmentReadyEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when the Pyodide environment is ready.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyEnvironmentReadyEvent",
            "navPath": "@nav/api/MainModule.PyEnvironmentReadyEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyEnvironmentReadyEvent.id",
                    "navPath": "@nav/api/MainModule.PyEnvironmentReadyEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 717,
                        "endLine": 718,
                        "references": {
                            "id": "@nav/api/MainModule.PyEnvironmentReadyEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyEnvironmentReadyEvent.status",
                    "navPath": "@nav/api/MainModule.PyEnvironmentReadyEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 719,
                        "endLine": 720,
                        "references": {
                            "status": "@nav/api/MainModule.PyEnvironmentReadyEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyEnvironmentReadyEvent.step",
                    "navPath": "@nav/api/MainModule.PyEnvironmentReadyEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'PyEnvironmentReadyEvent'",
                        "implementation": "",
                        "startLine": 716,
                        "endLine": 717,
                        "references": {
                            "step": "@nav/api/MainModule.PyEnvironmentReadyEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyEnvironmentReadyEvent.text",
                    "navPath": "@nav/api/MainModule.PyEnvironmentReadyEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 718,
                        "endLine": 719,
                        "references": {
                            "text": "@nav/api/MainModule.PyEnvironmentReadyEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class PyEnvironmentReadyEvent implements CdnPyEvent",
                "implementation": "export class PyEnvironmentReadyEvent implements CdnPyEvent {\n    public readonly step = 'PyEnvironmentReadyEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Pending'\n    constructor() {\n        this.id = `pyodide-environment-ready`\n        this.text = `Environment installed`\n    }\n}",
                "startLine": 715,
                "endLine": 725,
                "references": {
                    "PyEnvironmentReadyEvent": "@nav/api/MainModule.PyEnvironmentReadyEvent",
                    "CdnPyEvent": "@nav/api/MainModule.CdnPyEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyModuleErrorEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when loading a Pyodide module failed.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyModuleErrorEvent",
            "navPath": "@nav/api/MainModule.PyModuleErrorEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyModuleErrorEvent.id",
                    "navPath": "@nav/api/MainModule.PyModuleErrorEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 703,
                        "endLine": 704,
                        "references": {
                            "id": "@nav/api/MainModule.PyModuleErrorEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyModuleErrorEvent.status",
                    "navPath": "@nav/api/MainModule.PyModuleErrorEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Failed'",
                        "implementation": "",
                        "startLine": 705,
                        "endLine": 706,
                        "references": {
                            "status": "@nav/api/MainModule.PyModuleErrorEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyModuleErrorEvent.step",
                    "navPath": "@nav/api/MainModule.PyModuleErrorEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'PyModuleErrorEvent'",
                        "implementation": "",
                        "startLine": 702,
                        "endLine": 703,
                        "references": {
                            "step": "@nav/api/MainModule.PyModuleErrorEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyModuleErrorEvent.text",
                    "navPath": "@nav/api/MainModule.PyModuleErrorEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 704,
                        "endLine": 705,
                        "references": {
                            "text": "@nav/api/MainModule.PyModuleErrorEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class PyModuleErrorEvent implements CdnPyEvent",
                "implementation": "export class PyModuleErrorEvent implements CdnPyEvent {\n    public readonly step = 'PyModuleErrorEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Failed'\n    constructor(public readonly name: string) {\n        this.id = `error-pyodide-module-${name}`\n        this.text = `Error loading ${this.name}`\n    }\n}",
                "startLine": 701,
                "endLine": 711,
                "references": {
                    "PyModuleErrorEvent": "@nav/api/MainModule.PyModuleErrorEvent",
                    "CdnPyEvent": "@nav/api/MainModule.CdnPyEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyModuleLoadedEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when a Pyodide module has been loaded.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyModuleLoadedEvent",
            "navPath": "@nav/api/MainModule.PyModuleLoadedEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyModuleLoadedEvent.id",
                    "navPath": "@nav/api/MainModule.PyModuleLoadedEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 689,
                        "endLine": 690,
                        "references": {
                            "id": "@nav/api/MainModule.PyModuleLoadedEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyModuleLoadedEvent.status",
                    "navPath": "@nav/api/MainModule.PyModuleLoadedEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 691,
                        "endLine": 692,
                        "references": {
                            "status": "@nav/api/MainModule.PyModuleLoadedEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyModuleLoadedEvent.step",
                    "navPath": "@nav/api/MainModule.PyModuleLoadedEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'PyModuleLoadedEvent'",
                        "implementation": "",
                        "startLine": 688,
                        "endLine": 689,
                        "references": {
                            "step": "@nav/api/MainModule.PyModuleLoadedEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyModuleLoadedEvent.text",
                    "navPath": "@nav/api/MainModule.PyModuleLoadedEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 690,
                        "endLine": 691,
                        "references": {
                            "text": "@nav/api/MainModule.PyModuleLoadedEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class PyModuleLoadedEvent implements CdnPyEvent",
                "implementation": "export class PyModuleLoadedEvent implements CdnPyEvent {\n    public readonly step = 'PyModuleLoadedEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Pending'\n    constructor(public readonly name: string) {\n        this.id = `install-pyodide-module-${name}`\n        this.text = `Installing ${this.name}`\n    }\n}",
                "startLine": 687,
                "endLine": 697,
                "references": {
                    "PyModuleLoadedEvent": "@nav/api/MainModule.PyModuleLoadedEvent",
                    "CdnPyEvent": "@nav/api/MainModule.CdnPyEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyRuntimeReadyEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when the Pyodide runtime is ready.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyRuntimeReadyEvent",
            "navPath": "@nav/api/MainModule.PyRuntimeReadyEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyRuntimeReadyEvent.id",
                    "navPath": "@nav/api/MainModule.PyRuntimeReadyEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 647,
                        "endLine": 648,
                        "references": {
                            "id": "@nav/api/MainModule.PyRuntimeReadyEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyRuntimeReadyEvent.status",
                    "navPath": "@nav/api/MainModule.PyRuntimeReadyEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Succeeded'",
                        "implementation": "",
                        "startLine": 649,
                        "endLine": 650,
                        "references": {
                            "status": "@nav/api/MainModule.PyRuntimeReadyEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyRuntimeReadyEvent.step",
                    "navPath": "@nav/api/MainModule.PyRuntimeReadyEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'PyRuntimeReadyEvent'",
                        "implementation": "",
                        "startLine": 646,
                        "endLine": 647,
                        "references": {
                            "step": "@nav/api/MainModule.PyRuntimeReadyEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyRuntimeReadyEvent.text",
                    "navPath": "@nav/api/MainModule.PyRuntimeReadyEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 648,
                        "endLine": 649,
                        "references": {
                            "text": "@nav/api/MainModule.PyRuntimeReadyEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class PyRuntimeReadyEvent implements CdnPyEvent",
                "implementation": "export class PyRuntimeReadyEvent implements CdnPyEvent {\n    public readonly step = 'PyRuntimeReadyEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Succeeded'\n    constructor(public readonly pyodideVersion: string) {\n        this.id = `ready-pyodide-${pyodideVersion}`\n        this.text = `Pyodide runtime ready`\n    }\n}",
                "startLine": 645,
                "endLine": 655,
                "references": {
                    "PyRuntimeReadyEvent": "@nav/api/MainModule.PyRuntimeReadyEvent",
                    "CdnPyEvent": "@nav/api/MainModule.CdnPyEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "SourceLoadedEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when a script's content transfer over HTTP network has completed.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "SourceLoadedEvent",
            "navPath": "@nav/api/MainModule.SourceLoadedEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceLoadedEvent.id",
                    "navPath": "@nav/api/MainModule.SourceLoadedEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 297,
                        "endLine": 298,
                        "references": {
                            "id": "@nav/api/MainModule.SourceLoadedEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceLoadedEvent.status",
                    "navPath": "@nav/api/MainModule.SourceLoadedEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 299,
                        "endLine": 300,
                        "references": {
                            "status": "@nav/api/MainModule.SourceLoadedEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceLoadedEvent.step",
                    "navPath": "@nav/api/MainModule.SourceLoadedEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'SourceLoadedEvent'",
                        "implementation": "",
                        "startLine": 296,
                        "endLine": 297,
                        "references": {
                            "step": "@nav/api/MainModule.SourceLoadedEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceLoadedEvent.text",
                    "navPath": "@nav/api/MainModule.SourceLoadedEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 298,
                        "endLine": 299,
                        "references": {
                            "text": "@nav/api/MainModule.SourceLoadedEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class SourceLoadedEvent implements CdnFetchEvent",
                "implementation": "export class SourceLoadedEvent implements CdnFetchEvent {\n    public readonly step = 'SourceLoadedEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Pending'\n    constructor(\n        public readonly targetName: string,\n        public readonly assetId: string,\n        public readonly url: string,\n        public readonly version: string,\n        public readonly progress?: ProgressEvent<XMLHttpRequestEventTarget>,\n    ) {\n        this.id = targetName\n        this.text = `${targetName}: source fetched`\n    }\n}",
                "startLine": 295,
                "endLine": 311,
                "references": {
                    "SourceLoadedEvent": "@nav/api/MainModule.SourceLoadedEvent",
                    "CdnFetchEvent": "@nav/api/MainModule.CdnFetchEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "SourceLoadingEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when a script's content is transferring over HTTP network.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "SourceLoadingEvent",
            "navPath": "@nav/api/MainModule.SourceLoadingEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceLoadingEvent.id",
                    "navPath": "@nav/api/MainModule.SourceLoadingEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 277,
                        "endLine": 278,
                        "references": {
                            "id": "@nav/api/MainModule.SourceLoadingEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceLoadingEvent.status",
                    "navPath": "@nav/api/MainModule.SourceLoadingEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 279,
                        "endLine": 280,
                        "references": {
                            "status": "@nav/api/MainModule.SourceLoadingEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceLoadingEvent.step",
                    "navPath": "@nav/api/MainModule.SourceLoadingEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'SourceLoadingEvent'",
                        "implementation": "",
                        "startLine": 276,
                        "endLine": 277,
                        "references": {
                            "step": "@nav/api/MainModule.SourceLoadingEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceLoadingEvent.text",
                    "navPath": "@nav/api/MainModule.SourceLoadingEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 278,
                        "endLine": 279,
                        "references": {
                            "text": "@nav/api/MainModule.SourceLoadingEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class SourceLoadingEvent implements CdnFetchEvent",
                "implementation": "export class SourceLoadingEvent implements CdnFetchEvent {\n    public readonly step = 'SourceLoadingEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Pending'\n    constructor(\n        public readonly targetName: string,\n        public readonly assetId: string,\n        public readonly url: string,\n        public readonly version: string,\n        public readonly progress: ProgressEvent<XMLHttpRequestEventTarget>,\n    ) {\n        this.id = targetName\n        this.text = `${targetName}: fetching over HTTP`\n    }\n}",
                "startLine": 275,
                "endLine": 291,
                "references": {
                    "SourceLoadingEvent": "@nav/api/MainModule.SourceLoadingEvent",
                    "CdnFetchEvent": "@nav/api/MainModule.CdnFetchEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "SourceParsedEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when a script's content has been parsed (installed).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "SourceParsedEvent",
            "navPath": "@nav/api/MainModule.SourceParsedEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceParsedEvent.id",
                    "navPath": "@nav/api/MainModule.SourceParsedEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 317,
                        "endLine": 318,
                        "references": {
                            "id": "@nav/api/MainModule.SourceParsedEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceParsedEvent.status",
                    "navPath": "@nav/api/MainModule.SourceParsedEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Succeeded'",
                        "implementation": "",
                        "startLine": 319,
                        "endLine": 320,
                        "references": {
                            "status": "@nav/api/MainModule.SourceParsedEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceParsedEvent.step",
                    "navPath": "@nav/api/MainModule.SourceParsedEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'SourceParsedEvent'",
                        "implementation": "",
                        "startLine": 316,
                        "endLine": 317,
                        "references": {
                            "step": "@nav/api/MainModule.SourceParsedEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "SourceParsedEvent.text",
                    "navPath": "@nav/api/MainModule.SourceParsedEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 318,
                        "endLine": 319,
                        "references": {
                            "text": "@nav/api/MainModule.SourceParsedEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class SourceParsedEvent implements CdnFetchEvent",
                "implementation": "export class SourceParsedEvent implements CdnFetchEvent {\n    public readonly step = 'SourceParsedEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Succeeded'\n    constructor(\n        public readonly targetName: string,\n        public readonly assetId: string,\n        public readonly url: string,\n        public readonly version: string,\n    ) {\n        this.id = targetName\n        this.text = `${targetName}: module/script imported`\n    }\n}",
                "startLine": 315,
                "endLine": 330,
                "references": {
                    "SourceParsedEvent": "@nav/api/MainModule.SourceParsedEvent",
                    "CdnFetchEvent": "@nav/api/MainModule.CdnFetchEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "SourceParsingFailed",
            "documentation": {
                "sections": [
                    {
                        "content": "Error occurring while parsing a source content of a script. See also  <mkapi-api-link nav=\"@nav/api/MainModule.ParseErrorEvent\" semantic=\"class\">ParseErrorEvent</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "SourceParsingFailed",
            "navPath": "@nav/api/MainModule.SourceParsingFailed",
            "attributes": [
                {
                    "name": "prepareStackTrace",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Optional override for formatting stack traces",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnError.prepareStackTrace",
                    "navPath": "@nav/api/MainModule.CdnError.prepareStackTrace",
                    "code": {
                        "filePath": "",
                        "declaration": "",
                        "implementation": "",
                        "startLine": 1,
                        "endLine": 2,
                        "references": {}
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/errors.models.ts",
                "declaration": "export class SourceParsingFailed extends CdnError",
                "implementation": "export class SourceParsingFailed extends CdnError {\n    static exceptionType = 'SourceParsingFailed'\n\n    constructor(public readonly detail: { assetId; name; url; message }) {\n        super()\n    }\n\n    static isInstance(resp: CdnError): resp is SourceParsingFailed {\n        return (\n            'exceptionType' in resp &&\n            resp.exceptionType === SourceParsingFailed.exceptionType\n        )\n    }\n}",
                "startLine": 98,
                "endLine": 112,
                "references": {
                    "SourceParsingFailed": "@nav/api/MainModule.SourceParsingFailed",
                    "CdnError.constructor": "@nav/api/MainModule.CdnError.constructor",
                    "CdnError.message": "@nav/api/MainModule.CdnError.message",
                    "CdnError.name": "@nav/api/MainModule.CdnError.name",
                    "CdnError.stack": "@nav/api/MainModule.CdnError.stack",
                    "CdnError.exceptionType": "@nav/api/MainModule.CdnError.exceptionType",
                    "CdnError.prepareStackTrace": "@nav/api/MainModule.CdnError.prepareStackTrace",
                    "CdnError.stackTraceLimit": "@nav/api/MainModule.CdnError.stackTraceLimit",
                    "CdnError.captureStackTrace": "@nav/api/MainModule.CdnError.captureStackTrace",
                    "CdnError": "@nav/api/MainModule.CdnError"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "StartBackendEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Events emitted when a backend is started.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "StartBackendEvent",
            "navPath": "@nav/api/MainModule.StartBackendEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.id",
                    "navPath": "@nav/api/MainModule.BackendEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 481,
                        "endLine": 482,
                        "references": {
                            "id": "@nav/api/MainModule.BackendEvent.id",
                            "CdnEvent.id": "@nav/api/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.status",
                    "navPath": "@nav/api/MainModule.BackendEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status: 'Pending' | 'Failed'",
                        "implementation": "",
                        "startLine": 483,
                        "endLine": 484,
                        "references": {
                            "status": "@nav/api/MainModule.BackendEvent.status",
                            "CdnEvent.status": "@nav/api/MainModule.CdnEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.step",
                    "navPath": "@nav/api/MainModule.BackendEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step:\n        | 'DownloadBackendEvent'\n        | 'InstallBackendEvent'\n        | 'StartBackendEvent'\n        | 'BackendErrorEvent'",
                        "implementation": "",
                        "startLine": 484,
                        "endLine": 485,
                        "references": {
                            "step": "@nav/api/MainModule.BackendEvent.step",
                            "CdnEvent.step": "@nav/api/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendEvent.text",
                    "navPath": "@nav/api/MainModule.BackendEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 482,
                        "endLine": 483,
                        "references": {
                            "text": "@nav/api/MainModule.BackendEvent.text",
                            "CdnEvent.text": "@nav/api/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class StartBackendEvent extends BackendEvent",
                "implementation": "export class StartBackendEvent extends BackendEvent {\n    public readonly event: 'starting' | 'listening' | 'failed'\n    constructor(params: {\n        name: string\n        version: string\n        event: 'starting' | 'listening' | 'failed'\n    }) {\n        super(\n            'StartBackendEvent',\n            params.name,\n            params.version,\n            'starting...',\n            params.event,\n        )\n    }\n}",
                "startLine": 554,
                "endLine": 570,
                "references": {
                    "StartBackendEvent": "@nav/api/MainModule.StartBackendEvent",
                    "BackendEvent.constructor": "@nav/api/MainModule.BackendEvent.constructor",
                    "BackendEvent.event": "@nav/api/MainModule.BackendEvent.event",
                    "BackendEvent.id": "@nav/api/MainModule.BackendEvent.id",
                    "BackendEvent.name": "@nav/api/MainModule.BackendEvent.name",
                    "BackendEvent.status": "@nav/api/MainModule.BackendEvent.status",
                    "BackendEvent.step": "@nav/api/MainModule.BackendEvent.step",
                    "BackendEvent.text": "@nav/api/MainModule.BackendEvent.text",
                    "BackendEvent.title": "@nav/api/MainModule.BackendEvent.title",
                    "BackendEvent.version": "@nav/api/MainModule.BackendEvent.version",
                    "BackendEvent": "@nav/api/MainModule.BackendEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "StartEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when starting to fetch a script.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "StartEvent",
            "navPath": "@nav/api/MainModule.StartEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartEvent.id",
                    "navPath": "@nav/api/MainModule.StartEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 258,
                        "endLine": 259,
                        "references": {
                            "id": "@nav/api/MainModule.StartEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartEvent.status",
                    "navPath": "@nav/api/MainModule.StartEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 260,
                        "endLine": 261,
                        "references": {
                            "status": "@nav/api/MainModule.StartEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartEvent.step",
                    "navPath": "@nav/api/MainModule.StartEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'StartEvent'",
                        "implementation": "",
                        "startLine": 257,
                        "endLine": 258,
                        "references": {
                            "step": "@nav/api/MainModule.StartEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartEvent.text",
                    "navPath": "@nav/api/MainModule.StartEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 259,
                        "endLine": 260,
                        "references": {
                            "text": "@nav/api/MainModule.StartEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class StartEvent implements CdnFetchEvent",
                "implementation": "export class StartEvent implements CdnFetchEvent {\n    public readonly step = 'StartEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Pending'\n    constructor(\n        public readonly targetName: string,\n        public readonly assetId: string,\n        public readonly url: string,\n        public readonly version: string,\n    ) {\n        this.id = targetName\n        this.text = `${targetName}: start importing`\n    }\n}",
                "startLine": 256,
                "endLine": 271,
                "references": {
                    "StartEvent": "@nav/api/MainModule.StartEvent",
                    "CdnFetchEvent": "@nav/api/MainModule.CdnFetchEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "StartPyEnvironmentInstallEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when starting to install Pyodide environment.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "StartPyEnvironmentInstallEvent",
            "navPath": "@nav/api/MainModule.StartPyEnvironmentInstallEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartPyEnvironmentInstallEvent.id",
                    "navPath": "@nav/api/MainModule.StartPyEnvironmentInstallEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 661,
                        "endLine": 662,
                        "references": {
                            "id": "@nav/api/MainModule.StartPyEnvironmentInstallEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartPyEnvironmentInstallEvent.status",
                    "navPath": "@nav/api/MainModule.StartPyEnvironmentInstallEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 663,
                        "endLine": 664,
                        "references": {
                            "status": "@nav/api/MainModule.StartPyEnvironmentInstallEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartPyEnvironmentInstallEvent.step",
                    "navPath": "@nav/api/MainModule.StartPyEnvironmentInstallEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'StartPyEnvironmentInstallEvent'",
                        "implementation": "",
                        "startLine": 660,
                        "endLine": 661,
                        "references": {
                            "step": "@nav/api/MainModule.StartPyEnvironmentInstallEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartPyEnvironmentInstallEvent.text",
                    "navPath": "@nav/api/MainModule.StartPyEnvironmentInstallEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 662,
                        "endLine": 663,
                        "references": {
                            "text": "@nav/api/MainModule.StartPyEnvironmentInstallEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class StartPyEnvironmentInstallEvent implements CdnPyEvent",
                "implementation": "export class StartPyEnvironmentInstallEvent implements CdnPyEvent {\n    public readonly step = 'StartPyEnvironmentInstallEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Pending'\n    constructor() {\n        this.id = `install-pyodide-dependencies`\n        this.text = `Install dependencies`\n    }\n}",
                "startLine": 659,
                "endLine": 669,
                "references": {
                    "StartPyEnvironmentInstallEvent": "@nav/api/MainModule.StartPyEnvironmentInstallEvent",
                    "CdnPyEvent": "@nav/api/MainModule.CdnPyEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "StartPyRuntimeEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when starting to install Pyodide runtime.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "StartPyRuntimeEvent",
            "navPath": "@nav/api/MainModule.StartPyRuntimeEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartPyRuntimeEvent.id",
                    "navPath": "@nav/api/MainModule.StartPyRuntimeEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 633,
                        "endLine": 634,
                        "references": {
                            "id": "@nav/api/MainModule.StartPyRuntimeEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartPyRuntimeEvent.status",
                    "navPath": "@nav/api/MainModule.StartPyRuntimeEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Pending'",
                        "implementation": "",
                        "startLine": 635,
                        "endLine": 636,
                        "references": {
                            "status": "@nav/api/MainModule.StartPyRuntimeEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartPyRuntimeEvent.step",
                    "navPath": "@nav/api/MainModule.StartPyRuntimeEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'StartPyRuntimeEvent'",
                        "implementation": "",
                        "startLine": 632,
                        "endLine": 633,
                        "references": {
                            "step": "@nav/api/MainModule.StartPyRuntimeEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StartPyRuntimeEvent.text",
                    "navPath": "@nav/api/MainModule.StartPyRuntimeEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 634,
                        "endLine": 635,
                        "references": {
                            "text": "@nav/api/MainModule.StartPyRuntimeEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class StartPyRuntimeEvent implements CdnPyEvent",
                "implementation": "export class StartPyRuntimeEvent implements CdnPyEvent {\n    public readonly step = 'StartPyRuntimeEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Pending'\n    constructor(public readonly pyodideVersion: string) {\n        this.id = `start-pyodide-${pyodideVersion}`\n        this.text = `Start pyodide runtime`\n    }\n}",
                "startLine": 631,
                "endLine": 641,
                "references": {
                    "StartPyRuntimeEvent": "@nav/api/MainModule.StartPyRuntimeEvent",
                    "CdnPyEvent": "@nav/api/MainModule.CdnPyEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "State",
            "documentation": {
                "sections": [
                    {
                        "content": "Provides extra-controls regarding dependencies and URL resolution.\n\nNone of the methods exposed should be used in regular scenario.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "State",
            "navPath": "@nav/api/MainModule.State",
            "attributes": [],
            "callables": [
                {
                    "name": "clear",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Remove installed modules & reset the cache.\nIt makes its best to clear modules & associated side effects, but it is not perfect.\nIt is mostly intended at helping 'tear down' methods in tests.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **executingWindow**: where the resources have been installed",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.clear",
                    "navPath": "@nav/api/MainModule.State.clear",
                    "code": {
                        "filePath": "src/lib/state.ts",
                        "declaration": "static clear(executingWindow?: Window)",
                        "implementation": "static clear(executingWindow?: Window) {\n    StateImplementation.clear(executingWindow)\n}",
                        "startLine": 70,
                        "endLine": 73,
                        "references": {
                            "clear": "@nav/api/MainModule.State.clear"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "pinDependencies",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Pin some dependencies to use whenever a loading graph is resolved,\nit will over-ride natural resolution from packages description.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.pinDependencies",
                    "navPath": "@nav/api/MainModule.State.pinDependencies",
                    "code": {
                        "filePath": "src/lib/state.ts",
                        "declaration": "static pinDependencies(dependencies: LightLibraryQueryString[])",
                        "implementation": "static pinDependencies(dependencies: LightLibraryQueryString[]) {\n    StateImplementation.pinDependencies(dependencies)\n}",
                        "startLine": 45,
                        "endLine": 48,
                        "references": {
                            "pinDependencies": "@nav/api/MainModule.State.pinDependencies"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "registerUrlPatcher",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Register a 'patcher' for URLs to fetch resource: any time a request is done to the target resource,\nthe URL is actually replaced by the registered patch.\n\nThis is provided if somehow a saved loading graph reference resources that have been moved to other location.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **patcher**: function that takes  `{ name, version, assetId, url }`  as argument and return the patched URLs\n(which should be the original if no transformation is required).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "State.registerUrlPatcher",
                    "navPath": "@nav/api/MainModule.State.registerUrlPatcher",
                    "code": {
                        "filePath": "src/lib/state.ts",
                        "declaration": "static registerUrlPatcher(\n    patcher: ({ name, version, assetId, url }) => string,\n)",
                        "implementation": "static registerUrlPatcher(\n    patcher: ({ name, version, assetId, url }) => string,\n) {\n    StateImplementation.registerUrlPatcher(patcher)\n}",
                        "startLine": 57,
                        "endLine": 62,
                        "references": {
                            "registerUrlPatcher": "@nav/api/MainModule.State.registerUrlPatcher"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/state.ts",
                "declaration": "export class State",
                "implementation": "export class State {\n    /**\n     * Pin some dependencies to use whenever a loading graph is resolved,\n     * it will over-ride natural resolution from packages description.\n     *\n     */\n    static pinDependencies(dependencies: LightLibraryQueryString[]) {\n        StateImplementation.pinDependencies(dependencies)\n    }\n\n    /**\n     * Register a 'patcher' for URLs to fetch resource: any time a request is done to the target resource,\n     * the URL is actually replaced by the registered patch.\n     *\n     * This is provided if somehow a saved loading graph reference resources that have been moved to other location.\n     * @param patcher function that takes `{ name, version, assetId, url }` as argument and return the patched URLs\n     * (which should be the original if no transformation is required).\n     */\n    static registerUrlPatcher(\n        patcher: ({ name, version, assetId, url }) => string,\n    ) {\n        StateImplementation.registerUrlPatcher(patcher)\n    }\n\n    /**\n     * Remove installed modules & reset the cache.\n     * It makes its best to clear modules & associated side effects, but it is not perfect.\n     * It is mostly intended at helping 'tear down' methods in tests.\n     *\n     * @param executingWindow where the resources have been installed\n     */\n    static clear(executingWindow?: Window) {\n        StateImplementation.clear(executingWindow)\n    }\n}",
                "startLine": 39,
                "endLine": 74,
                "references": {
                    "State": "@nav/api/MainModule.State"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "StateImplementation",
            "documentation": {
                "sections": [
                    {
                        "content": "Singleton object that gathers history of fetched modules, scripts & CSS.\nIt also acts as a cache store.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "StateImplementation",
            "navPath": "@nav/api/MainModule.StateImplementation",
            "attributes": [
                {
                    "name": "exportedSymbolsDict",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Dictionary of  `${libName}#${libVersion}`  ->  `{ symbol: string; apiKey: string }`",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StateImplementation.exportedSymbolsDict",
                    "navPath": "@nav/api/MainModule.StateImplementation.exportedSymbolsDict",
                    "code": {
                        "filePath": "src/lib/state.ts",
                        "declaration": "static exportedSymbolsDict: Record<\n        string,\n        { symbol: string; apiKey: string; aliases?: string[] }\n    > = {\n        [`${setup.name}#${setup.version}`]: {\n            symbol: setup.name,\n            apiKey: setup.apiVersion,\n            aliases: ['webpmClient'],\n        },\n    }",
                        "implementation": "",
                        "startLine": 84,
                        "endLine": 85,
                        "references": {
                            "exportedSymbolsDict": "@nav/api/MainModule.StateImplementation.exportedSymbolsDict"
                        }
                    }
                },
                {
                    "name": "importedBundles",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Imported modules: mapping between  <mkapi-api-link nav=\"@nav/api/MainModule.LibraryName\" semantic=\"type-alias\">LibraryName</mkapi-api-link>  and list of installed  <mkapi-api-link nav=\"@nav/api/MainModule.Version\" semantic=\"type-alias\">Version</mkapi-api-link> .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StateImplementation.importedBundles",
                    "navPath": "@nav/api/MainModule.StateImplementation.importedBundles",
                    "code": {
                        "filePath": "src/lib/state.ts",
                        "declaration": "static importedBundles = new Map<LibraryName, Version[]>([\n        [setup.name, [setup.version]],\n    ])",
                        "implementation": "",
                        "startLine": 149,
                        "endLine": 150,
                        "references": {
                            "importedBundles": "@nav/api/MainModule.StateImplementation.importedBundles"
                        }
                    }
                },
                {
                    "name": "importedLoadingGraphs",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Installed loading graph: mapping between a loading graph's body uid and window state",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StateImplementation.importedLoadingGraphs",
                    "navPath": "@nav/api/MainModule.StateImplementation.importedLoadingGraphs",
                    "code": {
                        "filePath": "src/lib/state.ts",
                        "declaration": "static importedLoadingGraphs = new Map<string, Promise<Window>>()",
                        "implementation": "",
                        "startLine": 165,
                        "endLine": 166,
                        "references": {
                            "importedLoadingGraphs": "@nav/api/MainModule.StateImplementation.importedLoadingGraphs"
                        }
                    }
                },
                {
                    "name": "latestVersion",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Latest version of modules installed: mapping between library name and latest version",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StateImplementation.latestVersion",
                    "navPath": "@nav/api/MainModule.StateImplementation.latestVersion",
                    "code": {
                        "filePath": "src/lib/state.ts",
                        "declaration": "static latestVersion = new Map<string, Version>([\n        [setup.name, setup.version],\n    ])",
                        "implementation": "",
                        "startLine": 178,
                        "endLine": 179,
                        "references": {
                            "latestVersion": "@nav/api/MainModule.StateImplementation.latestVersion"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "getExportedSymbol",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Return the exported symbol name of a library.\n\nFor now implementation is based on a hard coded dictionary.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **name**: name of the library\n*  **version**: version of the library",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StateImplementation.getExportedSymbol",
                    "navPath": "@nav/api/MainModule.StateImplementation.getExportedSymbol",
                    "code": {
                        "filePath": "src/lib/state.ts",
                        "declaration": "static getExportedSymbol(\n    name: string,\n    version: string,\n): { symbol: string; apiKey: string; aliases: string[] }",
                        "implementation": "static getExportedSymbol(\n    name: string,\n    version: string,\n): { symbol: string; apiKey: string; aliases: string[] } {\n    const exported =\n        StateImplementation.exportedSymbolsDict[`${name}#${version}`]\n    if (exported.aliases === undefined) {\n        // This case can happen when installing a saved loading graph that did not included aliases at that time.\n        return { ...exported, aliases: [] }\n    }\n    return { aliases: [], ...exported }\n}",
                        "startLine": 103,
                        "endLine": 115,
                        "references": {
                            "getExportedSymbol": "@nav/api/MainModule.StateImplementation.getExportedSymbol"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "getPinedDependencies",
                    "documentation": {
                        "sections": [
                            {
                                "content": "return the (static) list of pined dependencies.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StateImplementation.getPinedDependencies",
                    "navPath": "@nav/api/MainModule.StateImplementation.getPinedDependencies",
                    "code": {
                        "filePath": "src/lib/state.ts",
                        "declaration": "static getPinedDependencies()",
                        "implementation": "static getPinedDependencies() {\n    return [...StateImplementation.pinedDependencies]\n}",
                        "startLine": 484,
                        "endLine": 487,
                        "references": {
                            "getPinedDependencies": "@nav/api/MainModule.StateImplementation.getPinedDependencies"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "isCompatibleVersionInstalled",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Return whether a library at particular version hase been already installed with a compatible version.\nCompatible version means a greater version with same major.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **libName**: library name\n*  **version**: version",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StateImplementation.isCompatibleVersionInstalled",
                    "navPath": "@nav/api/MainModule.StateImplementation.isCompatibleVersionInstalled",
                    "code": {
                        "filePath": "src/lib/state.ts",
                        "declaration": "static isCompatibleVersionInstalled(\n    libName: string,\n    version: string,\n): boolean",
                        "implementation": "static isCompatibleVersionInstalled(\n    libName: string,\n    version: string,\n): boolean {\n    if (libName === '@youwol/webpm-client') {\n        const symbol = getExpectedFullExportedSymbol(libName, version)\n        const alreadyHere = (window as unknown as never)[symbol] as\n            | {\n                  setup: { version: string }\n              }\n            | undefined\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const compatibleInstalled: boolean | undefined =\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n            alreadyHere && gte(alreadyHere.setup.version, version)\n        return compatibleInstalled ?? false\n    }\n    const installedVersions =\n        StateImplementation.importedBundles.get(libName)\n    if (!installedVersions) {\n        return false\n    }\n\n    if (installedVersions.includes(version)) {\n        return true\n    }\n\n    const compatibleVersion = installedVersions\n        .filter(\n            (installedVersion) =>\n                StateImplementation.getExportedSymbol(\n                    libName,\n                    installedVersion,\n                ).apiKey ===\n                StateImplementation.getExportedSymbol(libName, version)\n                    .apiKey,\n        )\n        .find((installedVersion) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n            return gt(installedVersion, version)\n        })\n\n    if (compatibleVersion) {\n        console.log(\n            `${libName}: a greater compatible version is already installed (${compatibleVersion}), skip install`,\n            {\n                libName,\n                queriedVersion: version,\n                compatibleVersion,\n                apiKey: StateImplementation.getExportedSymbol(\n                    libName,\n                    version,\n                ).apiKey,\n            },\n        )\n    }\n    return compatibleVersion !== undefined\n}",
                        "startLine": 209,
                        "endLine": 267,
                        "references": {
                            "isCompatibleVersionInstalled": "@nav/api/MainModule.StateImplementation.isCompatibleVersionInstalled"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "pinDependencies",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Pin some dependencies to use whenever a loading graph is resolved,\nit will over-ride natural resolution from packages description.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StateImplementation.pinDependencies",
                    "navPath": "@nav/api/MainModule.StateImplementation.pinDependencies",
                    "code": {
                        "filePath": "src/lib/state.ts",
                        "declaration": "static pinDependencies(dependencies: LightLibraryQueryString[])",
                        "implementation": "static pinDependencies(dependencies: LightLibraryQueryString[]) {\n    StateImplementation.pinedDependencies = [\n        ...StateImplementation.pinedDependencies,\n        ...dependencies,\n    ]\n}",
                        "startLine": 492,
                        "endLine": 498,
                        "references": {
                            "pinDependencies": "@nav/api/MainModule.StateImplementation.pinDependencies"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "registerUrlPatcher",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Register a 'patcher' for URLs to fetch resource: any time a request is done to the target resource,\nthe URL is actually replaced by the registered patch.\n\nThis is provided if somehow a saved loading graph reference resources that have been moved to other location.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "StateImplementation.registerUrlPatcher",
                    "navPath": "@nav/api/MainModule.StateImplementation.registerUrlPatcher",
                    "code": {
                        "filePath": "src/lib/state.ts",
                        "declaration": "static registerUrlPatcher(\n    patcher: ({ name, version, assetId, url }) => string,\n)",
                        "implementation": "static registerUrlPatcher(\n    patcher: ({ name, version, assetId, url }) => string,\n) {\n    StateImplementation.urlPatcher = patcher\n}",
                        "startLine": 542,
                        "endLine": 547,
                        "references": {
                            "registerUrlPatcher": "@nav/api/MainModule.StateImplementation.registerUrlPatcher"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/state.ts",
                "declaration": "export class StateImplementation",
                "implementation": "export class StateImplementation {\n    /**\n     * Dictionary of `${libName}#${libVersion}` -> `{ symbol: string; apiKey: string }`\n     *\n     */\n    static exportedSymbolsDict: Record<\n        string,\n        { symbol: string; apiKey: string; aliases?: string[] }\n    > = {\n        [`${setup.name}#${setup.version}`]: {\n            symbol: setup.name,\n            apiKey: setup.apiVersion,\n            aliases: ['webpmClient'],\n        },\n    }\n\n    /**\n     * Return the exported symbol name of a library.\n     *\n     * For now implementation is based on a hard coded dictionary.\n     *\n     * @param name name of the library\n     * @param version version of the library\n     */\n    static getExportedSymbol(\n        name: string,\n        version: string,\n    ): { symbol: string; apiKey: string; aliases: string[] } {\n        const exported =\n            StateImplementation.exportedSymbolsDict[`${name}#${version}`]\n        if (exported.aliases === undefined) {\n            // This case can happen when installing a saved loading graph that did not included aliases at that time.\n            return { ...exported, aliases: [] }\n        }\n        return { aliases: [], ...exported }\n    }\n\n    static updateExportedSymbolsDict(\n        modules: {\n            name: string\n            version: string\n            exportedSymbol: string\n            apiKey: string\n            aliases: string[]\n            type: 'js/wasm' | 'backend'\n        }[],\n        backendPartitionId: string,\n    ) {\n        const newEntries = modules.reduce((acc, e) => {\n            const suffix =\n                e.type === 'js/wasm'\n                    ? ''\n                    : `${PARTITION_PREFIX}${backendPartitionId}`\n            return {\n                ...acc,\n                [`${e.name}${suffix}#${e.version}`]: {\n                    symbol: `${e.exportedSymbol}${suffix}`,\n                    apiKey: e.apiKey,\n                    aliases: e.aliases,\n                },\n            }\n        }, {})\n        StateImplementation.exportedSymbolsDict = {\n            ...StateImplementation.exportedSymbolsDict,\n            ...newEntries,\n        }\n    }\n    /**\n     * Imported modules: mapping between {@link LibraryName} and list of installed {@link Version}.\n     */\n    static importedBundles = new Map<LibraryName, Version[]>([\n        [setup.name, [setup.version]],\n    ])\n\n    /**\n     * Fetched loading graph: mapping between a loading graph's body uid and corresponding computed loading graph.\n     * @hidden\n     */\n    static fetchedLoadingGraph = new Map<\n        string,\n        Promise<LoadingGraph | CdnError>\n    >()\n\n    /**\n     * Installed loading graph: mapping between a loading graph's body uid and window state\n     */\n    static importedLoadingGraphs = new Map<string, Promise<Window>>()\n\n    /**\n     * Installed script: mapping between a script's uid and a {@link FetchedScript}.\n     * @hidden\n     */\n    static importedScripts = new Map<string, Promise<FetchedScript>>()\n\n    static importedPyModules: string[] = []\n\n    /**\n     * Latest version of modules installed: mapping between library name and latest version\n     */\n    static latestVersion = new Map<string, Version>([\n        [setup.name, setup.version],\n    ])\n\n    static webSocketsStore: Record<\n        string,\n        Promise<Observable<ContextMessage>>\n    > = {}\n\n    static getWebSocket(wsUrl: string): Promise<Observable<ContextMessage>> {\n        if (wsUrl in StateImplementation.webSocketsStore) {\n            return StateImplementation.webSocketsStore[wsUrl]\n        }\n        StateImplementation.webSocketsStore[wsUrl] =\n            installBackendClientDeps().then(\n                ({ http }: { http: typeof HttpClients }) => {\n                    return new http.WebSocketClient<ContextMessage>(\n                        wsUrl,\n                    ).connectWs()\n                },\n            )\n        return StateImplementation.webSocketsStore[wsUrl]\n    }\n\n    /**\n     * Return whether a library at particular version hase been already installed with a compatible version.\n     * Compatible version means a greater version with same major.\n     *\n     * @param libName library name\n     * @param version version\n     */\n    static isCompatibleVersionInstalled(\n        libName: string,\n        version: string,\n    ): boolean {\n        if (libName === '@youwol/webpm-client') {\n            const symbol = getExpectedFullExportedSymbol(libName, version)\n            const alreadyHere = (window as unknown as never)[symbol] as\n                | {\n                      setup: { version: string }\n                  }\n                | undefined\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const compatibleInstalled: boolean | undefined =\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                alreadyHere && gte(alreadyHere.setup.version, version)\n            return compatibleInstalled ?? false\n        }\n        const installedVersions =\n            StateImplementation.importedBundles.get(libName)\n        if (!installedVersions) {\n            return false\n        }\n\n        if (installedVersions.includes(version)) {\n            return true\n        }\n\n        const compatibleVersion = installedVersions\n            .filter(\n                (installedVersion) =>\n                    StateImplementation.getExportedSymbol(\n                        libName,\n                        installedVersion,\n                    ).apiKey ===\n                    StateImplementation.getExportedSymbol(libName, version)\n                        .apiKey,\n            )\n            .find((installedVersion) => {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                return gt(installedVersion, version)\n            })\n\n        if (compatibleVersion) {\n            console.log(\n                `${libName}: a greater compatible version is already installed (${compatibleVersion}), skip install`,\n                {\n                    libName,\n                    queriedVersion: version,\n                    compatibleVersion,\n                    apiKey: StateImplementation.getExportedSymbol(\n                        libName,\n                        version,\n                    ).apiKey,\n                },\n            )\n        }\n        return compatibleVersion !== undefined\n    }\n\n    /**\n     * @param aliases\n     * @param executingWindow\n     * @hidden\n     */\n    static installAliases(\n        aliases: Record<string, string | ((Window) => unknown)>,\n        executingWindow: WindowOrWorkerGlobalScope,\n    ) {\n        type Module = Record<string, unknown> & {\n            __yw_aliases__?: Set<string>\n        }\n        type MaybeModule = Module | undefined\n        Object.entries(aliases).forEach(([alias, original]) => {\n            let pointed: MaybeModule = undefined\n            if (typeof original == 'string') {\n                const pathOffset = original.startsWith('@') ? 2 : 1\n                const root = original.split('/').slice(0, pathOffset).join('/')\n                const path = original.split('/').slice(pathOffset)\n                const rootModule = executingWindow[root] as MaybeModule\n                pointed = path.reduce(\n                    (acc, e) => acc && acc[e],\n                    rootModule,\n                ) as MaybeModule\n            } else {\n                pointed = original(executingWindow) as MaybeModule\n            }\n            if (!pointed) {\n                console.warn('can not create alias', { alias, original })\n                return\n            }\n\n            executingWindow[alias] = pointed\n\n            if (!pointed.__yw_aliases__) {\n                pointed.__yw_aliases__ = new Set()\n            }\n            pointed.__yw_aliases__.add(alias)\n        })\n    }\n\n    /**\n     * Reset the cache, but keep installed modules.\n     * @hidden\n     */\n    static resetCache() {\n        StateImplementation.importedBundles = new Map<LibraryName, Version[]>()\n        StateImplementation.importedLoadingGraphs = new Map<\n            string,\n            Promise<Window>\n        >()\n        StateImplementation.importedScripts = new Map<\n            string,\n            Promise<FetchedScript>\n        >()\n        StateImplementation.latestVersion = new Map<string, string>()\n        StateImplementation.exportedSymbolsDict = {}\n    }\n\n    /**\n     * Remove installed modules & reset the cache.\n     * It makes its best to clear modules & associated side effects, but it is not perfect.\n     * It is not expose anyway and serves at helping tests mostly.\n     *\n     * @param executingWindow where the resources have been installed\n     * @hidden\n     */\n    static clear(executingWindow?: Window) {\n        executingWindow ??= window\n        Array.from(StateImplementation.importedBundles.entries())\n            .map(([lib, versions]) => {\n                return versions.map((version) => [lib, version])\n            })\n            .flat()\n            .map(([lib, version]) => {\n                const symbolName = this.getExportedSymbol(lib, version).symbol\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const aliases: Set<string> =\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                    executingWindow[symbolName]?.__yw_aliases__ || new Set()\n                return [\n                    symbolName,\n                    getInstalledFullExportedSymbol(lib, version),\n                    getFullExportedSymbolAlias(lib, version),\n                    ...aliases,\n                ]\n            })\n            .flat()\n            .forEach((toDelete) => {\n                // eslint-disable-next-line @typescript-eslint/no-unused-expressions,@typescript-eslint/no-dynamic-delete\n                executingWindow[toDelete] && delete executingWindow[toDelete]\n            })\n\n        StateImplementation.resetCache()\n    }\n\n    /**\n     * Update the various properties after new modules have been imported.\n     *\n     * @param modules modules installed\n     * @param executingWindow the executing window (where to expose the latest version if change need be).\n     * @hidden\n     */\n    static registerImportedModules(\n        modules: { name: string; version: string }[],\n        executingWindow: WindowOrWorkerGlobalScope,\n    ) {\n        modules.forEach(({ name, version }) => {\n            const existingVersions =\n                StateImplementation.importedBundles.get(name) ?? []\n            StateImplementation.importedBundles.set(name, [\n                ...existingVersions,\n                version,\n            ])\n        })\n        StateImplementation.updateLatestBundleVersion(modules, executingWindow)\n    }\n    /**\n     * Register imported python modules.\n     *\n     * @param pyModules Name of the python modules.\n     * @hidden\n     */\n    static registerImportedPyModules(pyModules: string[]) {\n        StateImplementation.importedPyModules = [\n            ...StateImplementation.importedPyModules,\n            ...pyModules,\n        ]\n    }\n\n    /**\n     * Update {@link StateImplementation.latestVersion} given a provided installed {@link LoadingGraph}.\n     * It also exposes the latest version in `executingWindow` using original symbol name if need be.\n     *\n     * @param modules installed {@link LoadingGraph}\n     * @param executingWindow where to expose the latest version if change need be\n     * @hidden\n     */\n    private static updateLatestBundleVersion(\n        modules: { name: string; version: string }[],\n        executingWindow: WindowOrWorkerGlobalScope,\n    ) {\n        const toConsiderForUpdate = modules.filter(({ name, version }) => {\n            return !(\n                StateImplementation.latestVersion.has(name) &&\n                StateImplementation.latestVersion.get(name) === version\n            )\n        })\n        toConsiderForUpdate.forEach(({ name, version }) => {\n            if (\n                StateImplementation.latestVersion.has(name) &&\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                lt(version, StateImplementation.latestVersion.get(name))\n            ) {\n                return\n            }\n            const { symbol, aliases } = StateImplementation.getExportedSymbol(\n                name,\n                version,\n            )\n            const exportedName = getInstalledFullExportedSymbol(name, version)\n\n            if (!executingWindow[exportedName]) {\n                console.error(\n                    `Problem with package \"${name}\" & export symbol \"${exportedName}\"`,\n                    {\n                        name,\n                        version,\n                        symbol,\n                        exportedName,\n                    },\n                )\n            }\n            const prevLatestVersion =\n                StateImplementation.latestVersion.get(name)\n            if (prevLatestVersion) {\n                const { symbol, aliases } =\n                    StateImplementation.getExportedSymbol(\n                        name,\n                        prevLatestVersion,\n                    )\n                const toRemove = [symbol, ...aliases]\n                toRemove.forEach((alias) => {\n                    if (alias.includes(':')) {\n                        const baseName = alias.split(':')[0]\n                        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                        delete executingWindow[baseName]\n                        return\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                    delete executingWindow[alias]\n                })\n            }\n            const toAdd = [symbol, ...aliases]\n            toAdd.forEach((alias) => {\n                if (alias.includes(':')) {\n                    const baseName = alias.split(':')[0]\n                    const property = alias.split(':')[1]\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                    executingWindow[baseName] =\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                        executingWindow[exportedName][property]\n                    return\n                }\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                executingWindow[alias] = executingWindow[exportedName]\n            })\n            StateImplementation.latestVersion.set(name, version)\n        })\n    }\n\n    private static pinedDependencies: LightLibraryQueryString[] = []\n\n    /**\n     * return the (static) list of pined dependencies.\n     */\n    static getPinedDependencies() {\n        return [...StateImplementation.pinedDependencies]\n    }\n    /**\n     * Pin some dependencies to use whenever a loading graph is resolved,\n     * it will over-ride natural resolution from packages description.\n     *\n     */\n    static pinDependencies(dependencies: LightLibraryQueryString[]) {\n        StateImplementation.pinedDependencies = [\n            ...StateImplementation.pinedDependencies,\n            ...dependencies,\n        ]\n    }\n\n    /**\n     *\n     * @hidden\n     */\n    private static urlPatcher: ({\n        name,\n        version,\n        assetId,\n        url,\n    }: {\n        name: string\n        version: string\n        assetId: string\n        url: string\n    }) => string = ({ url }) => url\n\n    /**\n     *\n     * @param _p\n     * @param _p.name name of the asset\n     * @param _p.version version of the asset\n     * @param _p.assetId id of the asset\n     * @param _p.url original URL\n     */\n    static getPatchedUrl({\n        name,\n        version,\n        assetId,\n        url,\n    }: {\n        name: string\n        version: string\n        assetId: string\n        url: string\n    }) {\n        return StateImplementation.urlPatcher({ name, version, assetId, url })\n    }\n    /**\n     * Register a 'patcher' for URLs to fetch resource: any time a request is done to the target resource,\n     * the URL is actually replaced by the registered patch.\n     *\n     * This is provided if somehow a saved loading graph reference resources that have been moved to other location.\n     */\n    static registerUrlPatcher(\n        patcher: ({ name, version, assetId, url }) => string,\n    ) {\n        StateImplementation.urlPatcher = patcher\n    }\n}",
                "startLine": 79,
                "endLine": 548,
                "references": {
                    "StateImplementation": "@nav/api/MainModule.StateImplementation",
                    "Observable": "https://rxjs.dev/guide/observable"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Unauthorized",
            "documentation": {
                "sections": [
                    {
                        "content": "Error related to 401 response. See also  <mkapi-api-link nav=\"@nav/api/MainModule.UnauthorizedEvent\" semantic=\"class\">UnauthorizedEvent</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Unauthorized",
            "navPath": "@nav/api/MainModule.Unauthorized",
            "attributes": [
                {
                    "name": "prepareStackTrace",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Optional override for formatting stack traces",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnError.prepareStackTrace",
                    "navPath": "@nav/api/MainModule.CdnError.prepareStackTrace",
                    "code": {
                        "filePath": "",
                        "declaration": "",
                        "implementation": "",
                        "startLine": 1,
                        "endLine": 2,
                        "references": {}
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/errors.models.ts",
                "declaration": "export class Unauthorized extends CdnError",
                "implementation": "export class Unauthorized extends CdnError {\n    static exceptionType = 'Unauthorized'\n\n    constructor(public readonly detail: { assetId; name; url }) {\n        super()\n    }\n\n    static isInstance(resp: CdnError): resp is Unauthorized {\n        return (\n            'exceptionType' in resp &&\n            resp.exceptionType === Unauthorized.exceptionType\n        )\n    }\n}",
                "startLine": 38,
                "endLine": 52,
                "references": {
                    "Unauthorized": "@nav/api/MainModule.Unauthorized",
                    "CdnError.constructor": "@nav/api/MainModule.CdnError.constructor",
                    "CdnError.message": "@nav/api/MainModule.CdnError.message",
                    "CdnError.name": "@nav/api/MainModule.CdnError.name",
                    "CdnError.stack": "@nav/api/MainModule.CdnError.stack",
                    "CdnError.exceptionType": "@nav/api/MainModule.CdnError.exceptionType",
                    "CdnError.prepareStackTrace": "@nav/api/MainModule.CdnError.prepareStackTrace",
                    "CdnError.stackTraceLimit": "@nav/api/MainModule.CdnError.stackTraceLimit",
                    "CdnError.captureStackTrace": "@nav/api/MainModule.CdnError.captureStackTrace",
                    "CdnError": "@nav/api/MainModule.CdnError"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "UnauthorizedEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when an  <mkapi-api-link nav=\"@nav/api/MainModule.Unauthorized\" semantic=\"class\">Unauthorized</mkapi-api-link>  error occurred.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "UnauthorizedEvent",
            "navPath": "@nav/api/MainModule.UnauthorizedEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "UnauthorizedEvent.id",
                    "navPath": "@nav/api/MainModule.UnauthorizedEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 374,
                        "endLine": 375,
                        "references": {
                            "id": "@nav/api/MainModule.UnauthorizedEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "UnauthorizedEvent.status",
                    "navPath": "@nav/api/MainModule.UnauthorizedEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Failed'",
                        "implementation": "",
                        "startLine": 376,
                        "endLine": 377,
                        "references": {
                            "status": "@nav/api/MainModule.UnauthorizedEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "UnauthorizedEvent.step",
                    "navPath": "@nav/api/MainModule.UnauthorizedEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'UnauthorizedEvent'",
                        "implementation": "",
                        "startLine": 373,
                        "endLine": 374,
                        "references": {
                            "step": "@nav/api/MainModule.UnauthorizedEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "UnauthorizedEvent.text",
                    "navPath": "@nav/api/MainModule.UnauthorizedEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 375,
                        "endLine": 376,
                        "references": {
                            "text": "@nav/api/MainModule.UnauthorizedEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class UnauthorizedEvent implements CdnFetchEvent",
                "implementation": "export class UnauthorizedEvent implements CdnFetchEvent {\n    public readonly step = 'UnauthorizedEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Failed'\n    constructor(\n        public readonly targetName: string,\n        public readonly assetId: string,\n        public readonly url: string,\n        public readonly version: string,\n    ) {\n        this.id = targetName\n        this.text = `${targetName}: unauthorized to access the resource`\n    }\n}",
                "startLine": 372,
                "endLine": 387,
                "references": {
                    "UnauthorizedEvent": "@nav/api/MainModule.UnauthorizedEvent",
                    "CdnFetchEvent": "@nav/api/MainModule.CdnFetchEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "UrlNotFound",
            "documentation": {
                "sections": [
                    {
                        "content": "Error related to 404 response. See also  <mkapi-api-link nav=\"@nav/api/MainModule.UrlNotFoundEvent\" semantic=\"class\">UrlNotFoundEvent</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "UrlNotFound",
            "navPath": "@nav/api/MainModule.UrlNotFound",
            "attributes": [
                {
                    "name": "prepareStackTrace",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Optional override for formatting stack traces",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnError.prepareStackTrace",
                    "navPath": "@nav/api/MainModule.CdnError.prepareStackTrace",
                    "code": {
                        "filePath": "",
                        "declaration": "",
                        "implementation": "",
                        "startLine": 1,
                        "endLine": 2,
                        "references": {}
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/errors.models.ts",
                "declaration": "export class UrlNotFound extends CdnError",
                "implementation": "export class UrlNotFound extends CdnError {\n    static exceptionType = 'UrlNotFound'\n\n    constructor(public readonly detail: { assetId; name; url }) {\n        super()\n    }\n\n    static isInstance(resp: CdnError): resp is UrlNotFound {\n        return (\n            'exceptionType' in resp &&\n            resp.exceptionType === UrlNotFound.exceptionType\n        )\n    }\n}",
                "startLine": 58,
                "endLine": 72,
                "references": {
                    "UrlNotFound": "@nav/api/MainModule.UrlNotFound",
                    "CdnError.constructor": "@nav/api/MainModule.CdnError.constructor",
                    "CdnError.message": "@nav/api/MainModule.CdnError.message",
                    "CdnError.name": "@nav/api/MainModule.CdnError.name",
                    "CdnError.stack": "@nav/api/MainModule.CdnError.stack",
                    "CdnError.exceptionType": "@nav/api/MainModule.CdnError.exceptionType",
                    "CdnError.prepareStackTrace": "@nav/api/MainModule.CdnError.prepareStackTrace",
                    "CdnError.stackTraceLimit": "@nav/api/MainModule.CdnError.stackTraceLimit",
                    "CdnError.captureStackTrace": "@nav/api/MainModule.CdnError.captureStackTrace",
                    "CdnError": "@nav/api/MainModule.CdnError"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "UrlNotFoundEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Event emitted when an  <mkapi-api-link nav=\"@nav/api/MainModule.UrlNotFound\" semantic=\"class\">UrlNotFound</mkapi-api-link>  error occurred.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "UrlNotFoundEvent",
            "navPath": "@nav/api/MainModule.UrlNotFoundEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "UrlNotFoundEvent.id",
                    "navPath": "@nav/api/MainModule.UrlNotFoundEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly id: string",
                        "implementation": "",
                        "startLine": 393,
                        "endLine": 394,
                        "references": {
                            "id": "@nav/api/MainModule.UrlNotFoundEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "UrlNotFoundEvent.status",
                    "navPath": "@nav/api/MainModule.UrlNotFoundEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly status = 'Failed'",
                        "implementation": "",
                        "startLine": 395,
                        "endLine": 396,
                        "references": {
                            "status": "@nav/api/MainModule.UrlNotFoundEvent.status"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "UrlNotFoundEvent.step",
                    "navPath": "@nav/api/MainModule.UrlNotFoundEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly step = 'UrlNotFoundEvent'",
                        "implementation": "",
                        "startLine": 392,
                        "endLine": 393,
                        "references": {
                            "step": "@nav/api/MainModule.UrlNotFoundEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "UrlNotFoundEvent.text",
                    "navPath": "@nav/api/MainModule.UrlNotFoundEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "public readonly text: string",
                        "implementation": "",
                        "startLine": 394,
                        "endLine": 395,
                        "references": {
                            "text": "@nav/api/MainModule.UrlNotFoundEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export class UrlNotFoundEvent implements CdnFetchEvent",
                "implementation": "export class UrlNotFoundEvent implements CdnFetchEvent {\n    public readonly step = 'UrlNotFoundEvent'\n    public readonly id: string\n    public readonly text: string\n    public readonly status = 'Failed'\n    constructor(\n        public readonly targetName: string,\n        public readonly assetId: string,\n        public readonly url: string,\n        public readonly version: string,\n    ) {\n        this.id = targetName\n        this.text = `${targetName}: resource not found at ${url}`\n    }\n}",
                "startLine": 391,
                "endLine": 406,
                "references": {
                    "UrlNotFoundEvent": "@nav/api/MainModule.UrlNotFoundEvent",
                    "CdnFetchEvent": "@nav/api/MainModule.CdnFetchEvent"
                }
            },
            "semantic": {
                "role": "class",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "AllEvents",
            "documentation": {
                "sections": [
                    {
                        "content": "Type map for all events.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "AllEvents",
            "navPath": "@nav/api/MainModule.AllEvents",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export interface AllEvents",
                "implementation": "export interface AllEvents {\n    CdnMessageEvent: CdnMessageEvent\n    CdnLoadingGraphQueryEvent: CdnLoadingGraphQueryEvent\n    CdnLoadingGraphResolvedEvent: CdnLoadingGraphResolvedEvent\n    CdnLoadingGraphErrorEvent: CdnLoadingGraphErrorEvent\n    InstallDoneEvent: InstallDoneEvent\n    InstallErrorEvent: InstallErrorEvent\n    StartEvent: StartEvent\n    SourceLoadingEvent: SourceLoadingEvent\n    SourceLoadedEvent: SourceLoadedEvent\n    SourceParsedEvent: SourceParsedEvent\n    CssLoadingEvent: CssLoadingEvent\n    CssParsedEvent: CssParsedEvent\n    UnauthorizedEvent: UnauthorizedEvent\n    UrlNotFoundEvent: UrlNotFoundEvent\n    ParseErrorEvent: ParseErrorEvent\n    FetchPyRuntimeEvent: FetchPyRuntimeEvent\n    FetchedPyRuntimeEvent: FetchedPyRuntimeEvent\n    StartPyRuntimeEvent: StartPyRuntimeEvent\n    PyRuntimeReadyEvent: PyRuntimeReadyEvent\n    StartPyEnvironmentInstallEvent: StartPyEnvironmentInstallEvent\n    InstallPyModuleEvent: InstallPyModuleEvent\n    PyModuleLoadedEvent: PyModuleLoadedEvent\n    PyModuleErrorEvent: PyModuleErrorEvent\n    PyEnvironmentReadyEvent: PyEnvironmentReadyEvent\n    PyEnvironmentErrorEvent: PyEnvironmentErrorEvent\n    ConsoleEvent: ConsoleEvent\n    DownloadBackendEvent: DownloadBackendEvent\n    InstallBackendEvent: InstallBackendEvent\n    StartBackendEvent: StartBackendEvent\n    BackendErrorEvent: BackendErrorEvent\n}",
                "startLine": 17,
                "endLine": 49,
                "references": {
                    "AllEvents": "@nav/api/MainModule.AllEvents",
                    "BackendErrorEvent": "@nav/api/MainModule.BackendErrorEvent",
                    "CdnLoadingGraphErrorEvent": "@nav/api/MainModule.CdnLoadingGraphErrorEvent",
                    "CdnLoadingGraphQueryEvent": "@nav/api/MainModule.CdnLoadingGraphQueryEvent",
                    "CdnLoadingGraphResolvedEvent": "@nav/api/MainModule.CdnLoadingGraphResolvedEvent",
                    "CdnMessageEvent": "@nav/api/MainModule.CdnMessageEvent",
                    "ConsoleEvent": "@nav/api/MainModule.ConsoleEvent",
                    "CssLoadingEvent": "@nav/api/MainModule.CssLoadingEvent",
                    "CssParsedEvent": "@nav/api/MainModule.CssParsedEvent",
                    "DownloadBackendEvent": "@nav/api/MainModule.DownloadBackendEvent",
                    "FetchedPyRuntimeEvent": "@nav/api/MainModule.FetchedPyRuntimeEvent",
                    "FetchPyRuntimeEvent": "@nav/api/MainModule.FetchPyRuntimeEvent",
                    "InstallBackendEvent": "@nav/api/MainModule.InstallBackendEvent",
                    "InstallDoneEvent": "@nav/api/MainModule.InstallDoneEvent",
                    "InstallErrorEvent": "@nav/api/MainModule.InstallErrorEvent",
                    "InstallPyModuleEvent": "@nav/api/MainModule.InstallPyModuleEvent",
                    "ParseErrorEvent": "@nav/api/MainModule.ParseErrorEvent",
                    "PyEnvironmentErrorEvent": "@nav/api/MainModule.PyEnvironmentErrorEvent",
                    "PyEnvironmentReadyEvent": "@nav/api/MainModule.PyEnvironmentReadyEvent",
                    "PyModuleErrorEvent": "@nav/api/MainModule.PyModuleErrorEvent",
                    "PyModuleLoadedEvent": "@nav/api/MainModule.PyModuleLoadedEvent",
                    "PyRuntimeReadyEvent": "@nav/api/MainModule.PyRuntimeReadyEvent",
                    "SourceLoadedEvent": "@nav/api/MainModule.SourceLoadedEvent",
                    "SourceLoadingEvent": "@nav/api/MainModule.SourceLoadingEvent",
                    "SourceParsedEvent": "@nav/api/MainModule.SourceParsedEvent",
                    "StartBackendEvent": "@nav/api/MainModule.StartBackendEvent",
                    "StartEvent": "@nav/api/MainModule.StartEvent",
                    "StartPyEnvironmentInstallEvent": "@nav/api/MainModule.StartPyEnvironmentInstallEvent",
                    "StartPyRuntimeEvent": "@nav/api/MainModule.StartPyRuntimeEvent",
                    "UnauthorizedEvent": "@nav/api/MainModule.UnauthorizedEvent",
                    "UrlNotFoundEvent": "@nav/api/MainModule.UrlNotFoundEvent"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "BackendClient",
            "documentation": {
                "sections": [
                    {
                        "content": "Backend client.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BackendClient",
            "navPath": "@nav/api/MainModule.BackendClient",
            "attributes": [
                {
                    "name": "config",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Configuration.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.config",
                    "navPath": "@nav/api/MainModule.BackendClient.config",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "config: {\n        // Build configuration (command line options).\n        build: Record<string, string>\n    }",
                        "implementation": "",
                        "startLine": 238,
                        "endLine": 239,
                        "references": {
                            "config": "@nav/api/MainModule.BackendClient.config"
                        }
                    }
                },
                {
                    "name": "exportedSymbol",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The name of the symbol in the global scope pointing to the client.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.exportedSymbol",
                    "navPath": "@nav/api/MainModule.BackendClient.exportedSymbol",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "exportedSymbol: string",
                        "implementation": "",
                        "startLine": 246,
                        "endLine": 247,
                        "references": {
                            "exportedSymbol": "@nav/api/MainModule.BackendClient.exportedSymbol"
                        }
                    }
                },
                {
                    "name": "partitionId",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Encapsulating partition Id.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.partitionId",
                    "navPath": "@nav/api/MainModule.BackendClient.partitionId",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "partitionId: string",
                        "implementation": "",
                        "startLine": 251,
                        "endLine": 252,
                        "references": {
                            "partitionId": "@nav/api/MainModule.BackendClient.partitionId"
                        }
                    }
                },
                {
                    "name": "urlBase",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Base URL of the service.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.urlBase",
                    "navPath": "@nav/api/MainModule.BackendClient.urlBase",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "urlBase: string",
                        "implementation": "",
                        "startLine": 223,
                        "endLine": 224,
                        "references": {
                            "urlBase": "@nav/api/MainModule.BackendClient.urlBase"
                        }
                    }
                },
                {
                    "name": "urlW3Lab",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Relative path of the W3Lab page pointing to the backend.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.urlW3Lab",
                    "navPath": "@nav/api/MainModule.BackendClient.urlW3Lab",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "urlW3Lab: string",
                        "implementation": "",
                        "startLine": 233,
                        "endLine": 234,
                        "references": {
                            "urlW3Lab": "@nav/api/MainModule.BackendClient.urlW3Lab"
                        }
                    }
                },
                {
                    "name": "version",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Version of the service",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.version",
                    "navPath": "@nav/api/MainModule.BackendClient.version",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "version: string",
                        "implementation": "",
                        "startLine": 228,
                        "endLine": 229,
                        "references": {
                            "version": "@nav/api/MainModule.BackendClient.version"
                        }
                    }
                }
            ],
            "callables": [
                {
                    "name": "fetch",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Proxy the standard <a target='_blank' href=\"https://developer.mozilla.org/en-US/docs/Web/API/fetch\"> fetch </a>\nfunction.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **endPoint**: Target end-point.\n*  **fetchOptions**: <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\nFetch options </a>.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.fetch",
                    "navPath": "@nav/api/MainModule.BackendClient.fetch",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "fetch(endPoint: string, fetchOptions: RequestInit): Promise<Response>",
                        "implementation": "",
                        "startLine": 261,
                        "endLine": 262,
                        "references": {
                            "fetch": "@nav/api/MainModule.BackendClient.fetch"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "fetchJson",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Same as  `fetch`  with an additional call to  `.then((resp) => resp.json())` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **endPoint**: Target end-point.\n*  **fetchOptions**: <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\nFetch options </a>.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.fetchJson",
                    "navPath": "@nav/api/MainModule.BackendClient.fetchJson",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "fetchJson(endPoint: string, fetchOptions: RequestInit): Promise<JSON>",
                        "implementation": "",
                        "startLine": 270,
                        "endLine": 271,
                        "references": {
                            "fetchJson": "@nav/api/MainModule.BackendClient.fetchJson"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "fetchText",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Same as  `fetch`  with an additional call to  `.then((resp) => resp.text())` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **endPoint**: Target end-point.\n*  **fetchOptions**: <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\nFetch options </a>.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.fetchText",
                    "navPath": "@nav/api/MainModule.BackendClient.fetchText",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "fetchText(endPoint: string, fetchOptions: RequestInit): Promise<string>",
                        "implementation": "",
                        "startLine": 279,
                        "endLine": 280,
                        "references": {
                            "fetchText": "@nav/api/MainModule.BackendClient.fetchText"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "fromFetch",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Same as  `fetch`  but returning an RxJS Observable.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **endPoint**: Target end-point.\n*  **fetchOptions**: <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\nFetch options </a>.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.fromFetch",
                    "navPath": "@nav/api/MainModule.BackendClient.fromFetch",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "fromFetch(\n        endPoint: string,\n        fetchOptions: RequestInit,\n    ): rxjsModuleType.Observable<Response>",
                        "implementation": "",
                        "startLine": 288,
                        "endLine": 289,
                        "references": {
                            "fromFetch": "@nav/api/MainModule.BackendClient.fromFetch",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "fromFetchJson",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Same as  `fetchJson`  but returning an RxJS Observable.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **endPoint**: Target end-point.\n*  **fetchOptions**: <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\nFetch options </a>.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.fromFetchJson",
                    "navPath": "@nav/api/MainModule.BackendClient.fromFetchJson",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "fromFetchJson(\n        endPoint: string,\n        fetchOptions: RequestInit,\n    ): rxjsModuleType.Observable<JSON>",
                        "implementation": "",
                        "startLine": 300,
                        "endLine": 301,
                        "references": {
                            "fromFetchJson": "@nav/api/MainModule.BackendClient.fromFetchJson",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                },
                {
                    "name": "fromFetchText",
                    "documentation": {
                        "sections": [
                            {
                                "content": "Same as  `fetchText`  but returning an RxJS Observable.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            },
                            {
                                "title": "Arguments",
                                "content": "\n*  **endPoint**: Target end-point.\n*  **fetchOptions**: <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\nFetch options </a>.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "arguments",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendClient.fromFetchText",
                    "navPath": "@nav/api/MainModule.BackendClient.fromFetchText",
                    "code": {
                        "filePath": "src/lib/backends.ts",
                        "declaration": "fromFetchText(\n        endPoint: string,\n        fetchOptions: RequestInit,\n    ): rxjsModuleType.Observable<string>",
                        "implementation": "",
                        "startLine": 312,
                        "endLine": 313,
                        "references": {
                            "fromFetchText": "@nav/api/MainModule.BackendClient.fromFetchText",
                            "Observable": "https://rxjs.dev/guide/observable"
                        }
                    },
                    "semantic": {
                        "role": "method",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    }
                }
            ],
            "code": {
                "filePath": "src/lib/backends.ts",
                "declaration": "export interface BackendClient",
                "implementation": "export interface BackendClient {\n    /**\n     * Base URL of the service.\n     */\n    urlBase: string\n\n    /**\n     * Version of the service\n     */\n    version: string\n\n    /**\n     * Relative path of the W3Lab page pointing to the backend.\n     */\n    urlW3Lab: string\n\n    /**\n     * Configuration.\n     */\n    config: {\n        // Build configuration (command line options).\n        build: Record<string, string>\n    }\n\n    /**\n     * The name of the symbol in the global scope pointing to the client.\n     */\n    exportedSymbol: string\n\n    /**\n     * Encapsulating partition Id.\n     */\n    partitionId: string\n\n    /**\n     * Proxy the standard <a target='_blank' href=\"https://developer.mozilla.org/en-US/docs/Web/API/fetch\"> fetch </a>\n     * function.\n     *\n     * @param endPoint Target end-point.\n     * @param fetchOptions <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\n     * Fetch options </a>.\n     */\n    fetch(endPoint: string, fetchOptions: RequestInit): Promise<Response>\n\n    /**\n     * Same as `fetch` with an additional call to `.then((resp) => resp.json())`.\n     *\n     * @param endPoint Target end-point.\n     * @param fetchOptions <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\n     * Fetch options </a>.\n     */\n    fetchJson(endPoint: string, fetchOptions: RequestInit): Promise<JSON>\n\n    /**\n     * Same as `fetch` with an additional call to `.then((resp) => resp.text())`.\n     *\n     * @param endPoint Target end-point.\n     * @param fetchOptions <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\n     * Fetch options </a>.\n     */\n    fetchText(endPoint: string, fetchOptions: RequestInit): Promise<string>\n\n    /**\n     * Same as `fetch` but returning an RxJS Observable.\n     *\n     * @param endPoint Target end-point.\n     * @param fetchOptions <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\n     * Fetch options </a>.\n     */\n    fromFetch(\n        endPoint: string,\n        fetchOptions: RequestInit,\n    ): rxjsModuleType.Observable<Response>\n\n    /**\n     * Same as `fetchJson` but returning an RxJS Observable.\n     *\n     * @param endPoint Target end-point.\n     * @param fetchOptions <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\n     * Fetch options </a>.\n     */\n    fromFetchJson(\n        endPoint: string,\n        fetchOptions: RequestInit,\n    ): rxjsModuleType.Observable<JSON>\n\n    /**\n     * Same as `fetchText` but returning an RxJS Observable.\n     *\n     * @param endPoint Target end-point.\n     * @param fetchOptions <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/RequestInit\">\n     * Fetch options </a>.\n     */\n    fromFetchText(\n        endPoint: string,\n        fetchOptions: RequestInit,\n    ): rxjsModuleType.Observable<string>\n}",
                "startLine": 219,
                "endLine": 317,
                "references": {
                    "BackendClient": "@nav/api/MainModule.BackendClient",
                    "Observable": "https://rxjs.dev/guide/observable"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "BackendConfig",
            "documentation": {
                "sections": [
                    {
                        "content": "Specifies configuration for a backend.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BackendConfig",
            "navPath": "@nav/api/MainModule.BackendConfig",
            "attributes": [
                {
                    "name": "buildArgs",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Arguments regarding the build stage provided as key-value pairs.\n\nThe available keys and values are backend specifics and should be documented by them.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendConfig.buildArgs",
                    "navPath": "@nav/api/MainModule.BackendConfig.buildArgs",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "buildArgs: Record<string, string>",
                        "implementation": "",
                        "startLine": 203,
                        "endLine": 204,
                        "references": {
                            "buildArgs": "@nav/api/MainModule.BackendConfig.buildArgs"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export interface BackendConfig",
                "implementation": "export interface BackendConfig {\n    /**\n     * Arguments regarding the build stage provided as key-value pairs.\n     *\n     * The available keys and values are backend specifics and should be documented by them.\n     */\n    buildArgs: Record<string, string>\n}",
                "startLine": 197,
                "endLine": 205,
                "references": {
                    "BackendConfig": "@nav/api/MainModule.BackendConfig"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "BackendConfiguration",
            "documentation": {
                "sections": [
                    {
                        "content": "Backend configuration, retrieved from w3nest cookie.\nSee  <mkapi-api-link nav=\"@nav/api/MainModule.backendConfiguration\" semantic=\"function\">backendConfiguration</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BackendConfiguration",
            "navPath": "@nav/api/MainModule.BackendConfiguration",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "id of the configuration",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendConfiguration.id",
                    "navPath": "@nav/api/MainModule.BackendConfiguration.id",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "readonly id?: string",
                        "implementation": "",
                        "startLine": 55,
                        "endLine": 56,
                        "references": {
                            "id": "@nav/api/MainModule.BackendConfiguration.id"
                        }
                    }
                },
                {
                    "name": "origin",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Origin of the backend, use empty string for relative resolution",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendConfiguration.origin",
                    "navPath": "@nav/api/MainModule.BackendConfiguration.origin",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "readonly origin: string",
                        "implementation": "",
                        "startLine": 32,
                        "endLine": 33,
                        "references": {
                            "origin": "@nav/api/MainModule.BackendConfiguration.origin"
                        }
                    }
                },
                {
                    "name": "urlLoadingGraph",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Backend's URL to resolve the loading graph",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendConfiguration.urlLoadingGraph",
                    "navPath": "@nav/api/MainModule.BackendConfiguration.urlLoadingGraph",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "readonly urlLoadingGraph: string",
                        "implementation": "",
                        "startLine": 36,
                        "endLine": 37,
                        "references": {
                            "urlLoadingGraph": "@nav/api/MainModule.BackendConfiguration.urlLoadingGraph"
                        }
                    }
                },
                {
                    "name": "urlPyodide",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Backend's URL to resolve pyodide python modules. If not provided, fallback to\n `https://cdn.jsdelivr.net/pyodide/v$VERSION/full`  where $VERSION is the pyodide target version.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendConfiguration.urlPyodide",
                    "navPath": "@nav/api/MainModule.BackendConfiguration.urlPyodide",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "readonly urlPyodide: string",
                        "implementation": "",
                        "startLine": 50,
                        "endLine": 51,
                        "references": {
                            "urlPyodide": "@nav/api/MainModule.BackendConfiguration.urlPyodide"
                        }
                    }
                },
                {
                    "name": "urlPypi",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Backend's URL to resolve pypi python modules. If not provided, fallback to\n `https://pypi.org/` .",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendConfiguration.urlPypi",
                    "navPath": "@nav/api/MainModule.BackendConfiguration.urlPypi",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "readonly urlPypi: string",
                        "implementation": "",
                        "startLine": 45,
                        "endLine": 46,
                        "references": {
                            "urlPypi": "@nav/api/MainModule.BackendConfiguration.urlPypi"
                        }
                    }
                },
                {
                    "name": "urlResource",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Backend's URL used to fetch the raw content of a package",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendConfiguration.urlResource",
                    "navPath": "@nav/api/MainModule.BackendConfiguration.urlResource",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "readonly urlResource: string",
                        "implementation": "",
                        "startLine": 40,
                        "endLine": 41,
                        "references": {
                            "urlResource": "@nav/api/MainModule.BackendConfiguration.urlResource"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/backend-configuration.ts",
                "declaration": "export interface BackendConfiguration",
                "implementation": "export interface BackendConfiguration {\n    /**\n     * Origin of the backend, use empty string for relative resolution\n     */\n    readonly origin: string\n    /**\n     * Backend's URL to resolve the loading graph\n     */\n    readonly urlLoadingGraph: string\n    /**\n     * Backend's URL used to fetch the raw content of a package\n     */\n    readonly urlResource: string\n    /**\n     * Backend's URL to resolve pypi python modules. If not provided, fallback to\n     * `https://pypi.org/`.\n     */\n    readonly urlPypi: string\n    /**\n     * Backend's URL to resolve pyodide python modules. If not provided, fallback to\n     * `https://cdn.jsdelivr.net/pyodide/v$VERSION/full` where $VERSION is the pyodide target version.\n     */\n    readonly urlPyodide: string\n\n    /**\n     * id of the configuration\n     */\n    readonly id?: string\n}",
                "startLine": 28,
                "endLine": 57,
                "references": {
                    "BackendConfiguration": "@nav/api/MainModule.BackendConfiguration"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "BackendInputs",
            "documentation": {
                "sections": [
                    {
                        "content": "Specifies the installation of backends.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BackendInputs",
            "navPath": "@nav/api/MainModule.BackendInputs",
            "attributes": [
                {
                    "name": "configurations",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Configuration of the backend.\n\nA mapping with:\n*  Keys: backends names.\n*  Values: associated configuration.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendInputs.configurations",
                    "navPath": "@nav/api/MainModule.BackendInputs.configurations",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "configurations?: Record<string, BackendConfig>",
                        "implementation": "",
                        "startLine": 221,
                        "endLine": 222,
                        "references": {
                            "configurations": "@nav/api/MainModule.BackendInputs.configurations",
                            "BackendConfig": "@nav/api/MainModule.BackendConfig"
                        }
                    }
                },
                {
                    "name": "modules",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "List of modules to install.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendInputs.modules",
                    "navPath": "@nav/api/MainModule.BackendInputs.modules",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "modules: LightLibraryWithAliasQueryString[]",
                        "implementation": "",
                        "startLine": 213,
                        "endLine": 214,
                        "references": {
                            "modules": "@nav/api/MainModule.BackendInputs.modules"
                        }
                    }
                },
                {
                    "name": "partition",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Partition ID in which the backends are installed.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "BackendInputs.partition",
                    "navPath": "@nav/api/MainModule.BackendInputs.partition",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "partition?: string",
                        "implementation": "",
                        "startLine": 225,
                        "endLine": 226,
                        "references": {
                            "partition": "@nav/api/MainModule.BackendInputs.partition"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export interface BackendInputs",
                "implementation": "export interface BackendInputs {\n    /**\n     * List of modules to install.\n     */\n    modules: LightLibraryWithAliasQueryString[]\n    /**\n     * Configuration of the backend.\n     *\n     * A mapping with:\n     * *  Keys: backends names.\n     * *  Values: associated configuration.\n     */\n    configurations?: Record<string, BackendConfig>\n    /**\n     * Partition ID in which the backends are installed.\n     */\n    partition?: string\n}",
                "startLine": 209,
                "endLine": 227,
                "references": {
                    "BackendInputs": "@nav/api/MainModule.BackendInputs",
                    "BackendConfig": "@nav/api/MainModule.BackendConfig"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CdnEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Base structure for all events.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CdnEvent",
            "navPath": "@nav/api/MainModule.CdnEvent",
            "attributes": [
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's ID.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnEvent.id",
                    "navPath": "@nav/api/MainModule.CdnEvent.id",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "id: string",
                        "implementation": "",
                        "startLine": 209,
                        "endLine": 210,
                        "references": {
                            "id": "@nav/api/MainModule.CdnEvent.id"
                        }
                    }
                },
                {
                    "name": "status",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Event's status.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnEvent.status",
                    "navPath": "@nav/api/MainModule.CdnEvent.status",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "status: EventStatus",
                        "implementation": "",
                        "startLine": 217,
                        "endLine": 218,
                        "references": {
                            "status": "@nav/api/MainModule.CdnEvent.status",
                            "EventStatus": "@nav/api/MainModule.EventStatus"
                        }
                    }
                },
                {
                    "name": "step",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The step.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnEvent.step",
                    "navPath": "@nav/api/MainModule.CdnEvent.step",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "step: EventType",
                        "implementation": "",
                        "startLine": 205,
                        "endLine": 206,
                        "references": {
                            "step": "@nav/api/MainModule.CdnEvent.step"
                        }
                    }
                },
                {
                    "name": "text",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Custom text.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CdnEvent.text",
                    "navPath": "@nav/api/MainModule.CdnEvent.text",
                    "code": {
                        "filePath": "src/lib/events.models.ts",
                        "declaration": "text: string",
                        "implementation": "",
                        "startLine": 213,
                        "endLine": 214,
                        "references": {
                            "text": "@nav/api/MainModule.CdnEvent.text"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export interface CdnEvent",
                "implementation": "export interface CdnEvent {\n    /**\n     * The step.\n     */\n    step: EventType\n    /**\n     * Event's ID.\n     */\n    id: string\n    /**\n     * Custom text.\n     */\n    text: string\n    /**\n     * Event's status.\n     */\n    status: EventStatus\n}",
                "startLine": 201,
                "endLine": 219,
                "references": {
                    "CdnEvent": "@nav/api/MainModule.CdnEvent",
                    "EventStatus": "@nav/api/MainModule.EventStatus",
                    "BackendEvent": "@nav/api/MainModule.BackendEvent",
                    "CdnLoadingGraphErrorEvent": "@nav/api/MainModule.CdnLoadingGraphErrorEvent",
                    "CdnLoadingGraphQueryEvent": "@nav/api/MainModule.CdnLoadingGraphQueryEvent",
                    "CdnLoadingGraphResolvedEvent": "@nav/api/MainModule.CdnLoadingGraphResolvedEvent",
                    "CdnMessageEvent": "@nav/api/MainModule.CdnMessageEvent",
                    "InstallDoneEvent": "@nav/api/MainModule.InstallDoneEvent",
                    "InstallErrorEvent": "@nav/api/MainModule.InstallErrorEvent"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Cookie",
            "documentation": {
                "sections": [
                    {
                        "content": "Cookie model set by W3Nest (either the local server or the remote one).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Cookie",
            "navPath": "@nav/api/MainModule.Cookie",
            "attributes": [
                {
                    "name": "origin",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Server Origin.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Cookie.origin",
                    "navPath": "@nav/api/MainModule.Cookie.origin",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "origin: string",
                        "implementation": "",
                        "startLine": 82,
                        "endLine": 83,
                        "references": {
                            "origin": "@nav/api/MainModule.Cookie.origin"
                        }
                    }
                },
                {
                    "name": "port",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Port (if applicable).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Cookie.port",
                    "navPath": "@nav/api/MainModule.Cookie.port",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "port: number",
                        "implementation": "",
                        "startLine": 78,
                        "endLine": 79,
                        "references": {
                            "port": "@nav/api/MainModule.Cookie.port"
                        }
                    }
                },
                {
                    "name": "type",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "*   `local`  : W3Nest local server\n*   `remote`  : W3Nest remote server ( `https://w3nest.org` ).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Cookie.type",
                    "navPath": "@nav/api/MainModule.Cookie.type",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "type: 'local' | 'remote'",
                        "implementation": "",
                        "startLine": 66,
                        "endLine": 67,
                        "references": {
                            "type": "@nav/api/MainModule.Cookie.type"
                        }
                    }
                },
                {
                    "name": "webpm",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "WebPM paths definition.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Cookie.webpm",
                    "navPath": "@nav/api/MainModule.Cookie.webpm",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "webpm: {\n        pathLoadingGraph: string\n        pathResource: string\n        pathPyodide: string\n        pathPypi: string\n        pathBackendInstall: string\n        pathBackendUninstall: string\n    }",
                        "implementation": "",
                        "startLine": 87,
                        "endLine": 88,
                        "references": {
                            "webpm": "@nav/api/MainModule.Cookie.webpm"
                        }
                    }
                },
                {
                    "name": "wsDataUrl",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Web Socket URL for data.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Cookie.wsDataUrl",
                    "navPath": "@nav/api/MainModule.Cookie.wsDataUrl",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "wsDataUrl: string",
                        "implementation": "",
                        "startLine": 70,
                        "endLine": 71,
                        "references": {
                            "wsDataUrl": "@nav/api/MainModule.Cookie.wsDataUrl"
                        }
                    }
                },
                {
                    "name": "wsLogsUrl",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Web Socket URL for logs.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "Cookie.wsLogsUrl",
                    "navPath": "@nav/api/MainModule.Cookie.wsLogsUrl",
                    "code": {
                        "filePath": "src/lib/backend-configuration.ts",
                        "declaration": "wsLogsUrl: string",
                        "implementation": "",
                        "startLine": 74,
                        "endLine": 75,
                        "references": {
                            "wsLogsUrl": "@nav/api/MainModule.Cookie.wsLogsUrl"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/backend-configuration.ts",
                "declaration": "export interface Cookie",
                "implementation": "export interface Cookie {\n    /**\n     * *  `local` : W3Nest local server\n     * *  `remote` : W3Nest remote server (`https://w3nest.org`).\n     */\n    type: 'local' | 'remote'\n    /**\n     * Web Socket URL for data.\n     */\n    wsDataUrl: string\n    /**\n     * Web Socket URL for logs.\n     */\n    wsLogsUrl: string\n    /**\n     * Port (if applicable).\n     */\n    port: number\n    /**\n     * Server Origin.\n     */\n    origin: string\n\n    /**\n     * WebPM paths definition.\n     */\n    webpm: {\n        pathLoadingGraph: string\n        pathResource: string\n        pathPyodide: string\n        pathPypi: string\n        pathBackendInstall: string\n        pathBackendUninstall: string\n    }\n}",
                "startLine": 61,
                "endLine": 96,
                "references": {
                    "Cookie": "@nav/api/MainModule.Cookie"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CssSideEffectCallbackArgument",
            "documentation": {
                "sections": [
                    {
                        "content": "Argument type for  <mkapi-api-link nav=\"@nav/api/MainModule.CssSideEffectCallback\" semantic=\"type-alias\">CssSideEffectCallback</mkapi-api-link>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CssSideEffectCallbackArgument",
            "navPath": "@nav/api/MainModule.CssSideEffectCallbackArgument",
            "attributes": [
                {
                    "name": "htmlLinkElement",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "HTML script element added",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssSideEffectCallbackArgument.htmlLinkElement",
                    "navPath": "@nav/api/MainModule.CssSideEffectCallbackArgument.htmlLinkElement",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "htmlLinkElement: HTMLLinkElement",
                        "implementation": "",
                        "startLine": 478,
                        "endLine": 479,
                        "references": {
                            "htmlLinkElement": "@nav/api/MainModule.CssSideEffectCallbackArgument.htmlLinkElement"
                        }
                    }
                },
                {
                    "name": "origin",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Origin of the style-sheet",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssSideEffectCallbackArgument.origin",
                    "navPath": "@nav/api/MainModule.CssSideEffectCallbackArgument.origin",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "origin: {\n        moduleName: string\n        version: string\n        assetId: string\n        url: string\n    }",
                        "implementation": "",
                        "startLine": 468,
                        "endLine": 469,
                        "references": {
                            "origin": "@nav/api/MainModule.CssSideEffectCallbackArgument.origin"
                        }
                    }
                },
                {
                    "name": "renderingWindow",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Window instance in which the HTML link element has been added",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "CssSideEffectCallbackArgument.renderingWindow",
                    "navPath": "@nav/api/MainModule.CssSideEffectCallbackArgument.renderingWindow",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "renderingWindow: Window",
                        "implementation": "",
                        "startLine": 482,
                        "endLine": 483,
                        "references": {
                            "renderingWindow": "@nav/api/MainModule.CssSideEffectCallbackArgument.renderingWindow"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export interface CssSideEffectCallbackArgument",
                "implementation": "export interface CssSideEffectCallbackArgument {\n    /**\n     * Origin of the style-sheet\n     */\n    origin: {\n        moduleName: string\n        version: string\n        assetId: string\n        url: string\n    }\n\n    /**\n     * HTML script element added\n     */\n    htmlLinkElement: HTMLLinkElement\n    /**\n     * Window instance in which the HTML link element has been added\n     */\n    renderingWindow: Window\n}",
                "startLine": 464,
                "endLine": 484,
                "references": {
                    "CssSideEffectCallbackArgument": "@nav/api/MainModule.CssSideEffectCallbackArgument"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "EsmInputs",
            "documentation": {
                "sections": [
                    {
                        "content": "Specifies the installation of ESM modules.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "EsmInputs",
            "navPath": "@nav/api/MainModule.EsmInputs",
            "attributes": [
                {
                    "name": "aliases",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Provide aliases to exported symbols name of module.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EsmInputs.aliases",
                    "navPath": "@nav/api/MainModule.EsmInputs.aliases",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "aliases?: Record<string, string | ((Window) => unknown)>",
                        "implementation": "",
                        "startLine": 190,
                        "endLine": 191,
                        "references": {
                            "aliases": "@nav/api/MainModule.EsmInputs.aliases"
                        }
                    }
                },
                {
                    "name": "modules",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "List of modules to install.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EsmInputs.modules",
                    "navPath": "@nav/api/MainModule.EsmInputs.modules",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "modules: LightLibraryWithAliasQueryString[]",
                        "implementation": "",
                        "startLine": 136,
                        "endLine": 137,
                        "references": {
                            "modules": "@nav/api/MainModule.EsmInputs.modules",
                            "LightLibraryWithAliasQueryString": "@nav/api/MainModule.LightLibraryWithAliasQueryString",
                            "LightLibraryQueryString": "@nav/api/MainModule.LightLibraryQueryString",
                            "PyModule": "@nav/api/MainModule.PyModule"
                        }
                    }
                },
                {
                    "name": "modulesSideEffects",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Specify side effects to execute when modules are installed.\n\nThe key is in the form  `{libraryName}#{semver}` :\nany module installed matching some keys will trigger execution\nof associated side effects.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EsmInputs.modulesSideEffects",
                    "navPath": "@nav/api/MainModule.EsmInputs.modulesSideEffects",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "modulesSideEffects?: Record<\n        LightLibraryQueryString,\n        ModuleSideEffectCallback\n    >",
                        "implementation": "",
                        "startLine": 182,
                        "endLine": 183,
                        "references": {
                            "modulesSideEffects": "@nav/api/MainModule.EsmInputs.modulesSideEffects",
                            "ModuleSideEffectCallback": "@nav/api/MainModule.ModuleSideEffectCallback",
                            "LightLibraryWithAliasQueryString": "@nav/api/MainModule.LightLibraryWithAliasQueryString",
                            "LightLibraryQueryString": "@nav/api/MainModule.LightLibraryQueryString",
                            "PyModule": "@nav/api/MainModule.PyModule"
                        }
                    }
                },
                {
                    "name": "scripts",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Specifies standalone scripts to install in the browser.\nBy opposition to  `modules` , a script is installed as a standalone element:\nthere is no direct or indirect dependencies' installation triggered.\n\nThey are installed after all modules have been installed.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EsmInputs.scripts",
                    "navPath": "@nav/api/MainModule.EsmInputs.scripts",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "scripts?: ScriptInput[]",
                        "implementation": "",
                        "startLine": 145,
                        "endLine": 146,
                        "references": {
                            "scripts": "@nav/api/MainModule.EsmInputs.scripts",
                            "ScriptInput": "@nav/api/MainModule.ScriptInput"
                        }
                    }
                },
                {
                    "name": "usingDependencies",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Override the 'natural' version used for some libraries coming from the dependency graph when resolving\nthe installation. Items are provided in the form  <mkapi-api-link nav=\"@nav/api/MainModule.LightLibraryQueryString\" semantic=\"type-alias\">LightLibraryQueryString</mkapi-api-link> .\n\nWhenever a library is required in the dependency graph, the version(s) will be replaced by the (only) one\ncoming from the relevant element (if any).\nThis in turn disables multiple versions installation for the provided library\n\nHere is a fictive example of installing a module  `@youwol/fictive-package`  with 2 versions  `0.x`  &  `1.x` :\n*  the version  `0.x`  linked to  `rxjs#6.x` \n*  the version  `1.x`  linked to  `rxjs#7.x` \n\nWhen executed, the following snippet overrides the actual versions resolution of rxjs and always uses  `rxjs#6.5.5` \n(which will probably break at installation of  `@youwol/fictive-package#1.x`  as the two versions of RxJS are not\ncompatible).\n ```\nimport {install} from `@youwol/webpm-client`\n\nawait install({\n    esm:{\n        modules: [`@youwol/fictive-package#0.x`, `@youwol/fictive-package#1.x`],\n        usingDependencies: ['rxjs#6.5.5']\n    }\n})\n```",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "EsmInputs.usingDependencies",
                    "navPath": "@nav/api/MainModule.EsmInputs.usingDependencies",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "usingDependencies?: LightLibraryQueryString[]",
                        "implementation": "",
                        "startLine": 173,
                        "endLine": 174,
                        "references": {
                            "usingDependencies": "@nav/api/MainModule.EsmInputs.usingDependencies",
                            "LightLibraryWithAliasQueryString": "@nav/api/MainModule.LightLibraryWithAliasQueryString",
                            "LightLibraryQueryString": "@nav/api/MainModule.LightLibraryQueryString",
                            "PyModule": "@nav/api/MainModule.PyModule"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export interface EsmInputs",
                "implementation": "export interface EsmInputs {\n    /**\n     * List of modules to install.\n     */\n    modules: LightLibraryWithAliasQueryString[]\n\n    /**\n     * Specifies standalone scripts to install in the browser.\n     * By opposition to `modules`, a script is installed as a standalone element:\n     * there is no direct or indirect dependencies' installation triggered.\n     *\n     * They are installed after all modules have been installed.\n     */\n    scripts?: ScriptInput[]\n\n    /**\n     * Override the 'natural' version used for some libraries coming from the dependency graph when resolving\n     * the installation. Items are provided in the form {@link LightLibraryQueryString}.\n     *\n     * Whenever a library is required in the dependency graph, the version(s) will be replaced by the (only) one\n     * coming from the relevant element (if any).\n     * This in turn disables multiple versions installation for the provided library\n     *\n     * Here is a fictive example of installing a module `@youwol/fictive-package` with 2 versions `0.x` & `1.x`:\n     * *  the version `0.x` linked to `rxjs#6.x`\n     * *  the version `1.x` linked to `rxjs#7.x`\n     *\n     * When executed, the following snippet overrides the actual versions resolution of rxjs and always uses `rxjs#6.5.5`\n     * (which will probably break at installation of `@youwol/fictive-package#1.x` as the two versions of RxJS are not\n     * compatible).\n     * ```\n     * import {install} from `@youwol/webpm-client`\n     *\n     * await install({\n     *     esm:{\n     *         modules: [`@youwol/fictive-package#0.x`, `@youwol/fictive-package#1.x`],\n     *         usingDependencies: ['rxjs#6.5.5']\n     *     }\n     * })\n     * ```\n     */\n    usingDependencies?: LightLibraryQueryString[]\n    /**\n     * Specify side effects to execute when modules are installed.\n     *\n     * The key is in the form `{libraryName}#{semver}`:\n     * any module installed matching some keys will trigger execution\n     * of associated side effects.\n     *\n     */\n    modulesSideEffects?: Record<\n        LightLibraryQueryString,\n        ModuleSideEffectCallback\n    >\n\n    /**\n     * Provide aliases to exported symbols name of module.\n     */\n    aliases?: Record<string, string | ((Window) => unknown)>\n}",
                "startLine": 132,
                "endLine": 192,
                "references": {
                    "EsmInputs": "@nav/api/MainModule.EsmInputs",
                    "ModuleSideEffectCallback": "@nav/api/MainModule.ModuleSideEffectCallback",
                    "ScriptInput": "@nav/api/MainModule.ScriptInput"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "FrontendConfiguration",
            "documentation": {
                "sections": [
                    {
                        "content": "Defines the client-side configuration.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "FrontendConfiguration",
            "navPath": "@nav/api/MainModule.FrontendConfiguration",
            "attributes": [
                {
                    "name": "crossOrigin",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "If set, all  `<script>`  elements inserted by the client have  `crossorigin`  attribute set to this value.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "FrontendConfiguration.crossOrigin",
                    "navPath": "@nav/api/MainModule.FrontendConfiguration.crossOrigin",
                    "code": {
                        "filePath": "src/lib/frontend-configuration.ts",
                        "declaration": "readonly crossOrigin?: string",
                        "implementation": "",
                        "startLine": 8,
                        "endLine": 9,
                        "references": {
                            "crossOrigin": "@nav/api/MainModule.FrontendConfiguration.crossOrigin"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/frontend-configuration.ts",
                "declaration": "export interface FrontendConfiguration",
                "implementation": "export interface FrontendConfiguration {\n    /**\n     * If set, all `<script>` elements inserted by the client have `crossorigin` attribute set to this value.\n     */\n    readonly crossOrigin?: string\n}",
                "startLine": 4,
                "endLine": 10,
                "references": {
                    "FrontendConfiguration": "@nav/api/MainModule.FrontendConfiguration"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "InstallInputs",
            "documentation": {
                "sections": [
                    {
                        "content": "Specifies the installation of various components in the environment.\n\nThis is the input for the method  <mkapi-api-link nav=\"@nav/api/MainModule.install\" semantic=\"function\">install</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "InstallInputs",
            "navPath": "@nav/api/MainModule.InstallInputs",
            "attributes": [
                {
                    "name": "backends",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Specifies the backend modules to install, using one of the following:\n*   <mkapi-api-link nav=\"@nav/api/MainModule.LightLibraryWithAliasQueryString\" semantic=\"type-alias\">LightLibraryWithAliasQueryString</mkapi-api-link>  for a simpler specification with limited control.\n*   <mkapi-api-link nav=\"@nav/api/MainModule.EsmInputs\" semantic=\"interface\">EsmInputs</mkapi-api-link>  for a comprehensive specification.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallInputs.backends",
                    "navPath": "@nav/api/MainModule.InstallInputs.backends",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "backends?: LightLibraryWithAliasQueryString[] | BackendInputs",
                        "implementation": "",
                        "startLine": 94,
                        "endLine": 95,
                        "references": {
                            "backends": "@nav/api/MainModule.InstallInputs.backends",
                            "BackendInputs": "@nav/api/MainModule.BackendInputs",
                            "LightLibraryWithAliasQueryString": "@nav/api/MainModule.LightLibraryWithAliasQueryString",
                            "LightLibraryQueryString": "@nav/api/MainModule.LightLibraryQueryString",
                            "PyModule": "@nav/api/MainModule.PyModule"
                        }
                    }
                },
                {
                    "name": "css",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Specify a list of stylesheets to install.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallInputs.css",
                    "navPath": "@nav/api/MainModule.InstallInputs.css",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "css?: CssInput[]",
                        "implementation": "",
                        "startLine": 106,
                        "endLine": 107,
                        "references": {
                            "css": "@nav/api/MainModule.InstallInputs.css",
                            "CssInput": "@nav/api/MainModule.CssInput"
                        }
                    }
                },
                {
                    "name": "displayLoadingScreen",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "If  `true` : loading screen is displayed and cover the all screen\n\nFor a granular control of the loading screen display see  <mkapi-api-link nav=\"@nav/api/MainModule.LoadingScreenView\" semantic=\"class\">LoadingScreenView</mkapi-api-link>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallInputs.displayLoadingScreen",
                    "navPath": "@nav/api/MainModule.InstallInputs.displayLoadingScreen",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "displayLoadingScreen?: boolean",
                        "implementation": "",
                        "startLine": 127,
                        "endLine": 128,
                        "references": {
                            "displayLoadingScreen": "@nav/api/MainModule.InstallInputs.displayLoadingScreen"
                        }
                    }
                },
                {
                    "name": "esm",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Specifies the ESM modules to install, using one of the following:\n*   <mkapi-api-link nav=\"@nav/api/MainModule.LightLibraryWithAliasQueryString\" semantic=\"type-alias\">LightLibraryWithAliasQueryString</mkapi-api-link>  for a simpler specification with limited control.\n*   <mkapi-api-link nav=\"@nav/api/MainModule.EsmInputs\" semantic=\"interface\">EsmInputs</mkapi-api-link>  for a comprehensive specification.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallInputs.esm",
                    "navPath": "@nav/api/MainModule.InstallInputs.esm",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "esm?: LightLibraryWithAliasQueryString[] | EsmInputs",
                        "implementation": "",
                        "startLine": 87,
                        "endLine": 88,
                        "references": {
                            "esm": "@nav/api/MainModule.InstallInputs.esm",
                            "EsmInputs": "@nav/api/MainModule.EsmInputs",
                            "LightLibraryWithAliasQueryString": "@nav/api/MainModule.LightLibraryWithAliasQueryString",
                            "LightLibraryQueryString": "@nav/api/MainModule.LightLibraryQueryString",
                            "PyModule": "@nav/api/MainModule.PyModule"
                        }
                    }
                },
                {
                    "name": "executingWindow",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Window global in which installation occurs. If not provided,  `window`  is used.\n\nIf the client is running in a Web Worker, it is the worker's global scope.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallInputs.executingWindow",
                    "navPath": "@nav/api/MainModule.InstallInputs.executingWindow",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "executingWindow?: WindowOrWorkerGlobalScope",
                        "implementation": "",
                        "startLine": 113,
                        "endLine": 114,
                        "references": {
                            "executingWindow": "@nav/api/MainModule.InstallInputs.executingWindow"
                        }
                    }
                },
                {
                    "name": "onEvent",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "If provided, any  <mkapi-api-link nav=\"@nav/api/MainModule.CdnEvent\" semantic=\"interface\">CdnEvent</mkapi-api-link>  emitted are forwarded to this callback.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallInputs.onEvent",
                    "navPath": "@nav/api/MainModule.InstallInputs.onEvent",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "onEvent?: (event: CdnEvent) => void",
                        "implementation": "",
                        "startLine": 120,
                        "endLine": 121,
                        "references": {
                            "onEvent": "@nav/api/MainModule.InstallInputs.onEvent",
                            "CdnEvent": "@nav/api/MainModule.CdnEvent"
                        }
                    }
                },
                {
                    "name": "pyodide",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Specifies the pyodide (python running in the browser) modules to install, using one of the following:\n*   <mkapi-api-link nav=\"@nav/api/MainModule.PyModule\" semantic=\"type-alias\">PyModule</mkapi-api-link>  for a simpler specification with limited control.\n*   <mkapi-api-link nav=\"@nav/api/MainModule.PyodideInputs\" semantic=\"interface\">PyodideInputs</mkapi-api-link>  for a comprehensive specification.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "InstallInputs.pyodide",
                    "navPath": "@nav/api/MainModule.InstallInputs.pyodide",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "pyodide?: PyModule[] | PyodideInputs",
                        "implementation": "",
                        "startLine": 101,
                        "endLine": 102,
                        "references": {
                            "pyodide": "@nav/api/MainModule.InstallInputs.pyodide",
                            "PyodideInputs": "@nav/api/MainModule.PyodideInputs",
                            "LightLibraryWithAliasQueryString": "@nav/api/MainModule.LightLibraryWithAliasQueryString",
                            "LightLibraryQueryString": "@nav/api/MainModule.LightLibraryQueryString",
                            "PyModule": "@nav/api/MainModule.PyModule"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export interface InstallInputs",
                "implementation": "export interface InstallInputs {\n    /**\n     * Specifies the ESM modules to install, using one of the following:\n     * *  {@link LightLibraryWithAliasQueryString} for a simpler specification with limited control.\n     * *  {@link EsmInputs} for a comprehensive specification.\n     */\n    esm?: LightLibraryWithAliasQueryString[] | EsmInputs\n\n    /**\n     * Specifies the backend modules to install, using one of the following:\n     * *  {@link LightLibraryWithAliasQueryString} for a simpler specification with limited control.\n     * *  {@link EsmInputs} for a comprehensive specification.\n     */\n    backends?: LightLibraryWithAliasQueryString[] | BackendInputs\n\n    /**\n     * Specifies the pyodide (python running in the browser) modules to install, using one of the following:\n     * *  {@link PyModule} for a simpler specification with limited control.\n     * *  {@link PyodideInputs} for a comprehensive specification.\n     */\n    pyodide?: PyModule[] | PyodideInputs\n\n    /**\n     * Specify a list of stylesheets to install.\n     */\n    css?: CssInput[]\n\n    /**\n     * Window global in which installation occurs. If not provided, `window` is used.\n     *\n     * If the client is running in a Web Worker, it is the worker's global scope.\n     */\n    executingWindow?: WindowOrWorkerGlobalScope\n\n    /**\n     * If provided, any {@link CdnEvent} emitted are forwarded to this callback.\n     *\n     * @param event event emitted\n     */\n    onEvent?: (event: CdnEvent) => void\n\n    /**\n     * If `true`: loading screen is displayed and cover the all screen\n     *\n     * For a granular control of the loading screen display see {@link LoadingScreenView}\n     */\n    displayLoadingScreen?: boolean\n}",
                "startLine": 81,
                "endLine": 129,
                "references": {
                    "InstallInputs": "@nav/api/MainModule.InstallInputs",
                    "BackendInputs": "@nav/api/MainModule.BackendInputs",
                    "CssInput": "@nav/api/MainModule.CssInput",
                    "EsmInputs": "@nav/api/MainModule.EsmInputs",
                    "CdnEvent": "@nav/api/MainModule.CdnEvent",
                    "PyodideInputs": "@nav/api/MainModule.PyodideInputs"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LoadingGraph",
            "documentation": {
                "sections": [
                    {
                        "content": "Provides necessary information to correctly install & link a set of resources.\nIt serves a purpose similar to the usual [lockFiles](https://developerexperience.io/articles/lockfile)\nfound in packages managers.\n\nLoading graphs can be:\n *  retrieved ( <mkapi-api-link nav=\"@nav/api/MainModule.queryLoadingGraph\" semantic=\"function\">queryLoadingGraph</mkapi-api-link> )\n *  used to import runtimes ( <mkapi-api-link nav=\"@nav/api/MainModule.installLoadingGraph\" semantic=\"function\">installLoadingGraph</mkapi-api-link> )",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LoadingGraph",
            "navPath": "@nav/api/MainModule.LoadingGraph",
            "attributes": [
                {
                    "name": "definition",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "List of javascript libraries to fetch by batch:\n\n*   `definition[i]`  defines a batch of libraries that can be fetched in any order (or at the same time), provided\nthat all the libraries for the batches  `j<i`  have already been fetched\n*   `definition[i][j]`  defines the j'th library for the batch i:\na tuple of [ `id` ,  `cdn-url` ] where  `id`  is the asset id and  `cdn-url`  the associated URL",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingGraph.definition",
                    "navPath": "@nav/api/MainModule.LoadingGraph.definition",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "definition: [string, string][][]",
                        "implementation": "",
                        "startLine": 603,
                        "endLine": 604,
                        "references": {
                            "definition": "@nav/api/MainModule.LoadingGraph.definition"
                        }
                    }
                },
                {
                    "name": "graphType",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Type of the graph (versioning to be able to change the fetching mechanism)",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingGraph.graphType",
                    "navPath": "@nav/api/MainModule.LoadingGraph.graphType",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "graphType: string",
                        "implementation": "",
                        "startLine": 614,
                        "endLine": 615,
                        "references": {
                            "graphType": "@nav/api/MainModule.LoadingGraph.graphType"
                        }
                    }
                },
                {
                    "name": "lock",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Describes the libraries included in the loading graph",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingGraph.lock",
                    "navPath": "@nav/api/MainModule.LoadingGraph.lock",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "lock: Library[]",
                        "implementation": "",
                        "startLine": 609,
                        "endLine": 610,
                        "references": {
                            "lock": "@nav/api/MainModule.LoadingGraph.lock",
                            "Library": "@nav/api/MainModule.Library"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export interface LoadingGraph",
                "implementation": "export interface LoadingGraph {\n    /**\n     *\n     * List of javascript libraries to fetch by batch:\n     *\n     * *  `definition[i]` defines a batch of libraries that can be fetched in any order (or at the same time), provided\n     * that all the libraries for the batches `j<i` have already been fetched\n     * *  `definition[i][j]` defines the j'th library for the batch i:\n     * a tuple of [`id`, `cdn-url`] where `id` is the asset id and `cdn-url` the associated URL\n     */\n    definition: [string, string][][]\n\n    /**\n     *\n     * Describes the libraries included in the loading graph\n     */\n    lock: Library[]\n\n    /**\n     * Type of the graph (versioning to be able to change the fetching mechanism)\n     */\n    graphType: string\n}",
                "startLine": 593,
                "endLine": 616,
                "references": {
                    "LoadingGraph": "@nav/api/MainModule.LoadingGraph",
                    "Library": "@nav/api/MainModule.Library"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LoadingScreenOptions",
            "documentation": {
                "sections": [
                    {
                        "content": "Specify loading screen options, see  <mkapi-api-link nav=\"@nav/api/MainModule.LoadingScreenView\" semantic=\"class\">LoadingScreenView</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LoadingScreenOptions",
            "navPath": "@nav/api/MainModule.LoadingScreenOptions",
            "attributes": [
                {
                    "name": "container",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "container in which the loading screen's HTMLDivElement is appended\n(when calling  <mkapi-api-link nav=\"@nav/api/MainModule.LoadingScreenView.render\" semantic=\"method\">LoadingScreenView.render</mkapi-api-link> ).",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingScreenOptions.container",
                    "navPath": "@nav/api/MainModule.LoadingScreenOptions.container",
                    "code": {
                        "filePath": "src/lib/loader.view.ts",
                        "declaration": "container?: HTMLElement",
                        "implementation": "",
                        "startLine": 24,
                        "endLine": 25,
                        "references": {
                            "container": "@nav/api/MainModule.LoadingScreenOptions.container"
                        }
                    }
                },
                {
                    "name": "fadingTimeout",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "fading timeout",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingScreenOptions.fadingTimeout",
                    "navPath": "@nav/api/MainModule.LoadingScreenOptions.fadingTimeout",
                    "code": {
                        "filePath": "src/lib/loader.view.ts",
                        "declaration": "fadingTimeout?: number",
                        "implementation": "",
                        "startLine": 44,
                        "endLine": 45,
                        "references": {
                            "fadingTimeout": "@nav/api/MainModule.LoadingScreenOptions.fadingTimeout"
                        }
                    }
                },
                {
                    "name": "id",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "id of the loading screen's HTMLDivElement wrapper",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingScreenOptions.id",
                    "navPath": "@nav/api/MainModule.LoadingScreenOptions.id",
                    "code": {
                        "filePath": "src/lib/loader.view.ts",
                        "declaration": "id?: string",
                        "implementation": "",
                        "startLine": 29,
                        "endLine": 30,
                        "references": {
                            "id": "@nav/api/MainModule.LoadingScreenOptions.id"
                        }
                    }
                },
                {
                    "name": "logo",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "innerHTML definition of the logo",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingScreenOptions.logo",
                    "navPath": "@nav/api/MainModule.LoadingScreenOptions.logo",
                    "code": {
                        "filePath": "src/lib/loader.view.ts",
                        "declaration": "logo?: string",
                        "implementation": "",
                        "startLine": 34,
                        "endLine": 35,
                        "references": {
                            "logo": "@nav/api/MainModule.LoadingScreenOptions.logo"
                        }
                    }
                },
                {
                    "name": "wrapperStyle",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "style to apply on the loading screen's HTMLDivElement wrapper",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "LoadingScreenOptions.wrapperStyle",
                    "navPath": "@nav/api/MainModule.LoadingScreenOptions.wrapperStyle",
                    "code": {
                        "filePath": "src/lib/loader.view.ts",
                        "declaration": "wrapperStyle?: Record<string, string>",
                        "implementation": "",
                        "startLine": 39,
                        "endLine": 40,
                        "references": {
                            "wrapperStyle": "@nav/api/MainModule.LoadingScreenOptions.wrapperStyle"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/loader.view.ts",
                "declaration": "export interface LoadingScreenOptions",
                "implementation": "export interface LoadingScreenOptions {\n    /**\n     * container in which the loading screen's HTMLDivElement is appended\n     * (when calling {@link LoadingScreenView.render}).\n     */\n    container?: HTMLElement\n\n    /**\n     * id of the loading screen's HTMLDivElement wrapper\n     */\n    id?: string\n\n    /**\n     * innerHTML definition of the logo\n     */\n    logo?: string\n\n    /**\n     * style to apply on the loading screen's HTMLDivElement wrapper\n     */\n    wrapperStyle?: Record<string, string>\n\n    /**\n     * fading timeout\n     */\n    fadingTimeout?: number\n}",
                "startLine": 19,
                "endLine": 46,
                "references": {
                    "LoadingScreenOptions": "@nav/api/MainModule.LoadingScreenOptions",
                    "DefaultLoadingScreenOptions": "@nav/api/MainModule.DefaultLoadingScreenOptions"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ModuleSideEffectCallbackArgument",
            "documentation": {
                "sections": [
                    {
                        "content": "Argument type for  <mkapi-api-link nav=\"@nav/api/MainModule.ModuleSideEffectCallback\" semantic=\"type-alias\">ModuleSideEffectCallback</mkapi-api-link>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ModuleSideEffectCallbackArgument",
            "navPath": "@nav/api/MainModule.ModuleSideEffectCallbackArgument",
            "attributes": [
                {
                    "name": "executingWindow",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Window instance in which the HTML script element has been added",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ModuleSideEffectCallbackArgument.executingWindow",
                    "navPath": "@nav/api/MainModule.ModuleSideEffectCallbackArgument.executingWindow",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "executingWindow: WindowOrWorkerGlobalScope",
                        "implementation": "",
                        "startLine": 451,
                        "endLine": 452,
                        "references": {
                            "executingWindow": "@nav/api/MainModule.ModuleSideEffectCallbackArgument.executingWindow"
                        }
                    }
                },
                {
                    "name": "htmlScriptElement",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "HTML script element added",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ModuleSideEffectCallbackArgument.htmlScriptElement",
                    "navPath": "@nav/api/MainModule.ModuleSideEffectCallbackArgument.htmlScriptElement",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "htmlScriptElement?: HTMLScriptElement",
                        "implementation": "",
                        "startLine": 447,
                        "endLine": 448,
                        "references": {
                            "htmlScriptElement": "@nav/api/MainModule.ModuleSideEffectCallbackArgument.htmlScriptElement"
                        }
                    }
                },
                {
                    "name": "module",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The installed module",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ModuleSideEffectCallbackArgument.module",
                    "navPath": "@nav/api/MainModule.ModuleSideEffectCallbackArgument.module",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "module: unknown",
                        "implementation": "",
                        "startLine": 439,
                        "endLine": 440,
                        "references": {
                            "module": "@nav/api/MainModule.ModuleSideEffectCallbackArgument.module"
                        }
                    }
                },
                {
                    "name": "origin",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Origin of the module",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ModuleSideEffectCallbackArgument.origin",
                    "navPath": "@nav/api/MainModule.ModuleSideEffectCallbackArgument.origin",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "origin: FetchedScript",
                        "implementation": "",
                        "startLine": 443,
                        "endLine": 444,
                        "references": {
                            "origin": "@nav/api/MainModule.ModuleSideEffectCallbackArgument.origin"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export interface ModuleSideEffectCallbackArgument",
                "implementation": "export interface ModuleSideEffectCallbackArgument {\n    /**\n     * The installed module\n     */\n    module: unknown\n    /**\n     * Origin of the module\n     */\n    origin: FetchedScript\n    /**\n     * HTML script element added\n     */\n    htmlScriptElement?: HTMLScriptElement\n    /**\n     * Window instance in which the HTML script element has been added\n     */\n    executingWindow: WindowOrWorkerGlobalScope\n}",
                "startLine": 435,
                "endLine": 453,
                "references": {
                    "ModuleSideEffectCallbackArgument": "@nav/api/MainModule.ModuleSideEffectCallbackArgument"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyodideInputs",
            "documentation": {
                "sections": [
                    {
                        "content": "Configuration options for installing the Pyodide runtime environment.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyodideInputs",
            "navPath": "@nav/api/MainModule.PyodideInputs",
            "attributes": [
                {
                    "name": "indexUrl",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The index URL used to fetch Pyodide and its ported packages.\n\nIf omitted, the  `jsDelivr`  CDN is used.\nIf a custom URL is provided, any occurrence of the placeholder  `$VERSION`  will be replaced\nwith the value specified in  <mkapi-api-link nav=\"@nav/api/MainModule.PyodideInputs.version\" semantic=\"attribute\">PyodideInputs.version</mkapi-api-link> .\n\n<note level=\"hint\">\nIf omitted and serving your application via the W3Nest local server, the indexUrl targets\nthe proxy  `/python/pyodide/$VERSION` . This configuration allows resources to be cached locally on the\nuser's hard drive, while missing resources are fetched from the  `jsDelivr`  CDN.\n</note>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyodideInputs.indexUrl",
                    "navPath": "@nav/api/MainModule.PyodideInputs.indexUrl",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "indexUrl?: string",
                        "implementation": "",
                        "startLine": 263,
                        "endLine": 264,
                        "references": {
                            "indexUrl": "@nav/api/MainModule.PyodideInputs.indexUrl"
                        }
                    }
                },
                {
                    "name": "modules",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "An array of Python modules to install.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyodideInputs.modules",
                    "navPath": "@nav/api/MainModule.PyodideInputs.modules",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "modules?: PyModule[]",
                        "implementation": "",
                        "startLine": 246,
                        "endLine": 247,
                        "references": {
                            "modules": "@nav/api/MainModule.PyodideInputs.modules",
                            "LightLibraryWithAliasQueryString": "@nav/api/MainModule.LightLibraryWithAliasQueryString",
                            "LightLibraryQueryString": "@nav/api/MainModule.LightLibraryQueryString",
                            "PyModule": "@nav/api/MainModule.PyModule"
                        }
                    }
                },
                {
                    "name": "version",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "The target version of Pyodide (specified as a plain string, not semver).\n\nIf omitted, the latest release tag is automatically fetched from:\n `https://api.github.com/repos/pyodide/pyodide/releases/latest` .\n\n<note level=\"warning\">\nOnly one Pyodide version can be installed at a time.\n</note>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "PyodideInputs.version",
                    "navPath": "@nav/api/MainModule.PyodideInputs.version",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "version?: string",
                        "implementation": "",
                        "startLine": 242,
                        "endLine": 243,
                        "references": {
                            "version": "@nav/api/MainModule.PyodideInputs.version"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export interface PyodideInputs",
                "implementation": "export interface PyodideInputs {\n    /**\n     * The target version of Pyodide (specified as a plain string, not semver).\n     *\n     * If omitted, the latest release tag is automatically fetched from:\n     * `https://api.github.com/repos/pyodide/pyodide/releases/latest`.\n     *\n     * <note level=\"warning\">\n     * Only one Pyodide version can be installed at a time.\n     * </note>\n     */\n    version?: string\n    /**\n     * An array of Python modules to install.\n     */\n    modules?: PyModule[]\n\n    pyodideAlias?: string\n\n    /**\n     * The index URL used to fetch Pyodide and its ported packages.\n     *\n     * If omitted, the `jsDelivr` CDN is used.\n     * If a custom URL is provided, any occurrence of the placeholder `$VERSION` will be replaced\n     * with the value specified in {@link PyodideInputs.version}.\n     *\n     * <note level=\"hint\">\n     * If omitted and serving your application via the W3Nest local server, the indexUrl targets\n     * the proxy `/python/pyodide/$VERSION`. This configuration allows resources to be cached locally on the\n     * user's hard drive, while missing resources are fetched from the `jsDelivr` CDN.\n     * </note>\n     */\n    indexUrl?: string\n}",
                "startLine": 231,
                "endLine": 265,
                "references": {
                    "PyodideInputs": "@nav/api/MainModule.PyodideInputs"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "QueryLoadingGraphInputs",
            "documentation": {
                "sections": [
                    {
                        "content": "Inputs for the method  <mkapi-api-link nav=\"@nav/api/MainModule.queryLoadingGraph\" semantic=\"function\">queryLoadingGraph</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "QueryLoadingGraphInputs",
            "navPath": "@nav/api/MainModule.QueryLoadingGraphInputs",
            "attributes": [
                {
                    "name": "extraIndex",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "This property allows to resolve loading graph, including some libraries that may not exist\nin target database.\n\nEssentially used within py-youwol to couple loading graphs local/remote.\nSee py-youwol source code regarding the generation of this property from a list of libraries.",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "QueryLoadingGraphInputs.extraIndex",
                    "navPath": "@nav/api/MainModule.QueryLoadingGraphInputs.extraIndex",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "extraIndex?: string",
                        "implementation": "",
                        "startLine": 543,
                        "endLine": 544,
                        "references": {
                            "extraIndex": "@nav/api/MainModule.QueryLoadingGraphInputs.extraIndex"
                        }
                    }
                },
                {
                    "name": "modules",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "See  `modules`  of  <mkapi-api-link nav=\"@nav/api/MainModule.InstallInputs\" semantic=\"interface\">InstallInputs</mkapi-api-link>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "QueryLoadingGraphInputs.modules",
                    "navPath": "@nav/api/MainModule.QueryLoadingGraphInputs.modules",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "modules: LightLibraryQueryString[]",
                        "implementation": "",
                        "startLine": 529,
                        "endLine": 530,
                        "references": {
                            "modules": "@nav/api/MainModule.QueryLoadingGraphInputs.modules",
                            "LightLibraryWithAliasQueryString": "@nav/api/MainModule.LightLibraryWithAliasQueryString",
                            "LightLibraryQueryString": "@nav/api/MainModule.LightLibraryQueryString",
                            "PyModule": "@nav/api/MainModule.PyModule"
                        }
                    }
                },
                {
                    "name": "usingDependencies",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "See  `usingDependencies`  of  <mkapi-api-link nav=\"@nav/api/MainModule.InstallInputs\" semantic=\"interface\">InstallInputs</mkapi-api-link>",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "QueryLoadingGraphInputs.usingDependencies",
                    "navPath": "@nav/api/MainModule.QueryLoadingGraphInputs.usingDependencies",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "usingDependencies?: LightLibraryQueryString[]",
                        "implementation": "",
                        "startLine": 534,
                        "endLine": 535,
                        "references": {
                            "usingDependencies": "@nav/api/MainModule.QueryLoadingGraphInputs.usingDependencies",
                            "LightLibraryWithAliasQueryString": "@nav/api/MainModule.LightLibraryWithAliasQueryString",
                            "LightLibraryQueryString": "@nav/api/MainModule.LightLibraryQueryString",
                            "PyModule": "@nav/api/MainModule.PyModule"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export interface QueryLoadingGraphInputs",
                "implementation": "export interface QueryLoadingGraphInputs {\n    /**\n     * See `modules` of {@link InstallInputs}\n     */\n    modules: LightLibraryQueryString[]\n\n    /**\n     * See `usingDependencies` of {@link InstallInputs}\n     */\n    usingDependencies?: LightLibraryQueryString[]\n\n    /**\n     * This property allows to resolve loading graph, including some libraries that may not exist\n     * in target database.\n     *\n     * Essentially used within py-youwol to couple loading graphs local/remote.\n     * See py-youwol source code regarding the generation of this property from a list of libraries.\n     */\n    extraIndex?: string\n}",
                "startLine": 525,
                "endLine": 545,
                "references": {
                    "QueryLoadingGraphInputs": "@nav/api/MainModule.QueryLoadingGraphInputs"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ScriptSideEffectCallbackArgument",
            "documentation": {
                "sections": [
                    {
                        "content": "Argument type for  <mkapi-api-link nav=\"@nav/api/MainModule.CssSideEffectCallback\" semantic=\"type-alias\">CssSideEffectCallback</mkapi-api-link>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ScriptSideEffectCallbackArgument",
            "navPath": "@nav/api/MainModule.ScriptSideEffectCallbackArgument",
            "attributes": [
                {
                    "name": "executingWindow",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Window instance in which the HTML script element has been added",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ScriptSideEffectCallbackArgument.executingWindow",
                    "navPath": "@nav/api/MainModule.ScriptSideEffectCallbackArgument.executingWindow",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "executingWindow: WindowOrWorkerGlobalScope",
                        "implementation": "",
                        "startLine": 510,
                        "endLine": 511,
                        "references": {
                            "executingWindow": "@nav/api/MainModule.ScriptSideEffectCallbackArgument.executingWindow"
                        }
                    }
                },
                {
                    "name": "htmlScriptElement",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "HTML script element added",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ScriptSideEffectCallbackArgument.htmlScriptElement",
                    "navPath": "@nav/api/MainModule.ScriptSideEffectCallbackArgument.htmlScriptElement",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "htmlScriptElement?: HTMLScriptElement",
                        "implementation": "",
                        "startLine": 505,
                        "endLine": 506,
                        "references": {
                            "htmlScriptElement": "@nav/api/MainModule.ScriptSideEffectCallbackArgument.htmlScriptElement"
                        }
                    }
                },
                {
                    "name": "origin",
                    "semantic": {
                        "role": "attribute",
                        "labels": [],
                        "attributes": {},
                        "relations": {}
                    },
                    "documentation": {
                        "sections": [
                            {
                                "content": "Origin of the style-sheet",
                                "contentType": "markdown",
                                "semantic": {
                                    "role": "",
                                    "labels": [],
                                    "attributes": {},
                                    "relations": {}
                                }
                            }
                        ]
                    },
                    "path": "ScriptSideEffectCallbackArgument.origin",
                    "navPath": "@nav/api/MainModule.ScriptSideEffectCallbackArgument.origin",
                    "code": {
                        "filePath": "src/lib/inputs.models.ts",
                        "declaration": "origin: FetchedScript",
                        "implementation": "",
                        "startLine": 500,
                        "endLine": 501,
                        "references": {
                            "origin": "@nav/api/MainModule.ScriptSideEffectCallbackArgument.origin"
                        }
                    }
                }
            ],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export interface ScriptSideEffectCallbackArgument",
                "implementation": "export interface ScriptSideEffectCallbackArgument {\n    /**\n     * Origin of the style-sheet\n     */\n    origin: FetchedScript\n\n    /**\n     * HTML script element added\n     */\n    htmlScriptElement?: HTMLScriptElement\n\n    /**\n     * Window instance in which the HTML script element has been added\n     */\n    executingWindow: WindowOrWorkerGlobalScope\n}",
                "startLine": 496,
                "endLine": 512,
                "references": {
                    "ScriptSideEffectCallbackArgument": "@nav/api/MainModule.ScriptSideEffectCallbackArgument"
                }
            },
            "semantic": {
                "role": "interface",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "BackendEventType",
            "documentation": {
                "sections": [
                    {
                        "content": "<mkapi-api-link nav=\"@nav/api/MainModule.backendEventTypes\" semantic=\"global\">backendEventTypes</mkapi-api-link>  as type literal union.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "BackendEventType",
            "navPath": "@nav/api/MainModule.BackendEventType",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export type BackendEventType = (typeof backendEventTypes)[number]",
                "implementation": "",
                "startLine": 162,
                "endLine": 163,
                "references": {
                    "BackendEventType": "@nav/api/MainModule.BackendEventType",
                    "backendEventTypes": "@nav/api/MainModule.backendEventTypes"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CdnFetchEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Base class for CDN's HTTP request event.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CdnFetchEvent",
            "navPath": "@nav/api/MainModule.CdnFetchEvent",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export type CdnFetchEvent = CdnEvent & {\n    id: string\n    assetId: string\n    targetName: string\n    url: string\n    version: string\n}",
                "implementation": "",
                "startLine": 245,
                "endLine": 246,
                "references": {
                    "CdnFetchEvent": "@nav/api/MainModule.CdnFetchEvent",
                    "CdnEvent": "@nav/api/MainModule.CdnEvent",
                    "CssLoadingEvent": "@nav/api/MainModule.CssLoadingEvent",
                    "CssParsedEvent": "@nav/api/MainModule.CssParsedEvent",
                    "ParseErrorEvent": "@nav/api/MainModule.ParseErrorEvent",
                    "SourceLoadedEvent": "@nav/api/MainModule.SourceLoadedEvent",
                    "SourceLoadingEvent": "@nav/api/MainModule.SourceLoadingEvent",
                    "SourceParsedEvent": "@nav/api/MainModule.SourceParsedEvent",
                    "StartEvent": "@nav/api/MainModule.StartEvent",
                    "UnauthorizedEvent": "@nav/api/MainModule.UnauthorizedEvent",
                    "UrlNotFoundEvent": "@nav/api/MainModule.UrlNotFoundEvent"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CdnPyEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Base class for Pyodide related event.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CdnPyEvent",
            "navPath": "@nav/api/MainModule.CdnPyEvent",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export type CdnPyEvent = CdnEvent",
                "implementation": "",
                "startLine": 595,
                "endLine": 596,
                "references": {
                    "CdnPyEvent": "@nav/api/MainModule.CdnPyEvent",
                    "CdnEvent": "@nav/api/MainModule.CdnEvent",
                    "ConsoleEvent": "@nav/api/MainModule.ConsoleEvent",
                    "FetchPyRuntimeEvent": "@nav/api/MainModule.FetchPyRuntimeEvent",
                    "FetchedPyRuntimeEvent": "@nav/api/MainModule.FetchedPyRuntimeEvent",
                    "InstallPyModuleEvent": "@nav/api/MainModule.InstallPyModuleEvent",
                    "PyEnvironmentErrorEvent": "@nav/api/MainModule.PyEnvironmentErrorEvent",
                    "PyEnvironmentReadyEvent": "@nav/api/MainModule.PyEnvironmentReadyEvent",
                    "PyModuleErrorEvent": "@nav/api/MainModule.PyModuleErrorEvent",
                    "PyModuleLoadedEvent": "@nav/api/MainModule.PyModuleLoadedEvent",
                    "PyRuntimeReadyEvent": "@nav/api/MainModule.PyRuntimeReadyEvent",
                    "StartPyEnvironmentInstallEvent": "@nav/api/MainModule.StartPyEnvironmentInstallEvent",
                    "StartPyRuntimeEvent": "@nav/api/MainModule.StartPyRuntimeEvent"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CssEventType",
            "documentation": {
                "sections": [
                    {
                        "content": "<mkapi-api-link nav=\"@nav/api/MainModule.cssEventTypes\" semantic=\"global\">cssEventTypes</mkapi-api-link>  as type literal union.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CssEventType",
            "navPath": "@nav/api/MainModule.CssEventType",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export type CssEventType = (typeof cssEventTypes)[number]",
                "implementation": "",
                "startLine": 109,
                "endLine": 110,
                "references": {
                    "CssEventType": "@nav/api/MainModule.CssEventType",
                    "cssEventTypes": "@nav/api/MainModule.cssEventTypes"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CssInput",
            "documentation": {
                "sections": [
                    {
                        "content": "specification of a CSS resource, either:\n*  the reference to a location\n*  an object with\n    *  'location': reference of the location\n    *  'sideEffects': the sideEffects to execute after the HTMLLinkElement has been loaded,\n    see  <mkapi-api-link nav=\"@nav/api/MainModule.CssSideEffectCallback\" semantic=\"type-alias\">CssSideEffectCallback</mkapi-api-link>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CssInput",
            "navPath": "@nav/api/MainModule.CssInput",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export type CssInput =\n    | FileLocationString\n    | { location: FileLocationString; sideEffects?: CssSideEffectCallback }",
                "implementation": "",
                "startLine": 286,
                "endLine": 287,
                "references": {
                    "CssInput": "@nav/api/MainModule.CssInput",
                    "FileLocationString": "@nav/api/MainModule.FileLocationString",
                    "CssSideEffectCallback": "@nav/api/MainModule.CssSideEffectCallback"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "CssSideEffectCallback",
            "documentation": {
                "sections": [
                    {
                        "content": "Type definition of a css installation side effects:\na callback taking an instance of  <mkapi-api-link nav=\"@nav/api/MainModule.CssSideEffectCallbackArgument\" semantic=\"interface\">CssSideEffectCallbackArgument</mkapi-api-link>  as argument.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "CssSideEffectCallback",
            "navPath": "@nav/api/MainModule.CssSideEffectCallback",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export type CssSideEffectCallback = (\n    argument: CssSideEffectCallbackArgument,\n) => void | Promise<void>",
                "implementation": "",
                "startLine": 489,
                "endLine": 490,
                "references": {
                    "CssSideEffectCallback": "@nav/api/MainModule.CssSideEffectCallback",
                    "CssSideEffectCallbackArgument": "@nav/api/MainModule.CssSideEffectCallbackArgument"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "EsmEventType",
            "documentation": {
                "sections": [
                    {
                        "content": "<mkapi-api-link nav=\"@nav/api/MainModule.esmEventTypes\" semantic=\"global\">esmEventTypes</mkapi-api-link>  as type literal union.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "EsmEventType",
            "navPath": "@nav/api/MainModule.EsmEventType",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export type EsmEventType = (typeof esmEventTypes)[number]",
                "implementation": "",
                "startLine": 85,
                "endLine": 86,
                "references": {
                    "EsmEventType": "@nav/api/MainModule.EsmEventType",
                    "esmEventTypes": "@nav/api/MainModule.esmEventTypes"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "EventStatus",
            "documentation": {
                "sections": [
                    {
                        "content": "Type literal for event's status.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "EventStatus",
            "navPath": "@nav/api/MainModule.EventStatus",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export type EventStatus = 'Pending' | 'Succeeded' | 'Failed' | 'None'",
                "implementation": "",
                "startLine": 196,
                "endLine": 197,
                "references": {
                    "EventStatus": "@nav/api/MainModule.EventStatus"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "EventType",
            "documentation": {
                "sections": [
                    {
                        "content": "<mkapi-api-link nav=\"@nav/api/MainModule.eventTypes\" semantic=\"global\">eventTypes</mkapi-api-link>  as type literal union.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "EventType",
            "navPath": "@nav/api/MainModule.EventType",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export type EventType = (typeof eventTypes)[number]",
                "implementation": "",
                "startLine": 191,
                "endLine": 192,
                "references": {
                    "EventType": "@nav/api/MainModule.EventType",
                    "eventTypes": "@nav/api/MainModule.eventTypes"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "FileLocationString",
            "documentation": {
                "sections": [
                    {
                        "content": "A FileLocationString is a string that specifies location in the files structure of a module using the format:\n `{moduleName}#{version}~{rest-of-path}` \n\nWhere:\n*   `moduleName`  is the name of the module containing the script\n*   `version`  is the semver query\n*   `rest-of-path`  is the path of the script from the root module directory\n\n\nE.g.:  `codemirror#5.52.0~mode/javascript.min.js`",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "FileLocationString",
            "navPath": "@nav/api/MainModule.FileLocationString",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export type FileLocationString = string",
                "implementation": "",
                "startLine": 16,
                "endLine": 17,
                "references": {
                    "FileLocationString": "@nav/api/MainModule.FileLocationString"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LibraryName",
            "documentation": {
                "sections": [
                    {
                        "content": "Type alias for string used as library name.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LibraryName",
            "navPath": "@nav/api/MainModule.LibraryName",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/state.ts",
                "declaration": "export type LibraryName = string",
                "implementation": "",
                "startLine": 25,
                "endLine": 26,
                "references": {
                    "LibraryName": "@nav/api/MainModule.LibraryName"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LightLibraryQueryString",
            "documentation": {
                "sections": [
                    {
                        "content": "A  `LightLibraryQueryString`  is a string format used to specify a library installation request.\n\nThe format can be one of the following:\n\n-  `string` : The library name, implicitly targeting the latest available version.\n-  `${string}#${string}` : A library name followed by a  `#`  and a **semantic versioning range**.\n\n**Example Usage:**\n\n ```ts\n\"codemirror#^5.52.0\"\n``` \n\nIn this example,  `codemirror`  is requested with the latest compatible version matching  `^5.52.0` .\n\n<note level=\"warning\">\nWhen specifying a semantic versioning range, it is strongly recommended to use an API-compatible range\n(i.e., using the  `^`  operator).\n\nThis ensures that only a **single version** of the library is installed for a given API version (determined by\nthe left-most non-zero digit), as multiple versions of the same API are **not allowed**.\n</note>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LightLibraryQueryString",
            "navPath": "@nav/api/MainModule.LightLibraryQueryString",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export type LightLibraryQueryString = string | `${string}#${string}`",
                "implementation": "",
                "startLine": 44,
                "endLine": 45,
                "references": {
                    "LightLibraryQueryString": "@nav/api/MainModule.LightLibraryQueryString"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LightLibraryWithAliasQueryString",
            "documentation": {
                "sections": [
                    {
                        "content": "A  `LightLibraryWithAliasQueryString`  extends  <mkapi-api-link nav=\"@nav/api/MainModule.LightLibraryQueryString\" semantic=\"type-alias\">LightLibraryQueryString</mkapi-api-link>  by allowing an optional alias.\n\nThe expected format:\n ```\n{moduleName}#{semver} as {alias}\n``` \n\n**Example Usage:**\n ```ts\n\"codemirror#^5.52.0 as CM\"\n``` \n\n-  `codemirror#^5.52.0` : Specifies the module and its semantic versioning range.\n-  `as CM` : Assigns an alias ( `CM` ) for easier reference.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LightLibraryWithAliasQueryString",
            "navPath": "@nav/api/MainModule.LightLibraryWithAliasQueryString",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export type LightLibraryWithAliasQueryString =\n    | LightLibraryQueryString\n    // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n    | `${LightLibraryQueryString} as ${string}`",
                "implementation": "",
                "startLine": 63,
                "endLine": 64,
                "references": {
                    "LightLibraryWithAliasQueryString": "@nav/api/MainModule.LightLibraryWithAliasQueryString"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "LoadingGraphEventType",
            "documentation": {
                "sections": [
                    {
                        "content": "<mkapi-api-link nav=\"@nav/api/MainModule.loadingGraphEventTypes\" semantic=\"global\">loadingGraphEventTypes</mkapi-api-link>  as type literal union.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "LoadingGraphEventType",
            "navPath": "@nav/api/MainModule.LoadingGraphEventType",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export type LoadingGraphEventType = (typeof loadingGraphEventTypes)[number]",
                "implementation": "",
                "startLine": 61,
                "endLine": 62,
                "references": {
                    "LoadingGraphEventType": "@nav/api/MainModule.LoadingGraphEventType",
                    "loadingGraphEventTypes": "@nav/api/MainModule.loadingGraphEventTypes"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ModuleInput",
            "documentation": {
                "sections": [
                    {
                        "content": "Specification of a module.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ModuleInput",
            "navPath": "@nav/api/MainModule.ModuleInput",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export type ModuleInput =\n    | {\n          name: string\n          version: string\n          sideEffects?: (Window) => void\n      }\n    | string",
                "implementation": "",
                "startLine": 269,
                "endLine": 270,
                "references": {
                    "ModuleInput": "@nav/api/MainModule.ModuleInput"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ModuleSideEffectCallback",
            "documentation": {
                "sections": [
                    {
                        "content": "Type definition of a module installation side effects:\na callback taking an instance of  <mkapi-api-link nav=\"@nav/api/MainModule.ModuleSideEffectCallbackArgument\" semantic=\"interface\">ModuleSideEffectCallbackArgument</mkapi-api-link>  as argument.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ModuleSideEffectCallback",
            "navPath": "@nav/api/MainModule.ModuleSideEffectCallback",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export type ModuleSideEffectCallback = (\n    argument: ModuleSideEffectCallbackArgument,\n) => void | Promise<void>",
                "implementation": "",
                "startLine": 457,
                "endLine": 458,
                "references": {
                    "ModuleSideEffectCallback": "@nav/api/MainModule.ModuleSideEffectCallback",
                    "ModuleSideEffectCallbackArgument": "@nav/api/MainModule.ModuleSideEffectCallbackArgument"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyEventType",
            "documentation": {
                "sections": [
                    {
                        "content": "<mkapi-api-link nav=\"@nav/api/MainModule.pyEventTypes\" semantic=\"global\">pyEventTypes</mkapi-api-link>  as type literal union.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyEventType",
            "navPath": "@nav/api/MainModule.PyEventType",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export type PyEventType = (typeof pyEventTypes)[number]",
                "implementation": "",
                "startLine": 140,
                "endLine": 141,
                "references": {
                    "PyEventType": "@nav/api/MainModule.PyEventType",
                    "pyEventTypes": "@nav/api/MainModule.pyEventTypes"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "PyModule",
            "documentation": {
                "sections": [
                    {
                        "content": "A string interpreted as a python module specification.\n\nThey are forwarded to <a target=\"_blank\" href=\"https://pyodide.org/en/stable/usage/loading-packages.html#micropip\">\nmicropip.install</a> for installation within the Pyodide environment.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "PyModule",
            "navPath": "@nav/api/MainModule.PyModule",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export type PyModule = string",
                "implementation": "",
                "startLine": 74,
                "endLine": 75,
                "references": {
                    "PyModule": "@nav/api/MainModule.PyModule"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ScriptInput",
            "documentation": {
                "sections": [
                    {
                        "content": "specification of a Script resource, either:\n*  the reference to a location\n*  an object with\n    *  'location': reference of the location\n    *  'sideEffects': the sideEffects to execute after the HTMLScriptElement has been loaded,\n    see  <mkapi-api-link nav=\"@nav/api/MainModule.ScriptSideEffectCallback\" semantic=\"type-alias\">ScriptSideEffectCallback</mkapi-api-link>",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ScriptInput",
            "navPath": "@nav/api/MainModule.ScriptInput",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export type ScriptInput =\n    | FileLocationString\n    | { location: FileLocationString; sideEffects: ScriptSideEffectCallback }",
                "implementation": "",
                "startLine": 299,
                "endLine": 300,
                "references": {
                    "ScriptInput": "@nav/api/MainModule.ScriptInput",
                    "FileLocationString": "@nav/api/MainModule.FileLocationString",
                    "ScriptSideEffectCallback": "@nav/api/MainModule.ScriptSideEffectCallback"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ScriptSideEffectCallback",
            "documentation": {
                "sections": [
                    {
                        "content": "Type definition of a script installation side effects:\na callback taking an instance of  <mkapi-api-link nav=\"@nav/api/MainModule.ScriptSideEffectCallbackArgument\" semantic=\"interface\">ScriptSideEffectCallbackArgument</mkapi-api-link>  as argument.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ScriptSideEffectCallback",
            "navPath": "@nav/api/MainModule.ScriptSideEffectCallback",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/inputs.models.ts",
                "declaration": "export type ScriptSideEffectCallback = (\n    argument: ScriptSideEffectCallbackArgument,\n) => void | Promise<void>",
                "implementation": "",
                "startLine": 517,
                "endLine": 518,
                "references": {
                    "ScriptSideEffectCallback": "@nav/api/MainModule.ScriptSideEffectCallback",
                    "ScriptSideEffectCallbackArgument": "@nav/api/MainModule.ScriptSideEffectCallbackArgument"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Topic",
            "documentation": {
                "sections": [
                    {
                        "content": "Available topics when installing components.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Topic",
            "navPath": "@nav/api/MainModule.Topic",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export type Topic =\n    | 'LoadingGraph'\n    | 'ESM'\n    | 'Python'\n    | 'Backend'\n    | 'CSS'\n    | 'Worker'",
                "implementation": "",
                "startLine": 6,
                "endLine": 7,
                "references": {
                    "Topic": "@nav/api/MainModule.Topic"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "Version",
            "documentation": {
                "sections": [
                    {
                        "content": "Type alias for string used as version.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "Version",
            "navPath": "@nav/api/MainModule.Version",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/state.ts",
                "declaration": "export type Version = string",
                "implementation": "",
                "startLine": 29,
                "endLine": 30,
                "references": {
                    "Version": "@nav/api/MainModule.Version"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "ViewsModule",
            "documentation": {
                "sections": [
                    {
                        "content": "Type definition of the module  <mkapi-api-link nav=\"@nav/api/MainModule.ViewsModule\" semantic=\"type-alias\">ViewsModule</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "ViewsModule",
            "navPath": "@nav/api/MainModule.ViewsModule",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/views.installer.ts",
                "declaration": "export type ViewsModule = typeof import('./views')",
                "implementation": "",
                "startLine": 7,
                "endLine": 8,
                "references": {
                    "ViewsModule": "@nav/api/MainModule.ViewsModule",
                    "__module": "@nav/api/ViewsModule"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "WorkersModule",
            "documentation": {
                "sections": [
                    {
                        "content": "Type definition of the module  <mkapi-api-link nav=\"@nav/api/WorkersPoolModule\" semantic=\"module\">WorkersPoolModule</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "WorkersModule",
            "navPath": "@nav/api/MainModule.WorkersModule",
            "attributes": [],
            "callables": [],
            "code": {
                "filePath": "src/lib/workers-pool.installer.ts",
                "declaration": "export type WorkersModule = typeof import('./workers-pool')",
                "implementation": "",
                "startLine": 9,
                "endLine": 10,
                "references": {
                    "WorkersModule": "@nav/api/MainModule.WorkersModule",
                    "__module": "@nav/api/WorkersPoolModule"
                }
            },
            "semantic": {
                "role": "type-alias",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        }
    ],
    "callables": [
        {
            "name": "backendConfiguration",
            "documentation": {
                "sections": [
                    {
                        "content": "Construct a backend configuration.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **id**: Id associated to the configuration.\n*  **origin**: Origin of the backend.\n*  **pathLoadingGraph**: Path of the end-point to query the loading graph.\n*  **pathPyodide**: Path to fetch Pyodide resources.\n*  **pathPypi**: Path to fetch PyPi module.\n*  **pathResource**: Path of the end-point to fetch the bundle of a package.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "backendConfiguration",
            "navPath": "@nav/api/MainModule.backendConfiguration",
            "code": {
                "filePath": "src/lib/backend-configuration.ts",
                "declaration": "export function backendConfiguration({\n    pathLoadingGraph,\n    pathResource,\n    origin,\n    id,\n    pathPypi,\n    pathPyodide,\n}: {\n    id?: string\n    pathLoadingGraph: string\n    pathResource: string\n    origin?: { secure?: boolean; hostname?: string; port?: number } | string\n    pathPypi?: string\n    pathPyodide?: string\n}): BackendConfiguration",
                "implementation": "export function backendConfiguration({\n    pathLoadingGraph,\n    pathResource,\n    origin,\n    id,\n    pathPypi,\n    pathPyodide,\n}: {\n    id?: string\n    pathLoadingGraph: string\n    pathResource: string\n    origin?: { secure?: boolean; hostname?: string; port?: number } | string\n    pathPypi?: string\n    pathPyodide?: string\n}): BackendConfiguration {\n    if (typeof origin !== 'string') {\n        origin = computeOrigin(origin)\n    }\n    return {\n        id,\n        origin,\n        urlLoadingGraph: `${origin}${pathLoadingGraph}`,\n        urlResource: `${origin}${pathResource}`,\n        urlPypi: pathPypi ? `${origin}${pathPypi}` : 'https://pypi.org/',\n        urlPyodide: pathPyodide\n            ? `${origin}${pathPyodide}/$VERSION`\n            : `https://cdn.jsdelivr.net/pyodide/v$VERSION/full`,\n    }\n}",
                "startLine": 122,
                "endLine": 151,
                "references": {
                    "backendConfiguration": "@nav/api/MainModule.backendConfiguration",
                    "BackendConfiguration": "@nav/api/MainModule.BackendConfiguration"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "errorFactory",
            "documentation": {
                "sections": [
                    {
                        "content": "Errors factory.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "errorFactory",
            "navPath": "@nav/api/MainModule.errorFactory",
            "code": {
                "filePath": "src/lib/errors.models.ts",
                "declaration": "export function errorFactory(error: CdnError): Error",
                "implementation": "export function errorFactory(error: CdnError): Error {\n    if (CircularDependencies.isInstance(error)) {\n        return new CircularDependencies(error.detail)\n    }\n    if (DependenciesError.isInstance(error)) {\n        return new DependenciesError(error.detail)\n    }\n    if (Unauthorized.isInstance(error)) {\n        return new Unauthorized(error.detail)\n    }\n    if (\n        'exceptionType' in error &&\n        error.exceptionType === 'UpstreamResponseException'\n    ) {\n        // noinspection TailRecursionJS\n        return errorFactory((error as unknown as { detail: CdnError }).detail)\n    }\n    return error\n}",
                "startLine": 190,
                "endLine": 209,
                "references": {
                    "errorFactory": "@nav/api/MainModule.errorFactory",
                    "CdnError": "@nav/api/MainModule.CdnError"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "getAssetId",
            "documentation": {
                "sections": [
                    {
                        "content": "Returns the assetId from a name.\nIt does not imply that the asset exist.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **name**: name of the package (as defined in package.json)",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "assetId used in the assets store",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "getAssetId",
            "navPath": "@nav/api/MainModule.getAssetId",
            "code": {
                "filePath": "src/lib/utils.ts",
                "declaration": "export function getAssetId(name: string)",
                "implementation": "export function getAssetId(name: string) {\n    return window.btoa(name)\n}",
                "startLine": 462,
                "endLine": 465,
                "references": {
                    "getAssetId": "@nav/api/MainModule.getAssetId"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "getUrlBase",
            "documentation": {
                "sections": [
                    {
                        "content": "Returns the base url to access a CDN asset from its name & version.\nIt does not imply that the asset exist.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **name**: name of the package (as defined in package.json).\n*  **version**: version of the package (as defined in package.json).",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "base url to access the resource.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "getUrlBase",
            "navPath": "@nav/api/MainModule.getUrlBase",
            "code": {
                "filePath": "src/lib/utils.ts",
                "declaration": "export function getUrlBase(name: string, version: string)",
                "implementation": "export function getUrlBase(name: string, version: string) {\n    const assetId = getAssetId(name)\n    return `${Client.BackendConfiguration.urlResource}/${assetId}/${version}`\n}",
                "startLine": 475,
                "endLine": 479,
                "references": {
                    "getUrlBase": "@nav/api/MainModule.getUrlBase"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "install",
            "documentation": {
                "sections": [
                    {
                        "content": "Install resources; see documentation provided for  <mkapi-api-link nav=\"@nav/api/MainModule.InstallInputs\" semantic=\"interface\">InstallInputs</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "install",
            "navPath": "@nav/api/MainModule.install",
            "code": {
                "filePath": "src/lib/client.ts",
                "declaration": "export function install(\n    inputs: InstallInputsDeprecated | InstallInputs,\n): Promise<WindowOrWorkerGlobalScope>",
                "implementation": "export function install(\n    inputs: InstallInputsDeprecated | InstallInputs,\n): Promise<WindowOrWorkerGlobalScope> {\n    return new Client().install(inputs)\n}",
                "startLine": 92,
                "endLine": 97,
                "references": {
                    "install": "@nav/api/MainModule.install",
                    "InstallInputs": "@nav/api/MainModule.InstallInputs"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "installViewsModule",
            "documentation": {
                "sections": [
                    {
                        "content": "Install the  <mkapi-api-link nav=\"@nav/api/MainModule.ViewsModule\" semantic=\"type-alias\">ViewsModule</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "installViewsModule",
            "navPath": "@nav/api/MainModule.installViewsModule",
            "code": {
                "filePath": "src/lib/views.installer.ts",
                "declaration": "export async function installViewsModule(): Promise<ViewsModule>",
                "implementation": "export async function installViewsModule(): Promise<ViewsModule> {\n    const viewsModule = (await setup.installAuxiliaryModule({\n        name: 'views',\n        cdnClient: webpmClient,\n        installParameters: {\n            executingWindow: window,\n            css: [`${setup.name}#${setup.version}~assets/style.css`],\n        },\n    })) as unknown as ViewsModule\n    viewsModule.Dependencies.webpm = webpmClient\n    return viewsModule\n}",
                "startLine": 13,
                "endLine": 25,
                "references": {
                    "installViewsModule": "@nav/api/MainModule.installViewsModule",
                    "__module": "@nav/api/ViewsModule"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "installWorkersPoolModule",
            "documentation": {
                "sections": [
                    {
                        "content": "Install  <mkapi-api-link nav=\"@nav/api/WorkersPoolModule\" semantic=\"module\">WorkersPoolModule</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "installWorkersPoolModule",
            "navPath": "@nav/api/MainModule.installWorkersPoolModule",
            "code": {
                "filePath": "src/lib/workers-pool.installer.ts",
                "declaration": "export async function installWorkersPoolModule(): Promise<WorkersModule> {",
                "implementation": "export async function installWorkersPoolModule(): Promise<WorkersModule> {\n    return await setup\n        .installAuxiliaryModule({\n            name: 'workersPool',\n            cdnClient: webpmClient,\n            installParameters: {\n                executingWindow: window,\n            },\n        })\n        .then((module: WorkersModule) => {\n            setupWorkersPoolModule(module)\n            return module\n        })\n}",
                "startLine": 44,
                "endLine": 58,
                "references": {
                    "installWorkersPoolModule": "@nav/api/MainModule.installWorkersPoolModule",
                    "__module": "@nav/api/WorkersPoolModule"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "isBackendEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Type guard for  <mkapi-api-link nav=\"@nav/api/MainModule.BackendEventType\" semantic=\"type-alias\">BackendEventType</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "isBackendEvent",
            "navPath": "@nav/api/MainModule.isBackendEvent",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export function isBackendEvent(\n    event: CdnEvent,\n): event is AllEvents[BackendEventType]",
                "implementation": "export function isBackendEvent(\n    event: CdnEvent,\n): event is AllEvents[BackendEventType] {\n    return backendEventTypes.includes(event.step as BackendEventType)\n}",
                "startLine": 167,
                "endLine": 172,
                "references": {
                    "isBackendEvent": "@nav/api/MainModule.isBackendEvent",
                    "CdnEvent": "@nav/api/MainModule.CdnEvent",
                    "DownloadBackendEvent": "@nav/api/MainModule.DownloadBackendEvent",
                    "InstallBackendEvent": "@nav/api/MainModule.InstallBackendEvent",
                    "StartBackendEvent": "@nav/api/MainModule.StartBackendEvent",
                    "BackendErrorEvent": "@nav/api/MainModule.BackendErrorEvent"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "isCdnEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Type guard for  <mkapi-api-link nav=\"@nav/api/MainModule.CdnEvent\" semantic=\"interface\">CdnEvent</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "isCdnEvent",
            "navPath": "@nav/api/MainModule.isCdnEvent",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export function isCdnEvent(event: unknown): event is CdnEvent",
                "implementation": "export function isCdnEvent(event: unknown): event is CdnEvent {\n    return eventTypes.includes((event as CdnEvent).step)\n}",
                "startLine": 223,
                "endLine": 226,
                "references": {
                    "isCdnEvent": "@nav/api/MainModule.isCdnEvent",
                    "CdnEvent": "@nav/api/MainModule.CdnEvent"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "isCssEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Type guard for  <mkapi-api-link nav=\"@nav/api/MainModule.CssEventType\" semantic=\"type-alias\">CssEventType</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "isCssEvent",
            "navPath": "@nav/api/MainModule.isCssEvent",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export function isCssEvent(event: CdnEvent): event is AllEvents[CssEventType]",
                "implementation": "export function isCssEvent(event: CdnEvent): event is AllEvents[CssEventType] {\n    if (['UnauthorizedEvent', 'UrlNotFoundEvent'].includes(event.step)) {\n        return (event as UnauthorizedEvent | UrlNotFoundEvent).url.endsWith(\n            '.css',\n        )\n    }\n    return cssEventTypes.includes(event.step as CssEventType)\n}",
                "startLine": 113,
                "endLine": 121,
                "references": {
                    "isCssEvent": "@nav/api/MainModule.isCssEvent",
                    "CdnEvent": "@nav/api/MainModule.CdnEvent",
                    "CssLoadingEvent": "@nav/api/MainModule.CssLoadingEvent",
                    "CssParsedEvent": "@nav/api/MainModule.CssParsedEvent",
                    "UnauthorizedEvent": "@nav/api/MainModule.UnauthorizedEvent",
                    "UrlNotFoundEvent": "@nav/api/MainModule.UrlNotFoundEvent"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "isEsmEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Type guard for  <mkapi-api-link nav=\"@nav/api/MainModule.EsmEventType\" semantic=\"type-alias\">EsmEventType</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "isEsmEvent",
            "navPath": "@nav/api/MainModule.isEsmEvent",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export function isEsmEvent(event: CdnEvent): event is AllEvents[EsmEventType]",
                "implementation": "export function isEsmEvent(event: CdnEvent): event is AllEvents[EsmEventType] {\n    if (['UnauthorizedEvent', 'UrlNotFoundEvent'].includes(event.step)) {\n        return (event as UnauthorizedEvent | UrlNotFoundEvent).url.endsWith(\n            '.js',\n        )\n    }\n    return esmEventTypes.includes(event.step as EsmEventType)\n}",
                "startLine": 89,
                "endLine": 97,
                "references": {
                    "isEsmEvent": "@nav/api/MainModule.isEsmEvent",
                    "CdnEvent": "@nav/api/MainModule.CdnEvent",
                    "StartEvent": "@nav/api/MainModule.StartEvent",
                    "SourceLoadingEvent": "@nav/api/MainModule.SourceLoadingEvent",
                    "SourceLoadedEvent": "@nav/api/MainModule.SourceLoadedEvent",
                    "SourceParsedEvent": "@nav/api/MainModule.SourceParsedEvent",
                    "UnauthorizedEvent": "@nav/api/MainModule.UnauthorizedEvent",
                    "UrlNotFoundEvent": "@nav/api/MainModule.UrlNotFoundEvent",
                    "ParseErrorEvent": "@nav/api/MainModule.ParseErrorEvent"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "isLoadingGraphEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Type guard for  <mkapi-api-link nav=\"@nav/api/MainModule.LoadingGraphEventType\" semantic=\"type-alias\">LoadingGraphEventType</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "isLoadingGraphEvent",
            "navPath": "@nav/api/MainModule.isLoadingGraphEvent",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export function isLoadingGraphEvent(\n    event: CdnEvent,\n): event is AllEvents[LoadingGraphEventType]",
                "implementation": "export function isLoadingGraphEvent(\n    event: CdnEvent,\n): event is AllEvents[LoadingGraphEventType] {\n    return loadingGraphEventTypes.includes(event.step as LoadingGraphEventType)\n}",
                "startLine": 65,
                "endLine": 70,
                "references": {
                    "isLoadingGraphEvent": "@nav/api/MainModule.isLoadingGraphEvent",
                    "CdnEvent": "@nav/api/MainModule.CdnEvent",
                    "CdnLoadingGraphQueryEvent": "@nav/api/MainModule.CdnLoadingGraphQueryEvent",
                    "CdnLoadingGraphResolvedEvent": "@nav/api/MainModule.CdnLoadingGraphResolvedEvent",
                    "CdnLoadingGraphErrorEvent": "@nav/api/MainModule.CdnLoadingGraphErrorEvent"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "isPyEvent",
            "documentation": {
                "sections": [
                    {
                        "content": "Type guard for  <mkapi-api-link nav=\"@nav/api/MainModule.PyEventType\" semantic=\"type-alias\">PyEventType</mkapi-api-link> .",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "isPyEvent",
            "navPath": "@nav/api/MainModule.isPyEvent",
            "code": {
                "filePath": "src/lib/events.models.ts",
                "declaration": "export function isPyEvent(event: CdnEvent): event is AllEvents[PyEventType]",
                "implementation": "export function isPyEvent(event: CdnEvent): event is AllEvents[PyEventType] {\n    return pyEventTypes.includes(event.step as PyEventType)\n}",
                "startLine": 145,
                "endLine": 148,
                "references": {
                    "isPyEvent": "@nav/api/MainModule.isPyEvent",
                    "CdnEvent": "@nav/api/MainModule.CdnEvent",
                    "FetchPyRuntimeEvent": "@nav/api/MainModule.FetchPyRuntimeEvent",
                    "FetchedPyRuntimeEvent": "@nav/api/MainModule.FetchedPyRuntimeEvent",
                    "StartPyRuntimeEvent": "@nav/api/MainModule.StartPyRuntimeEvent",
                    "PyRuntimeReadyEvent": "@nav/api/MainModule.PyRuntimeReadyEvent",
                    "StartPyEnvironmentInstallEvent": "@nav/api/MainModule.StartPyEnvironmentInstallEvent",
                    "InstallPyModuleEvent": "@nav/api/MainModule.InstallPyModuleEvent",
                    "PyModuleLoadedEvent": "@nav/api/MainModule.PyModuleLoadedEvent",
                    "PyModuleErrorEvent": "@nav/api/MainModule.PyModuleErrorEvent",
                    "PyEnvironmentReadyEvent": "@nav/api/MainModule.PyEnvironmentReadyEvent",
                    "PyEnvironmentErrorEvent": "@nav/api/MainModule.PyEnvironmentErrorEvent"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "parseResourceId",
            "documentation": {
                "sections": [
                    {
                        "content": "Parse a resource id in the form  `{libraryName}#{version}~{rest-of-path}`  where:\n-    libraryName is the name of the library\n-    version is the target version\n-    rest-of-path is the partial url from the package's directory to the target CSS",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **resourceId**: resource id in the form  `{libraryName}#{version}~{rest-of-path}`",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "parseResourceId",
            "navPath": "@nav/api/MainModule.parseResourceId",
            "code": {
                "filePath": "src/lib/utils.ts",
                "declaration": "export function parseResourceId(resourceId: string): {\n    name: string\n    version: string\n    path: string\n    assetId: string\n    url: string\n}",
                "implementation": "export function parseResourceId(resourceId: string): {\n    name: string\n    version: string\n    path: string\n    assetId: string\n    url: string\n} {\n    const name = resourceId.split('#')[0]\n    const version = resourceId.split('#')[1].split('~')[0]\n    const path = resourceId.split('#')[1].split('~')[1]\n    const assetId = getAssetId(name)\n    const url = `${getUrlBase(name, version)}/${path}`\n    return { name, version, path, assetId, url }\n}",
                "startLine": 112,
                "endLine": 126,
                "references": {
                    "parseResourceId": "@nav/api/MainModule.parseResourceId"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "queryLoadingGraph",
            "documentation": {
                "sections": [
                    {
                        "content": "Query the loading graph of modules, the direct & indirect dependencies as well as their relation.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Arguments",
                        "content": "\n*  **inputs**: Query inputs.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "arguments",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    },
                    {
                        "title": "Returns",
                        "content": "The loading graph response from the server.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "returns",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "queryLoadingGraph",
            "navPath": "@nav/api/MainModule.queryLoadingGraph",
            "code": {
                "filePath": "src/lib/client.ts",
                "declaration": "export function queryLoadingGraph(\n    inputs: QueryLoadingGraphInputs,\n): Promise<LoadingGraph>",
                "implementation": "export function queryLoadingGraph(\n    inputs: QueryLoadingGraphInputs,\n): Promise<LoadingGraph> {\n    return new Client().queryLoadingGraph(inputs)\n}",
                "startLine": 104,
                "endLine": 109,
                "references": {
                    "queryLoadingGraph": "@nav/api/MainModule.queryLoadingGraph",
                    "QueryLoadingGraphInputs": "@nav/api/MainModule.QueryLoadingGraphInputs",
                    "LoadingGraph": "@nav/api/MainModule.LoadingGraph"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        },
        {
            "name": "youwolSvgLogo",
            "documentation": {
                "sections": [
                    {
                        "content": "The default svg Youwol logo.",
                        "contentType": "markdown",
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        }
                    }
                ]
            },
            "path": "youwolSvgLogo",
            "navPath": "@nav/api/MainModule.youwolSvgLogo",
            "code": {
                "filePath": "src/lib/utils.view.ts",
                "declaration": "export function youwolSvgLogo()",
                "implementation": "export function youwolSvgLogo() {\n    return `<svg id='logo2bis' xmlns='http://www.w3.org/2000/svg' style='transform:translate(0px,-12px);margin: auto' viewBox='0 0 109.58 121.1' width='109px' height='121px'>\n        <defs><style>.cls-1{fill:#008000;}</style></defs>\n        <title>logo_YouWol_white</title>\n        <polygon class='cls-1' points='109.58 94.68 109.58 84.14 91.39 73.64 109.58 63.14 109.58 42.06 63.95 68.41 63.94 68.41 63.94 121.1 82.2 110.56 82.2 89.41 100.52 99.99 109.58 94.76 109.58 94.68'/>\n        <polygon class='cls-1' points='54.8 52.69 9.17 26.35 27.42 15.81 45.61 26.31 45.61 5.31 54.73 0.04 54.8 0 63.86 5.23 63.86 26.39 82.18 15.81 100.43 26.35 54.8 52.7 54.8 52.69'/>\n        <polygon class='cls-1' points='0.07 94.72 9.2 99.99 27.38 89.49 27.38 110.56 45.64 121.1 45.64 68.41 45.64 68.41 0.01 42.06 0.01 63.14 18.33 73.64 0 84.22 0 94.68 0.07 94.72'/>\n        </svg>\n        `\n}",
                "startLine": 120,
                "endLine": 130,
                "references": {
                    "youwolSvgLogo": "@nav/api/MainModule.youwolSvgLogo"
                }
            },
            "semantic": {
                "role": "function",
                "labels": [],
                "attributes": {},
                "relations": {}
            }
        }
    ],
    "files": [
        {
            "name": "index-types.ts",
            "path": "src/lib/test-utils/index-types.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "index-types.ts",
            "path": "src/lib/workers-pool/index-types.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "This module export in the  the types included in the module \n(types only, no implementation).\n\nIt serves as helper when working with typescript, e.g.:\n```ts\nimport { installWorkersPoolModule, WorkersType } from '@youwol/webpm-client'\n\nasync function foo(){\n     const WPModule = await installWorkersPoolModule()\n     const pool : WorkersType.WorkersPool = new WPModule.WorkersPool({})\n}\n```\n\nSee .",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "events.models.ts",
            "path": "src/lib/events.models.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "errors.models.ts",
            "path": "src/lib/errors.models.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "Base class of Errors.",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "loader.view.ts",
            "path": "src/lib/loader.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "state.ts",
            "path": "src/lib/state.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "backends.ts",
            "path": "src/lib/backends.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "inputs.models.ts",
            "path": "src/lib/inputs.models.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "backend-configuration.ts",
            "path": "src/lib/backend-configuration.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "frontend-configuration.ts",
            "path": "src/lib/frontend-configuration.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "Defines the client-side configuration.",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "utils.ts",
            "path": "src/lib/utils.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "workers-pool.installer.ts",
            "path": "src/lib/workers-pool.installer.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "views.installer.ts",
            "path": "src/lib/views.installer.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "auto-generated.ts",
            "path": "src/auto-generated.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "client.ts",
            "path": "src/lib/client.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        },
        {
            "name": "utils.view.ts",
            "path": "src/lib/utils.view.ts",
            "documentation": {
                "sections": [
                    {
                        "semantic": {
                            "role": "",
                            "labels": [],
                            "attributes": {},
                            "relations": {}
                        },
                        "content": "",
                        "contentType": "markdown"
                    }
                ]
            }
        }
    ],
    "children": [
        {
            "name": "TestUtilsTypes",
            "semantic": {
                "role": "module",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "webpm-client/MainModule.TestUtilsTypes",
            "navPath": "@nav/api/MainModule/TestUtilsTypes",
            "isLeaf": true
        },
        {
            "name": "WorkersPoolTypes",
            "semantic": {
                "role": "module",
                "labels": [],
                "attributes": {},
                "relations": {}
            },
            "path": "webpm-client/MainModule.WorkersPoolTypes",
            "navPath": "@nav/api/MainModule/WorkersPoolTypes",
            "isLeaf": true
        }
    ],
    "semantic": {
        "role": "module",
        "labels": [],
        "attributes": {},
        "relations": {}
    }
}
